
bst3360.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001f0c  00001fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00001fa2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001fa2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001437  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000406  00000000  00000000  00003483  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7c  00000000  00000000  00003889  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00004508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000555  00000000  00000000  00004604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d15  00000000  00000000  00004b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000686e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__ctors_end>
       4:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
       8:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
       c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      10:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      14:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      18:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      1c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      20:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      24:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      28:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__vector_10>
      2c:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__vector_11>
      30:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      34:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      38:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      3c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      40:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      44:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      48:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      4c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      50:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      54:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      58:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      5c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      60:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      64:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      68:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      6c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      70:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      74:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      78:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      7c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      80:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      84:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      88:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      8c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      90:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      94:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      98:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      9c:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      a0:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      a4:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>
      a8:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__bad_interrupt>

000000ac <__trampolines_end>:
      ac:	01 03       	mulsu	r16, r17
      ae:	87 8a       	std	Z+23, r8	; 0x17
      b0:	56 0f       	add	r21, r22
      b2:	de 3e       	cpi	r29, 0xEE	; 238
      b4:	fe 5f       	subi	r31, 0xFE	; 254
      b6:	1d b8       	out	0x0d, r1	; 13
      b8:	f2 66       	ori	r31, 0x62	; 98
      ba:	4e ff       	.word	0xff4e	; ????
      bc:	7c 7a       	andi	r23, 0xAC	; 172
      be:	76 4e       	sbci	r23, 0xE6	; 230
      c0:	1c b8       	out	0x0c, r1	; 12
      c2:	d7 0d       	add	r29, r7
      c4:	79 70       	andi	r23, 0x09	; 9
      c6:	62 27       	eor	r22, r18
      c8:	cc 1a       	sub	r12, r28
      ca:	b6 ee       	ldi	r27, 0xE6	; 230
      cc:	3f fc       	.word	0xfc3f	; ????
      ce:	7a 76       	andi	r23, 0x6A	; 106
      d0:	4f 1c       	adc	r4, r15
      d2:	9b b4       	in	r9, 0x2b	; 43
      d4:	cb f5       	brvc	.+114    	; 0x148 <__trampolines_end+0x9c>
      d6:	49 10       	cpse	r4, r9
      d8:	83 84       	ldd	r8, Z+11	; 0x0b
      da:	8a 96       	adiw	r24, 0x2a	; 42
      dc:	8f 7d       	andi	r24, 0xDF	; 223
      de:	78 72       	andi	r23, 0x28	; 40
      e0:	66 4d       	sbci	r22, 0xD6	; 214
      e2:	1e be       	out	0x3e, r1	; 62
      e4:	df 1d       	adc	r29, r15
      e6:	99 b0       	in	r9, 0x09	; 9
      e8:	e2 46       	sbci	r30, 0x62	; 98
      ea:	0e 9e       	mul	r0, r30
      ec:	be fe       	.word	0xfebe	; ????
      ee:	7e 7e       	andi	r23, 0xEE	; 238
      f0:	7e 7e       	andi	r23, 0xEE	; 238
      f2:	5f 1d       	adc	r21, r15
      f4:	bc f2       	brlt	.-82     	; 0xa4 <__SREG__+0x65>
      f6:	47 0c       	add	r4, r7
      f8:	9a b6       	in	r9, 0x3a	; 58
      fa:	cf 1c       	adc	r12, r15
      fc:	9b b4       	in	r9, 0x2b	; 43
      fe:	cb f5       	brvc	.+114    	; 0x172 <__trampolines_end+0xc6>
     100:	49 10       	cpse	r4, r9
     102:	83 65       	ori	r24, 0x53	; 83
     104:	48 12       	cpse	r4, r24
     106:	87 6d       	ori	r24, 0xD7	; 215
     108:	58 32       	cpi	r21, 0x28	; 40
     10a:	c7 0c       	add	r12, r7
     10c:	9a b6       	in	r9, 0x3a	; 58
     10e:	cf 1c       	adc	r12, r15
     110:	ba f6       	brpl	.-82     	; 0xc0 <__trampolines_end+0x14>
     112:	6e 5e       	subi	r22, 0xEE	; 238
     114:	1f bc       	out	0x2f, r1	; 47
     116:	db 34       	cpi	r29, 0x4B	; 75
     118:	cb 14       	cp	r12, r11
     11a:	8b 94       	des	8
     11c:	aa b7       	in	r26, 0x3a	; 58
     11e:	cd f9       	.word	0xf9cd	; ????
     120:	70 43       	sbci	r23, 0x30	; 48
     122:	04 b7       	in	r16, 0x34	; 52
     124:	71 bc       	out	0x21, r7	; 33
     126:	bb 4d       	sbci	r27, 0xDB	; 219
     128:	30 19       	sub	r19, r0
     12a:	01 73       	andi	r16, 0x31	; 49
     12c:	3f d7       	rcall	.+3710   	; 0xfac <__stack+0x4ad>
     12e:	b9 00       	.word	0x00b9	; ????
     130:	10 96       	adiw	r26, 0x00	; 0
     132:	cd 16       	cp	r12, r29
     134:	d5 5f       	subi	r29, 0xF5	; 245
     136:	ed 63       	ori	r30, 0x3D	; 61
     138:	14 f7       	brge	.-60     	; 0xfe <__trampolines_end+0x52>
     13a:	61 6a       	ori	r22, 0xA1	; 161
     13c:	4e b3       	in	r20, 0x1e	; 30
     13e:	8e 70       	andi	r24, 0x0E	; 14
     140:	6e 79       	andi	r22, 0x9E	; 158
     142:	9a 51       	subi	r25, 0x1A	; 26
     144:	24 b4       	in	r2, 0x24	; 36
     146:	c7 ca       	rjmp	.-2674   	; 0xfffff6d6 <__eeprom_end+0xff7ef6d6>
     148:	58 33       	cpi	r21, 0x38	; 56
     14a:	ee 94 c1 2e 	call	0x385d82	; 0x385d82 <__TEXT_REGION_LENGTH__+0x365d82>
     14e:	50 4c       	sbci	r21, 0xC0	; 192
     150:	ec 74       	andi	r30, 0x4C	; 76
     152:	6c 4b       	sbci	r22, 0xBC	; 188
     154:	e4 5a       	subi	r30, 0xA4	; 164
     156:	f0 bb       	out	0x10, r31	; 16
     158:	b0 ba       	out	0x10, r11	; 16
     15a:	38 06       	cpc	r3, r24
     15c:	f7 9b       	sbis	0x1e, 7	; 30
     15e:	ac de       	rcall	.-680    	; 0xfffffeb8 <__eeprom_end+0xff7efeb8>
     160:	47 c2       	rjmp	.+1166   	; 0x5f0 <__FUSE_REGION_LENGTH__+0x1f0>
     162:	f7 3e       	cpi	r31, 0xE7	; 231
     164:	a7 4a       	sbci	r26, 0xA7	; 167
     166:	33 9d       	mul	r19, r3
     168:	97 3d       	cpi	r25, 0xD7	; 215
     16a:	89 9d       	mul	r24, r9
     16c:	f7 28       	or	r15, r7
     16e:	8a b2       	in	r8, 0x1a	; 26
     170:	44 44       	sbci	r20, 0x44	; 68
     172:	49 ae       	std	Y+57, r4	; 0x39
     174:	e1 f9       	bld	r30, 1
     176:	eb 36       	cpi	r30, 0x6B	; 107
     178:	d2 5d       	subi	r29, 0xD2	; 210
     17a:	43 85       	ldd	r20, Z+11	; 0x0b
     17c:	55 88       	ldd	r5, Z+21	; 0x15
     17e:	e8 a9       	ldd	r30, Y+48	; 0x30
     180:	81 ea       	ldi	r24, 0xA1	; 161
     182:	f7 52       	subi	r31, 0x27	; 39
     184:	7d d4       	rcall	.+2298   	; 0xa80 <__FUSE_REGION_LENGTH__+0x680>
     186:	88 07       	cpc	r24, r24
     188:	da d8       	rcall	.-3660   	; 0xfffff33e <__eeprom_end+0xff7ef33e>
     18a:	ce 3f       	cpi	r28, 0xFE	; 254
     18c:	e2 ed       	ldi	r30, 0xD2	; 210
     18e:	6e 7f       	andi	r22, 0xFE	; 254
     190:	28 85       	ldd	r18, Y+8	; 0x08
     192:	6f ad       	ldd	r22, Y+63	; 0x3f
     194:	dd f1       	brhs	.+118    	; 0x20c <__trampolines_end+0x160>
     196:	f4 23       	and	r31, r20
     198:	6b dd       	rcall	.-1322   	; 0xfffffc70 <__eeprom_end+0xff7efc70>
     19a:	7c 33       	cpi	r23, 0x3C	; 60
     19c:	03 b8       	out	0x03, r0	; 3
     19e:	2b 5c       	subi	r18, 0xCB	; 203
     1a0:	33 f9       	bld	r19, 3
     1a2:	49 0e       	add	r4, r25
     1a4:	70 4e       	sbci	r23, 0xE0	; 224
     1a6:	d8 eb       	ldi	r29, 0xB8	; 184
     1a8:	50 5b       	subi	r21, 0xB0	; 176
     1aa:	85 d0       	rcall	.+266    	; 0x2b6 <__trampolines_end+0x20a>
     1ac:	81 72       	andi	r24, 0x21	; 33
     1ae:	bc 58       	subi	r27, 0x8C	; 140
     1b0:	84 db       	rcall	.-2296   	; 0xfffff8ba <__eeprom_end+0xff7ef8ba>
     1b2:	76 7b       	andi	r23, 0xB6	; 182
     1b4:	a2 85       	ldd	r26, Z+10	; 0x0a
     1b6:	5f 7f       	andi	r21, 0xFF	; 255
     1b8:	f9 f2       	breq	.-66     	; 0x178 <__trampolines_end+0xcc>
     1ba:	e2 27       	eor	r30, r18
     1bc:	6a 82       	std	Y+2, r6	; 0x02
     1be:	25 b8       	out	0x05, r2	; 5
     1c0:	4d 49       	sbci	r20, 0x9D	; 157
     1c2:	b3 fa       	bst	r11, 3
     1c4:	b6 7f       	andi	r27, 0xF6	; 246
     1c6:	bf b2       	in	r11, 0x1f	; 31
     1c8:	65 83       	std	Z+5, r22	; 0x05
     1ca:	70 c0       	rjmp	.+224    	; 0x2ac <__trampolines_end+0x200>
     1cc:	51 9d       	mul	r21, r1
     1ce:	e2 ff       	sbrs	r30, 2
     1d0:	0c 7c       	andi	r16, 0xCC	; 204
     1d2:	c3 93       	.word	0x93c3	; ????
     1d4:	2c 62       	ori	r18, 0x2C	; 44
     1d6:	fd 87       	std	Y+13, r31	; 0x0d
     1d8:	c8 f4       	brcc	.+50     	; 0x20c <__trampolines_end+0x160>
     1da:	56 15       	cp	r21, r6
     1dc:	09 b5       	in	r16, 0x29	; 41
     1de:	b0 94       	com	r11
     1e0:	a7 1c       	adc	r10, r7
     1e2:	94 79       	andi	r25, 0x94	; 148
     1e4:	6c 00       	.word	0x006c	; ????
     1e6:	d5 31       	cpi	r29, 0x15	; 21
     1e8:	c2 ff       	sbrs	r28, 2
     1ea:	67 5b       	subi	r22, 0xB7	; 183
     1ec:	3b 0f       	add	r19, r27
     1ee:	97 43       	sbci	r25, 0x37	; 55
     1f0:	a6 89       	ldd	r26, Z+22	; 0x16
     1f2:	07 19       	sub	r16, r7
     1f4:	8c 2a       	or	r8, r28
     1f6:	99 10       	cpse	r9, r9
     1f8:	aa 47       	sbci	r26, 0x7A	; 122
     1fa:	fc 1e       	adc	r15, r28
     1fc:	5a 7c       	andi	r21, 0xCA	; 202
     1fe:	bc 35       	cpi	r27, 0x5C	; 92
     200:	7d c4       	rjmp	.+2298   	; 0xafc <__FUSE_REGION_LENGTH__+0x6fc>
     202:	9b 51       	subi	r25, 0x1B	; 27
     204:	ea 53       	subi	r30, 0x3A	; 58
     206:	84 1d       	adc	r24, r4
     208:	7c 03       	fmul	r23, r20
     20a:	b0 16       	cp	r11, r16
     20c:	5f 3a       	cpi	r21, 0xAF	; 175
     20e:	3e 66       	ori	r19, 0x6E	; 110
     210:	3c 9d       	mul	r19, r12
     212:	b8 4a       	sbci	r27, 0xA8	; 168
     214:	6e a8       	ldd	r6, Y+54	; 0x36
     216:	3e 7d       	andi	r19, 0xDE	; 222
     218:	66 6a       	ori	r22, 0xA6	; 166
     21a:	f4 dd       	rcall	.-1048   	; 0xfffffe04 <__eeprom_end+0xff7efe04>
     21c:	1d 79       	andi	r17, 0x9D	; 157
     21e:	d7 31       	cpi	r29, 0x17	; 23
     220:	d6 8c       	ldd	r13, Z+30	; 0x1e
     222:	ec 9c       	mul	r14, r12
     224:	7b f2       	brvs	.-98     	; 0x1c4 <__trampolines_end+0x118>
     226:	45 32       	cpi	r20, 0x25	; 37
     228:	c6 02       	muls	r28, r22
     22a:	63 c4       	rjmp	.+2246   	; 0xaf2 <__FUSE_REGION_LENGTH__+0x6f2>
     22c:	2d 40       	sbci	r18, 0x0D	; 13
     22e:	99 b1       	in	r25, 0x09	; 9
     230:	f6 d5       	rcall	.+3052   	; 0xe1e <__stack+0x31f>
     232:	ab 21       	and	r26, r11
     234:	64 9d       	mul	r22, r4
     236:	5b f0       	brvs	.+22     	; 0x24e <__trampolines_end+0x1a2>
     238:	3d 02       	muls	r19, r29
     23a:	d7 eb       	ldi	r29, 0xB7	; 183
     23c:	3d 65       	ori	r19, 0x5D	; 93
     23e:	f7 f8       	bld	r15, 7
     240:	03 11       	cpse	r16, r3
     242:	5d cc       	rjmp	.-1862   	; 0xfffffafe <__eeprom_end+0xff7efafe>
     244:	97 c1       	rjmp	.+814    	; 0x574 <__FUSE_REGION_LENGTH__+0x174>
     246:	f5 24       	eor	r15, r5
     248:	2f bd       	out	0x2f, r18	; 47
     24a:	b9 85       	ldd	r27, Y+9	; 0x09
     24c:	7d d9       	rcall	.-3334   	; 0xfffff548 <__eeprom_end+0xff7ef548>
     24e:	dd bb       	out	0x1d, r29	; 29
     250:	52 5f       	subi	r21, 0xF2	; 242
     252:	c9 96       	adiw	r24, 0x39	; 57
     254:	96 6d       	ori	r25, 0xD6	; 214
     256:	65 c5       	rjmp	.+2762   	; 0xd22 <__stack+0x223>
     258:	42 ab       	std	Z+50, r20	; 0x32
     25a:	de 94 4e dd 	call	0x35ba9c	; 0x35ba9c <__TEXT_REGION_LENGTH__+0x33ba9c>
     25e:	db 5c       	subi	r29, 0xCB	; 203
     260:	fb 88       	ldd	r15, Y+19	; 0x13
     262:	3a 83       	std	Y+2, r19	; 0x02
     264:	cc 19       	sub	r28, r12
     266:	ca ef       	ldi	r28, 0xFA	; 250
     268:	f5 60       	ori	r31, 0x05	; 5
     26a:	d3 1c       	adc	r13, r3
     26c:	c0 af       	std	Z+56, r28	; 0x38
     26e:	37 67       	ori	r19, 0x77	; 119
     270:	a8 29       	or	r26, r8
     272:	ad af       	std	Y+61, r26	; 0x3d
     274:	77 49       	sbci	r23, 0x97	; 151
     276:	47 47       	sbci	r20, 0x77	; 119
     278:	e6 23       	and	r30, r22
     27a:	0e 52       	subi	r16, 0x2E	; 46
     27c:	7d 15       	cp	r23, r13
     27e:	5a a6       	std	Y+42, r5	; 0x2a
     280:	8e 40       	sbci	r24, 0x0E	; 14
     282:	88 5e       	subi	r24, 0xE8	; 232
     284:	02 52       	subi	r16, 0x22	; 34
     286:	bc 15       	cp	r27, r12
     288:	90 16       	cp	r9, r16
     28a:	47 d5       	rcall	.+2702   	; 0xd1a <__stack+0x21b>
     28c:	49 b1       	in	r20, 0x09	; 9
     28e:	66 3b       	cpi	r22, 0xB6	; 182
     290:	c7 f9       	bld	r28, 7
     292:	49 ce       	rjmp	.-878    	; 0xffffff26 <__eeprom_end+0xff7eff26>
     294:	c6 e4       	ldi	r28, 0x46	; 70
     296:	47 c6       	rjmp	.+3214   	; 0xf26 <__stack+0x427>
     298:	0b 6f       	ori	r16, 0xFB	; 251
     29a:	1e 7a       	andi	r17, 0xAE	; 174
     29c:	2e 31       	cpi	r18, 0x1E	; 30
     29e:	e6 30       	cpi	r30, 0x06	; 6
     2a0:	f4 53       	subi	r31, 0x34	; 52
     2a2:	01 39       	cpi	r16, 0x91	; 145
     2a4:	3e f4       	brtc	.+14     	; 0x2b4 <__trampolines_end+0x208>
     2a6:	2d c4       	rjmp	.+2138   	; 0xb02 <__stack+0x3>
     2a8:	d4 2f       	mov	r29, r20
     2aa:	84 ae       	std	Z+60, r8	; 0x3c
     2ac:	5d 78       	andi	r21, 0x8D	; 141
     2ae:	58 e3       	ldi	r21, 0x38	; 56
     2b0:	e5 ac       	ldd	r14, Z+61	; 0x3d
     2b2:	09 72       	andi	r16, 0x29	; 41
     2b4:	90 24       	eor	r9, r0
     2b6:	30 c7       	rjmp	.+3680   	; 0x1118 <config1_descriptor+0x1f>
     2b8:	54 0e       	add	r5, r20
     2ba:	3c 9b       	sbis	0x07, 4	; 7
     2bc:	bf 68       	ori	r27, 0x8F	; 143
     2be:	25 e5       	ldi	r18, 0x55	; 85
     2c0:	ec b7       	in	r30, 0x3c	; 60
     2c2:	14 5e       	subi	r17, 0xE4	; 228
     2c4:	67 a8       	ldd	r6, Z+55	; 0x37
     2c6:	85 bb       	out	0x15, r24	; 21
     2c8:	80 59       	subi	r24, 0x90	; 144
     2ca:	30 c3       	rjmp	.+1632   	; 0x92c <__FUSE_REGION_LENGTH__+0x52c>
     2cc:	e5 29       	or	r30, r5
     2ce:	d0 57       	subi	r29, 0x70	; 112
     2d0:	14 2f       	mov	r17, r20
     2d2:	9b 86       	std	Y+11, r9	; 0x0b
     2d4:	e4 0d       	add	r30, r4
     2d6:	2d 5b       	subi	r18, 0xBD	; 189
     2d8:	1f 23       	and	r17, r31
     2da:	b0 63       	ori	r27, 0x30	; 48
     2dc:	57 1a       	sub	r5, r23
     2de:	dd 1d       	adc	r29, r13
     2e0:	ed fa       	.word	0xfaed	; ????
     2e2:	d3 e5       	ldi	r29, 0x53	; 83
     2e4:	5b 06       	cpc	r5, r27
     2e6:	a6 9e       	mul	r10, r22
     2e8:	f6 ec       	ldi	r31, 0xC6	; 198
     2ea:	d9 26       	eor	r13, r25
     2ec:	2b 64       	ori	r18, 0x4B	; 75
     2ee:	a9 e6       	ldi	r26, 0x69	; 105
     2f0:	2f bd       	out	0x2f, r18	; 47
     2f2:	8c 5e       	subi	r24, 0xEC	; 236
     2f4:	62 e4       	ldi	r22, 0x42	; 66
     2f6:	4a 3c       	cpi	r20, 0xCA	; 202
     2f8:	2b 56       	subi	r18, 0x6B	; 107
     2fa:	d9 40       	sbci	r29, 0x09	; 9
     2fc:	70 85       	ldd	r23, Z+8	; 0x08
     2fe:	1d d8       	rcall	.-4038   	; 0xfffff33a <__eeprom_end+0xff7ef33a>
     300:	b3 6c       	ori	r27, 0xC3	; 195
     302:	dd a6       	std	Y+45, r13	; 0x2d
     304:	94 ab       	std	Z+52, r25	; 0x34
     306:	74 82       	std	Z+4, r7	; 0x04
     308:	2b bf       	out	0x3b, r18	; 59
     30a:	75 9f       	mul	r23, r21
     30c:	ba 2d       	mov	r27, r10
     30e:	e4 06       	cpc	r14, r20
     310:	31 3d       	cpi	r19, 0xD1	; 209
     312:	98 72       	andi	r25, 0x28	; 40
     314:	03 42       	sbci	r16, 0x23	; 35
     316:	df 25       	eor	r29, r15
     318:	c1 a1       	ldd	r28, Z+33	; 0x21
     31a:	f6 ac       	ldd	r15, Z+62	; 0x3e
     31c:	a9 39       	cpi	r26, 0x99	; 153
     31e:	85 81       	ldd	r24, Z+5	; 0x05
     320:	f1 a2       	std	Z+33, r15	; 0x21
     322:	d3 03       	fmuls	r21, r19
     324:	b1 c8       	rjmp	.-3742   	; 0xfffff488 <__eeprom_end+0xff7ef488>
     326:	52 89       	ldd	r21, Z+18	; 0x12
     328:	2f 7a       	andi	r18, 0xAF	; 175
     32a:	b3 53       	subi	r27, 0x33	; 51
     32c:	4b 45       	sbci	r20, 0x5B	; 91
     32e:	8a 83       	std	Y+2, r24	; 0x02
     330:	42 f2       	brmi	.-112    	; 0x2c2 <__trampolines_end+0x216>
     332:	10 ac       	ldd	r1, Z+56	; 0x38
     334:	9b 90       	.word	0x909b	; ????
     336:	6d e1       	ldi	r22, 0x1D	; 29
     338:	e2 37       	cpi	r30, 0x72	; 114
     33a:	f6 ff       	sbrs	r31, 6
     33c:	bf 93       	push	r27
     33e:	d0 c2       	rjmp	.+1440   	; 0x8e0 <__FUSE_REGION_LENGTH__+0x4e0>
     340:	a6 64       	ori	r26, 0x46	; 70
     342:	5c 87       	std	Y+12, r21	; 0x0c
     344:	0d 3b       	cpi	r16, 0xBD	; 189
     346:	e7 33       	cpi	r30, 0x37	; 55
     348:	65 8b       	std	Z+21, r22	; 0x15
     34a:	f6 7d       	andi	r31, 0xD6	; 214
     34c:	09 90       	ld	r0, Y+
     34e:	52 76       	andi	r21, 0x62	; 98
     350:	8a 2d       	mov	r24, r10
     352:	dd 7b       	andi	r29, 0xBD	; 189
     354:	1b c0       	rjmp	.+54     	; 0x38c <__trampolines_end+0x2e0>
     356:	f2 07       	cpc	r31, r18
     358:	14 29       	or	r17, r4
     35a:	73 50       	subi	r23, 0x03	; 3
     35c:	05 d7       	rcall	.+3594   	; 0x1168 <device_descriptor+0x8>
     35e:	12 21       	and	r17, r2
     360:	ff cc       	rjmp	.-1538   	; 0xfffffd60 <__eeprom_end+0xff7efd60>
     362:	07 55       	subi	r16, 0x57	; 87
     364:	c9 59       	subi	r28, 0x99	; 153
     366:	7a 3f       	cpi	r23, 0xFA	; 250
     368:	12 cf       	rjmp	.-476    	; 0x18e <__trampolines_end+0xe2>
     36a:	15 c9       	rjmp	.-3542   	; 0xfffff596 <__eeprom_end+0xff7ef596>
     36c:	6b d1       	rcall	.+726    	; 0x644 <__FUSE_REGION_LENGTH__+0x244>
     36e:	63 d9       	rcall	.-3386   	; 0xfffff636 <__eeprom_end+0xff7ef636>
     370:	e2 12       	cpse	r14, r18
     372:	e3 ad       	ldd	r30, Z+59	; 0x3b
     374:	7a ea       	ldi	r23, 0xAA	; 170
     376:	a7 89       	ldd	r26, Z+23	; 0x17
     378:	d8 a6       	std	Y+40, r13	; 0x28
     37a:	6c 1e       	adc	r6, r28
     37c:	f5 cd       	rjmp	.-1046   	; 0xffffff68 <__eeprom_end+0xff7eff68>
     37e:	bb c0       	rjmp	.+374    	; 0x4f6 <__FUSE_REGION_LENGTH__+0xf6>
     380:	50 41       	sbci	r21, 0x10	; 16
     382:	45 6a       	ori	r20, 0xA5	; 165
     384:	64 c2       	rjmp	.+1224   	; 0x84e <__FUSE_REGION_LENGTH__+0x44e>
     386:	36 dc       	rcall	.-1940   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
     388:	67 06       	cpc	r6, r23
     38a:	4d 6c       	ori	r20, 0xCD	; 205
     38c:	42 a1       	ldd	r20, Z+34	; 0x22
     38e:	e5 71       	andi	r30, 0x15	; 21
     390:	35 f2       	brhs	.-116    	; 0x31e <__trampolines_end+0x272>
     392:	42 56       	subi	r20, 0x62	; 98
     394:	bb 37       	cpi	r27, 0x7B	; 123
     396:	51 f0       	breq	.+20     	; 0x3ac <__trampolines_end+0x300>
     398:	d2 a3       	std	Z+34, r29	; 0x22
     39a:	6f fa       	.word	0xfa6f	; ????
     39c:	d2 eb       	ldi	r29, 0xB2	; 178
     39e:	4f f0       	brie	.+18     	; 0x3b2 <__trampolines_end+0x306>
     3a0:	cb 97       	sbiw	r24, 0x3b	; 59
     3a2:	dd 22       	and	r13, r29
     3a4:	72 71       	andi	r23, 0x12	; 18
     3a6:	59 47       	sbci	r21, 0x79	; 121
     3a8:	fb ba       	out	0x1b, r15	; 27
     3aa:	6e 5b       	subi	r22, 0xBE	; 190
     3ac:	a8 70       	andi	r26, 0x08	; 8
     3ae:	32 0d       	add	r19, r2
     3b0:	59 e0       	ldi	r21, 0x09	; 9
     3b2:	39 f6       	brne	.-114    	; 0x342 <__trampolines_end+0x296>
     3b4:	50 36       	cpi	r21, 0x60	; 96
     3b6:	f2 43       	sbci	r31, 0x32	; 50
     3b8:	5c f4       	brge	.+22     	; 0x3d0 <__trampolines_end+0x324>
     3ba:	89 c7       	rjmp	.+3858   	; 0x12ce <main+0x11c>
     3bc:	1c 6c       	ori	r17, 0xCC	; 204
     3be:	7f 24       	eor	r7, r15
     3c0:	3e b5       	in	r19, 0x2e	; 46
     3c2:	c2 db       	rcall	.-2172   	; 0xfffffb48 <__eeprom_end+0xff7efb48>
     3c4:	1f 82       	std	Y+7, r1	; 0x07
     3c6:	ce 3b       	cpi	r28, 0xBE	; 190
     3c8:	8d bc       	out	0x2d, r8	; 45
     3ca:	39 db       	rcall	.-2446   	; 0xfffffa3e <__eeprom_end+0xff7efa3e>
     3cc:	ab 70       	andi	r26, 0x0B	; 11
     3ce:	83 05       	cpc	r24, r3
     3d0:	23 4b       	sbci	r18, 0xB3	; 179
     3d2:	59 cd       	rjmp	.-1358   	; 0xfffffe86 <__eeprom_end+0xff7efe86>
     3d4:	2a 22       	and	r2, r26
     3d6:	51 13       	cpse	r21, r17
     3d8:	89 a6       	std	Y+41, r8	; 0x29
     3da:	4d 91       	ld	r20, X+
     3dc:	b9 8e       	std	Y+25, r11	; 0x19
     3de:	30 40       	sbci	r19, 0x00	; 0
     3e0:	8c ac       	ldd	r8, Y+60	; 0x3c
     3e2:	84 d7       	rcall	.+3848   	; 0x12ec <main+0x13a>
     3e4:	9b a3       	std	Y+35, r25	; 0x23
     3e6:	6c 4b       	sbci	r22, 0xBC	; 188
     3e8:	a2 6a       	ori	r26, 0xA2	; 162
     3ea:	8a 25       	eor	r24, r10
     3ec:	2f 09       	sbc	r18, r15
     3ee:	27 eb       	ldi	r18, 0xB7	; 183
     3f0:	f7 f7       	brid	.-4      	; 0x3ee <__trampolines_end+0x342>
     3f2:	16 7d       	andi	r17, 0xD6	; 214
     3f4:	4c 8b       	std	Y+20, r20	; 0x14
     3f6:	7e 17       	cp	r23, r30
     3f8:	7a 43       	sbci	r23, 0x3A	; 58
     3fa:	00 0c       	add	r0, r0
     3fc:	80 b0       	in	r8, 0x00	; 0
     3fe:	16 58       	subi	r17, 0x86	; 134
     400:	01 9c       	mul	r0, r1
     402:	f8 a6       	std	Y+40, r15	; 0x28
     404:	0e 64       	ori	r16, 0x4E	; 78
     406:	5f bf       	out	0x3f, r21	; 63
     408:	f1 c4       	rjmp	.+2530   	; 0xdec <__stack+0x2ed>
     40a:	6d 1b       	sub	r22, r29
     40c:	47 2d       	mov	r20, r7
     40e:	de 2a       	or	r13, r30
     410:	7a 04       	cpc	r7, r10
     412:	fe e9       	ldi	r31, 0x9E	; 158
     414:	c2 9e       	mul	r12, r18
     416:	a6 bf       	out	0x36, r26	; 54
     418:	90 74       	andi	r25, 0x40	; 64
     41a:	72 d6       	rcall	.+3300   	; 0x1100 <config1_descriptor+0x7>
     41c:	a9 53       	subi	r26, 0x39	; 57
     41e:	65 f4       	brhc	.+24     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
     420:	69 d5       	rcall	.+2770   	; 0xef4 <__stack+0x3f5>
     422:	58 90       	.word	0x9058	; ????
     424:	a8 8d       	ldd	r26, Y+24	; 0x18
     426:	3c 3a       	cpi	r19, 0xAC	; 172
     428:	86 49       	sbci	r24, 0x96	; 150
     42a:	6f df       	rcall	.-290    	; 0x30a <__trampolines_end+0x25e>
     42c:	a7 33       	cpi	r26, 0x37	; 55
     42e:	b1 68       	ori	r27, 0x81	; 129
     430:	39 51       	subi	r19, 0x19	; 25
     432:	82 de       	rcall	.-764    	; 0x138 <__trampolines_end+0x8c>
     434:	f2 69       	ori	r31, 0x92	; 146
     436:	ac 9b       	sbis	0x15, 4	; 21
     438:	93 38       	cpi	r25, 0x83	; 131
     43a:	50 5b       	subi	r21, 0xB0	; 176
     43c:	19 5b       	subi	r17, 0xB9	; 185
     43e:	c2 14       	cp	r12, r2
     440:	9c 18       	sub	r9, r12
     442:	0e 4c       	sbci	r16, 0xCE	; 206
     444:	2f f1       	brie	.+74     	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     446:	fa d4       	rcall	.+2548   	; 0xe3c <__stack+0x33d>
     448:	b6 5f       	subi	r27, 0xF6	; 246
     44a:	b9 b8       	out	0x09, r11	; 9
     44c:	47 a4       	ldd	r4, Z+47	; 0x2f
     44e:	eb dd       	rcall	.-1066   	; 0x26 <__zero_reg__+0x25>
     450:	ce 46       	sbci	r28, 0x6E	; 110
     452:	8d 21       	and	r24, r13
     454:	88 c3       	rjmp	.+1808   	; 0xb66 <__stack+0x67>
     456:	a6 ae       	std	Z+62, r10	; 0x3e
     458:	07 4e       	sbci	r16, 0xE7	; 231
     45a:	bf b6       	in	r11, 0x3f	; 63
     45c:	8c 3a       	cpi	r24, 0xAC	; 172
     45e:	14 bd       	out	0x24, r17	; 36
     460:	99 a0       	ldd	r9, Y+33	; 0x21
     462:	34 49       	sbci	r19, 0x94	; 148
     464:	e2 ad       	ldd	r30, Z+58	; 0x3a
     466:	68 b0       	in	r6, 0x08	; 8
     468:	45 cf       	rjmp	.-374    	; 0x2f4 <__trampolines_end+0x248>
     46a:	bc 27       	eor	r27, r28
     46c:	66 cc       	rjmp	.-1844   	; 0xfffffd3a <__eeprom_end+0xff7efd3a>
     46e:	eb b9       	out	0x0b, r30	; 11
     470:	14 3c       	cpi	r17, 0xC4	; 196
     472:	15 b9       	out	0x05, r17	; 5
     474:	53 37       	cpi	r21, 0x73	; 115
     476:	26 3a       	cpi	r18, 0xA6	; 166
     478:	61 4e       	sbci	r22, 0xE1	; 225
     47a:	1e 2f       	mov	r17, r30
     47c:	1f 1b       	sub	r17, r31
     47e:	33 54       	subi	r19, 0x43	; 67
     480:	87 a1       	ldd	r24, Z+39	; 0x27
     482:	17 8c       	ldd	r1, Z+31	; 0x1f
     484:	df aa       	std	Y+55, r13	; 0x37
     486:	51 79       	andi	r21, 0x91	; 145
     488:	55 f2       	brhs	.-108    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     48a:	a5 35       	cpi	r26, 0x55	; 85
     48c:	38 63       	ori	r19, 0x38	; 56
     48e:	87 2b       	or	r24, r23
     490:	93 04       	cpc	r9, r3
     492:	31 54       	subi	r19, 0x41	; 65
     494:	01 04       	cpc	r0, r1
     496:	28 2f       	mov	r18, r24
     498:	0c 2a       	or	r0, r28
     49a:	34 6c       	ori	r19, 0xC4	; 196
     49c:	1d 39       	cpi	r17, 0x9D	; 157
     49e:	3e 53       	subi	r19, 0x3E	; 62
     4a0:	86 f2       	brts	.-96     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     4a2:	b4 0e       	add	r11, r20
     4a4:	48 1c       	adc	r4, r8
     4a6:	ca b4       	in	r12, 0x2a	; 42
     4a8:	57 1d       	adc	r21, r7
     4aa:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4ac:	96 6c       	ori	r25, 0xC6	; 198
     4ae:	2c 99       	sbic	0x05, 4	; 5
     4b0:	1e e3       	ldi	r17, 0x3E	; 62
     4b2:	73 da       	rcall	.-2842   	; 0xfffff99a <__eeprom_end+0xff7ef99a>
     4b4:	c1 7d       	andi	r28, 0xD1	; 209
     4b6:	11 79       	andi	r17, 0x91	; 145
     4b8:	65 e1       	ldi	r22, 0x15	; 21
     4ba:	e2 ef       	ldi	r30, 0xF2	; 242
     4bc:	a5 b8       	out	0x05, r10	; 5
     4be:	7f a2       	std	Y+39, r7	; 0x27
     4c0:	68 0f       	add	r22, r24
     4c2:	8a 59       	subi	r24, 0x9A	; 154
     4c4:	be f2       	brts	.-82     	; 0x474 <__FUSE_REGION_LENGTH__+0x74>
     4c6:	ee 0d       	add	r30, r14
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	0a 72       	andi	r16, 0x2A	; 42
     4cc:	e7 71       	andi	r30, 0x17	; 23
     4ce:	e9 82       	std	Y+1, r14	; 0x01
     4d0:	08 78       	andi	r16, 0x88	; 136
     4d2:	a6 6c       	ori	r26, 0xC6	; 198
     4d4:	3b ff       	.word	0xff3b	; ????
     4d6:	8c 3a       	cpi	r24, 0xAC	; 172
     4d8:	02 fc       	sbrc	r0, 2
     4da:	cb 4f       	sbci	r28, 0xFB	; 251
     4dc:	94 9a       	sbi	0x12, 4	; 18
     4de:	8f 77       	andi	r24, 0x7F	; 127
     4e0:	1f 65       	ori	r17, 0x5F	; 95
     4e2:	26 27       	eor	r18, r22
     4e4:	ae e2       	ldi	r26, 0x2E	; 46
     4e6:	6b 50       	subi	r22, 0x0B	; 11
     4e8:	7a b8       	out	0x0a, r7	; 10
     4ea:	28 f7       	brcc	.-54     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
     4ec:	4b 7e       	andi	r20, 0xEB	; 235
     4ee:	5a 6e       	ori	r21, 0xEA	; 234
     4f0:	d9 3d       	cpi	r29, 0xD9	; 217
     4f2:	07 80       	ldd	r0, Z+7	; 0x07
     4f4:	20 66       	ori	r18, 0x60	; 96
     4f6:	0a 34       	cpi	r16, 0x4A	; 74
     4f8:	ca 66       	ori	r28, 0x6A	; 106
     4fa:	cd d2       	rcall	.+1434   	; 0xa96 <__FUSE_REGION_LENGTH__+0x696>
     4fc:	b9 54       	subi	r27, 0x49	; 73
     4fe:	ea 26       	eor	r14, r26
     500:	e2 ad       	ldd	r30, Z+58	; 0x3a
     502:	5b 91       	.word	0x915b	; ????
     504:	61 11       	cpse	r22, r1
     506:	26 db       	rcall	.-2484   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     508:	dd 7b       	andi	r29, 0xBD	; 189
     50a:	05 5e       	subi	r16, 0xE5	; 229
     50c:	fa 2e       	mov	r15, r26
     50e:	db 96       	adiw	r26, 0x3b	; 59
     510:	cf 57       	subi	r28, 0x7F	; 127
     512:	dc da       	rcall	.-2632   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     514:	c3 ca       	rjmp	.-2682   	; 0xfffffa9c <__eeprom_end+0xff7efa9c>
     516:	00 01       	movw	r0, r0
     518:	5e c9       	rjmp	.-3396   	; 0xfffff7d6 <__eeprom_end+0xff7ef7d6>
     51a:	25 e2       	ldi	r18, 0x25	; 37
     51c:	b3 46       	sbci	r27, 0x63	; 99
     51e:	30 76       	andi	r19, 0x60	; 96
     520:	3a bf       	out	0x3a, r19	; 58
     522:	bc 7d       	andi	r27, 0xDC	; 220
     524:	2d 02       	muls	r18, r29
     526:	e1 41       	sbci	r30, 0x11	; 17
     528:	b6 aa       	std	Z+54, r11	; 0x36
     52a:	8e 71       	andi	r24, 0x1E	; 30
     52c:	58 11       	cpse	r21, r8
     52e:	51 d7       	rcall	.+3746   	; 0x13d2 <main+0x220>
     530:	09 29       	or	r16, r9
     532:	d4 df       	rcall	.-88     	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     534:	e3 e6       	ldi	r30, 0x63	; 99
     536:	04 34       	cpi	r16, 0x44	; 68
     538:	6f 7d       	andi	r22, 0xDF	; 223
     53a:	29 18       	sub	r2, r9
     53c:	13 06       	cpc	r1, r19
     53e:	eb b4       	in	r14, 0x2b	; 43
     540:	5a b5       	in	r21, 0x2a	; 42
     542:	9c 7e       	andi	r25, 0xEC	; 236
     544:	22 45       	sbci	r18, 0x52	; 82
     546:	23 7a       	andi	r18, 0xA3	; 163
     548:	02 e6       	ldi	r16, 0x62	; 98
     54a:	27 6c       	ori	r18, 0xC7	; 199
     54c:	d9 60       	ori	r29, 0x09	; 9
     54e:	48 c3       	rjmp	.+1680   	; 0xbe0 <__stack+0xe1>
     550:	f6 bb       	out	0x16, r31	; 22
     552:	56 b2       	in	r5, 0x16	; 22
     554:	36 5e       	subi	r19, 0xE6	; 230
     556:	bd 7e       	andi	r27, 0xED	; 237
     558:	d8 a3       	std	Y+32, r29	; 0x20
     55a:	0d fd       	.word	0xfd0d	; ????
     55c:	ea 4f       	sbci	r30, 0xFA	; 250
     55e:	7d e9       	ldi	r23, 0x9D	; 157
     560:	55 69       	ori	r21, 0x95	; 149
     562:	5c b2       	in	r5, 0x1c	; 28
     564:	44 4d       	sbci	r20, 0xD4	; 212
     566:	bc ee       	ldi	r27, 0xEC	; 236
     568:	2d 5b       	subi	r18, 0xBD	; 189
     56a:	96 28       	or	r9, r6
     56c:	95 9d       	mul	r25, r5
     56e:	a9 37       	cpi	r26, 0x79	; 121
     570:	53 ce       	rjmp	.-858    	; 0x218 <__trampolines_end+0x16c>
     572:	2f 65       	ori	r18, 0x5F	; 95
     574:	d8 5a       	subi	r29, 0xA8	; 168
     576:	01 d8       	rcall	.-4094   	; 0xfffff57a <__eeprom_end+0xff7ef57a>
     578:	11 f6       	brne	.-124    	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
     57a:	cc 69       	ori	r28, 0x9C	; 156
     57c:	20 57       	subi	r18, 0x70	; 112
     57e:	2f 1d       	adc	r18, r15
     580:	0f e2       	ldi	r16, 0x2F	; 47
     582:	8c c7       	rjmp	.+3864   	; 0x149c <main+0x2ea>
     584:	57 04       	cpc	r5, r7
     586:	7f fe       	.word	0xfe7f	; ????
     588:	3e 5c       	subi	r19, 0xCE	; 206
     58a:	57 1e       	adc	r5, r23
     58c:	81 ba       	out	0x11, r8	; 17
     58e:	5b 39       	cpi	r21, 0x9B	; 155
     590:	e9 2e       	mov	r14, r25
     592:	4e 8f       	std	Y+30, r20	; 0x1e
     594:	1f 21       	and	r17, r15
     596:	33 91       	.word	0x9133	; ????
     598:	79 c0       	rjmp	.+242    	; 0x68c <__FUSE_REGION_LENGTH__+0x28c>
     59a:	a0 3f       	cpi	r26, 0xF0	; 240
     59c:	2c 9f       	mul	r18, r28
     59e:	f4 fe       	sbrs	r15, 4
     5a0:	b7 ac       	ldd	r11, Z+63	; 0x3f
     5a2:	6e d3       	rcall	.+1756   	; 0xc80 <__stack+0x181>
     5a4:	86 2e       	mov	r8, r22
     5a6:	2f 2c       	mov	r2, r15
     5a8:	79 4f       	sbci	r23, 0xF9	; 249
     5aa:	dc 2b       	or	r29, r28
     5ac:	56 1e       	adc	r5, r22
     5ae:	70 50       	subi	r23, 0x00	; 0
     5b0:	f1 58       	subi	r31, 0x81	; 129
     5b2:	52 b8       	out	0x02, r5	; 2
     5b4:	7d b2       	in	r7, 0x1d	; 29
     5b6:	9a 86       	std	Y+10, r9	; 0x0a
     5b8:	01 31       	cpi	r16, 0x11	; 17
     5ba:	e4 16       	cp	r14, r20
     5bc:	0c ec       	ldi	r16, 0xCC	; 204
     5be:	5e 0b       	sbc	r21, r30
     5c0:	a6 5e       	subi	r26, 0xE6	; 230
     5c2:	6d 37       	cpi	r22, 0x7D	; 125
     5c4:	ee fc       	.word	0xfcee	; ????
     5c6:	18 9e       	mul	r1, r24
     5c8:	5e b8       	out	0x0e, r5	; 14
     5ca:	7e ca       	rjmp	.-2820   	; 0xfffffac8 <__eeprom_end+0xff7efac8>
     5cc:	68 51       	subi	r22, 0x18	; 24
     5ce:	8c 23       	and	r24, r28
     5d0:	7e 03       	fmul	r23, r22
     5d2:	cf 9e       	mul	r12, r31
     5d4:	af 53       	subi	r26, 0x3F	; 63
     5d6:	36 f9       	bld	r19, 6
     5d8:	b3 ab       	std	Z+51, r27	; 0x33
     5da:	01 de       	rcall	.-1022   	; 0x1de <__trampolines_end+0x132>
     5dc:	25 65       	ori	r18, 0x55	; 85
     5de:	55 f0       	brhs	.+20     	; 0x5f4 <__FUSE_REGION_LENGTH__+0x1f4>
     5e0:	7d d3       	rcall	.+1786   	; 0xcdc <__stack+0x1dd>
     5e2:	97 2f       	mov	r25, r23
     5e4:	59 b9       	out	0x09, r21	; 9
     5e6:	d6 a1       	ldd	r29, Z+38	; 0x26
     5e8:	d6 6d       	ori	r29, 0xD6	; 214
     5ea:	a4 18       	sub	r10, r4
     5ec:	c7 15       	cp	r28, r7
     5ee:	f9 b3       	in	r31, 0x19	; 25
     5f0:	78 a2       	std	Y+32, r7	; 0x20
     5f2:	62 0e       	add	r6, r18
     5f4:	0a 1f       	adc	r16, r26
     5f6:	cd ad       	ldd	r28, Y+61	; 0x3d
     5f8:	37 b4       	in	r3, 0x27	; 39
     5fa:	28 a2       	std	Y+32, r2	; 0x20
     5fc:	18 a3       	std	Y+32, r17	; 0x20
     5fe:	46 10       	cpse	r4, r6
     600:	93 d1       	rcall	.+806    	; 0x928 <__FUSE_REGION_LENGTH__+0x528>
     602:	18 33       	cpi	r17, 0x38	; 56
     604:	47 88       	ldd	r4, Z+23	; 0x17
     606:	be 17       	cp	r27, r30
     608:	ee 21       	and	r30, r14
     60a:	10 47       	sbci	r17, 0x70	; 112
     60c:	15 6a       	ori	r17, 0xA5	; 165
     60e:	c0 a5       	ldd	r28, Z+40	; 0x28
     610:	1c 0c       	add	r1, r12
     612:	4d 82       	std	Y+5, r4	; 0x05
     614:	09 33       	cpi	r16, 0x39	; 57
     616:	c3 05       	cpc	r28, r3
     618:	b7 50       	subi	r27, 0x07	; 7
     61a:	84 bb       	out	0x14, r24	; 20
     61c:	36 ec       	ldi	r19, 0xC6	; 198
     61e:	fc 14       	cp	r15, r12
     620:	e9 18       	sub	r14, r9
     622:	bd 69       	ori	r27, 0x9D	; 157
     624:	f3 60       	ori	r31, 0x03	; 3
     626:	c7 52       	subi	r28, 0x27	; 39
     628:	7b f3       	brvs	.-34     	; 0x608 <__FUSE_REGION_LENGTH__+0x208>
     62a:	15 ea       	ldi	r17, 0xA5	; 165
     62c:	37 2f       	mov	r19, r23
     62e:	d3 67       	ori	r29, 0x73	; 115
     630:	04 a4       	ldd	r0, Z+44	; 0x2c
     632:	29 56       	subi	r18, 0x69	; 105
     634:	a5 e4       	ldi	r26, 0x45	; 69
     636:	5a 86       	std	Y+10, r5	; 0x0a
     638:	c1 25       	eor	r28, r1
     63a:	94 e9       	ldi	r25, 0x94	; 148
     63c:	25 eb       	ldi	r18, 0xB5	; 181
     63e:	80 b0       	in	r8, 0x00	; 0
     640:	13 d6       	rcall	.+3110   	; 0x1268 <main+0xb6>
     642:	03 e3       	ldi	r16, 0x33	; 51
     644:	e6 4d       	sbci	r30, 0xD6	; 214
     646:	55 c8       	rjmp	.-3926   	; 0xfffff6f2 <__eeprom_end+0xff7ef6f2>
     648:	d4 e0       	ldi	r29, 0x04	; 4
     64a:	e9 a8       	ldd	r14, Y+49	; 0x31
     64c:	59 94       	.word	0x9459	; ????
     64e:	c6 53       	subi	r28, 0x36	; 54
     650:	5a cc       	rjmp	.-1868   	; 0xffffff06 <__eeprom_end+0xff7eff06>
     652:	e6 cc       	rjmp	.-1588   	; 0x20 <__zero_reg__+0x1f>
     654:	ca 67       	ori	r28, 0x7A	; 122
     656:	16 7f       	andi	r17, 0xF6	; 246
     658:	6e d8       	rcall	.-3876   	; 0xfffff736 <__eeprom_end+0xff7ef736>
     65a:	29 43       	sbci	r18, 0x39	; 57
     65c:	36 c1       	rjmp	.+620    	; 0x8ca <__FUSE_REGION_LENGTH__+0x4ca>
     65e:	39 ef       	ldi	r19, 0xF9	; 249
     660:	b9 76       	andi	r27, 0x69	; 105
     662:	3a 85       	ldd	r19, Y+10	; 0x0a
     664:	81 1d       	adc	r24, r1
     666:	ee ed       	ldi	r30, 0xDE	; 222
     668:	3c a9       	ldd	r19, Y+52	; 0x34
     66a:	aa 24       	eor	r10, r10
     66c:	12 44       	sbci	r17, 0x42	; 66
     66e:	3d 5b       	subi	r19, 0xBD	; 189
     670:	04 98       	cbi	0x00, 4	; 0
     672:	8e c7       	rjmp	.+3868   	; 0x1590 <main+0x3de>
     674:	a9 ce       	rjmp	.-686    	; 0x3c8 <__trampolines_end+0x31c>
     676:	bf 08       	sbc	r11, r15
     678:	10 a1       	ldd	r17, Z+32	; 0x20
     67a:	d2 c7       	rjmp	.+4004   	; 0x1620 <main+0x46e>
     67c:	dd 23       	and	r29, r29
     67e:	98 63       	ori	r25, 0x38	; 56
     680:	d4 8a       	std	Z+20, r13	; 0x14
     682:	e0 31       	cpi	r30, 0x10	; 16
     684:	af 80       	ldd	r10, Y+7	; 0x07
     686:	00 f1       	brcs	.+64     	; 0x6c8 <__FUSE_REGION_LENGTH__+0x2c8>
     688:	01 52       	subi	r16, 0x21	; 33
     68a:	ba 54       	subi	r27, 0x4A	; 74
     68c:	9e 79       	andi	r25, 0x9E	; 158
     68e:	f1 65       	ori	r31, 0x51	; 81
     690:	76 05       	cpc	r23, r6
     692:	be fe       	.word	0xfebe	; ????
     694:	2a 81       	ldd	r18, Y+2	; 0x02
     696:	86 1e       	adc	r8, r22
     698:	bb 3d       	cpi	r27, 0xDB	; 219
     69a:	4d 91       	ld	r20, X+
     69c:	2e 76       	andi	r18, 0x6E	; 110
     69e:	2a 9f       	mul	r18, r26
     6a0:	ba eb       	ldi	r27, 0xBA	; 186
     6a2:	ac 73       	andi	r26, 0x3C	; 60
     6a4:	4c 26       	eor	r4, r28
     6a6:	16 d1       	rcall	.+556    	; 0x8d4 <__FUSE_REGION_LENGTH__+0x4d4>
     6a8:	ce 53       	subi	r28, 0x3E	; 62
     6aa:	c3 0d       	add	r28, r3
     6ac:	9d c1       	rjmp	.+826    	; 0x9e8 <__FUSE_REGION_LENGTH__+0x5e8>
     6ae:	e0 0a       	sbc	r14, r16
     6b0:	d3 c3       	rjmp	.+1958   	; 0xe58 <__stack+0x359>
     6b2:	0c ae       	std	Y+60, r0	; 0x3c
     6b4:	ca 02       	muls	r28, r26
     6b6:	d5 9f       	mul	r29, r21
     6b8:	12 e5       	ldi	r17, 0x52	; 82
     6ba:	4d 28       	or	r4, r13
     6bc:	d7 45       	sbci	r29, 0x57	; 87
     6be:	8a 2d       	mov	r24, r10
     6c0:	cb 5c       	subi	r28, 0xCB	; 203
     6c2:	05 b7       	in	r16, 0x35	; 53
     6c4:	63 4b       	sbci	r22, 0xB3	; 179
     6c6:	24 8b       	std	Z+20, r18	; 0x14
     6c8:	e2 31       	cpi	r30, 0x12	; 18
     6ca:	ad 1d       	adc	r26, r13
     6cc:	cf 66       	ori	r28, 0x6F	; 111
     6ce:	cd 7c       	andi	r28, 0xCD	; 205
     6d0:	7b 6a       	ori	r23, 0xAB	; 171
     6d2:	38 50       	subi	r19, 0x08	; 8
     6d4:	5a 6c       	ori	r21, 0xCA	; 202
     6d6:	59 29       	or	r21, r9
     6d8:	be 20       	and	r11, r14
     6da:	6c f8       	.word	0xf86c	; ????
     6dc:	1c ed       	ldi	r17, 0xDC	; 220
     6de:	67 47       	sbci	r22, 0x77	; 119
     6e0:	8e ca       	rjmp	.-2788   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
     6e2:	d7 6d       	ori	r29, 0xD7	; 215
     6e4:	10 a4       	ldd	r1, Z+40	; 0x28
     6e6:	2c ad       	ldd	r18, Y+60	; 0x3c
     6e8:	6b 7b       	andi	r22, 0xBB	; 187
     6ea:	cf dd       	rcall	.-1122   	; 0x28a <__trampolines_end+0x1de>
     6ec:	79 fb       	.word	0xfb79	; ????
     6ee:	54 b0       	in	r5, 0x04	; 4
     6f0:	40 7d       	andi	r20, 0xD0	; 208
     6f2:	cc 38       	cpi	r28, 0x8C	; 140
     6f4:	07 2e       	mov	r0, r23
     6f6:	27 55       	subi	r18, 0x57	; 87
     6f8:	14 00       	.word	0x0014	; ????
     6fa:	01 da       	rcall	.-3070   	; 0xfffffafe <__eeprom_end+0xff7efafe>
     6fc:	6a 69       	ori	r22, 0x9A	; 154
     6fe:	7a 15       	cp	r23, r10
     700:	bc 7b       	andi	r27, 0xBC	; 188
     702:	35 81       	ldd	r19, Z+5	; 0x05
     704:	86 e8       	ldi	r24, 0x86	; 134
     706:	25 9a       	sbi	0x04, 5	; 4
     708:	87 68       	ori	r24, 0x87	; 135
     70a:	f2 06       	cpc	r15, r18
     70c:	c5 09       	sbc	r28, r5
     70e:	0a 34       	cpi	r16, 0x4A	; 74
     710:	75 bf       	out	0x35, r23	; 53
     712:	ff ea       	ldi	r31, 0xAF	; 175
     714:	d5 b1       	in	r29, 0x05	; 5
     716:	5b 01       	movw	r10, r22
     718:	03 d3       	rcall	.+1542   	; 0xd20 <__stack+0x221>
     71a:	38 9e       	mul	r3, r24
     71c:	24 ee       	ldi	r18, 0xE4	; 228
     71e:	c5 83       	std	Z+5, r28	; 0x05
     720:	a0 5a       	subi	r26, 0xA0	; 160
     722:	1d 15       	cp	r17, r13
     724:	94 78       	andi	r25, 0x84	; 132
     726:	50 91 23 10 	lds	r21, 0x1023	; 0x801023 <__bss_end+0xf20>
     72a:	e1 79       	andi	r30, 0x91	; 145
     72c:	49 2f       	mov	r20, r25
     72e:	b2 25       	eor	r27, r2
     730:	97 fa       	bst	r9, 7
     732:	29 8f       	std	Y+25, r18	; 0x19
     734:	14 2a       	or	r1, r20
     736:	55 66       	ori	r21, 0x65	; 101
     738:	3a 72       	andi	r19, 0x2A	; 42
     73a:	ce 0d       	add	r28, r14
     73c:	5a c3       	rjmp	.+1716   	; 0xdf2 <__stack+0x2f3>
     73e:	87 d3       	rcall	.+1806   	; 0xe4e <__stack+0x34f>
     740:	93 41       	sbci	r25, 0x13	; 19
     742:	f8 02       	muls	r31, r24
     744:	05 27       	eor	r16, r21
     746:	d9 a4       	ldd	r13, Y+41	; 0x29
     748:	9c d7       	rcall	.+3896   	; 0x1682 <main+0x4d0>
     74a:	ee ff       	.word	0xffee	; ????
     74c:	d1 3d       	cpi	r29, 0xD1	; 209
     74e:	cb 77       	andi	r28, 0x7B	; 123
     750:	dd 9b       	sbis	0x1b, 5	; 27
     752:	37 b4       	in	r3, 0x27	; 39
     754:	29 8f       	std	Y+25, r18	; 0x19
     756:	fb e5       	ldi	r31, 0x5B	; 91
     758:	ea 18       	sub	r14, r10
     75a:	e7 39       	cpi	r30, 0x97	; 151
     75c:	a6 e3       	ldi	r26, 0x36	; 54
     75e:	84 b8       	out	0x04, r8	; 4
     760:	e8 1a       	sub	r14, r24
     762:	b8 ce       	rjmp	.-656    	; 0x4d4 <__FUSE_REGION_LENGTH__+0xd4>
     764:	38 ac       	ldd	r3, Y+56	; 0x38
     766:	cc 7d       	andi	r28, 0xDC	; 220
     768:	da 75       	andi	r29, 0x5A	; 90
     76a:	44 8b       	std	Z+20, r20	; 0x14
     76c:	33 0f       	add	r19, r19
     76e:	a7 75       	andi	r26, 0x57	; 87
     770:	82 43       	sbci	r24, 0x32	; 50
     772:	f9 a6       	std	Y+41, r15	; 0x29
     774:	eb f4       	brvc	.+58     	; 0x7b0 <__FUSE_REGION_LENGTH__+0x3b0>
     776:	13 06       	cpc	r1, r19
     778:	30 a4       	ldd	r3, Z+40	; 0x28
     77a:	ba 54       	subi	r27, 0x4A	; 74
     77c:	45 9d       	mul	r20, r5
     77e:	2c ad       	ldd	r18, Y+60	; 0x3c
     780:	d4 fa       	bst	r13, 4
     782:	05 b7       	in	r16, 0x35	; 53
     784:	4e 9d       	mul	r20, r14
     786:	c9 1a       	sub	r12, r25
     788:	27 1e       	adc	r2, r23
     78a:	a8 9c       	mul	r10, r8
     78c:	a7 8b       	std	Z+23, r26	; 0x17
     78e:	ab c2       	rjmp	.+1366   	; 0xce6 <__stack+0x1e7>
     790:	80 20       	and	r8, r0
     792:	c1 4d       	sbci	r28, 0xD1	; 209
     794:	f8 f4       	brcc	.+62     	; 0x7d4 <__FUSE_REGION_LENGTH__+0x3d4>
     796:	81 ab       	std	Z+49, r24	; 0x31
     798:	4d b2       	in	r4, 0x1d	; 29
     79a:	c2 eb       	ldi	r28, 0xB2	; 178
     79c:	a2 c2       	rjmp	.+1348   	; 0xce2 <__stack+0x1e3>
     79e:	c6 b7       	in	r28, 0x36	; 54
     7a0:	5e 87       	std	Y+14, r21	; 0x0e
     7a2:	35 42       	sbci	r19, 0x25	; 37
     7a4:	86 c3       	rjmp	.+1804   	; 0xeb2 <__stack+0x3b3>
     7a6:	80 d7       	rcall	.+3840   	; 0x16a8 <main+0x4f6>
     7a8:	a7 a8       	ldd	r10, Z+55	; 0x37
     7aa:	9f b1       	in	r25, 0x0f	; 15
     7ac:	a4 92       	xch	Z, r10
     7ae:	8b ea       	ldi	r24, 0xAB	; 171
     7b0:	cd 85       	ldd	r28, Y+13	; 0x0d
     7b2:	2b 1e       	adc	r2, r27
     7b4:	fb 0f       	add	r31, r27
     7b6:	6c 12       	cpse	r6, r28
     7b8:	3e 78       	andi	r19, 0x8E	; 142
     7ba:	94 23       	and	r25, r20
     7bc:	fb e7       	ldi	r31, 0x7B	; 123
     7be:	5d 98       	cbi	0x0b, 5	; 11
     7c0:	ca d3       	rcall	.+1940   	; 0xf56 <__stack+0x457>
     7c2:	48 4d       	sbci	r20, 0xD8	; 216
     7c4:	f2 23       	and	r31, r18
     7c6:	a8 9f       	mul	r26, r24
     7c8:	99 e8       	ldi	r25, 0x89	; 137
     7ca:	9e c0       	rjmp	.+316    	; 0x908 <__FUSE_REGION_LENGTH__+0x508>
     7cc:	19 6d       	ori	r17, 0xD9	; 217
     7ce:	fb be       	out	0x3b, r15	; 59
     7d0:	9a cc       	rjmp	.-1740   	; 0x106 <__trampolines_end+0x5a>
     7d2:	e8 1a       	sub	r14, r24
     7d4:	0f 1a       	sub	r0, r31
     7d6:	6a e9       	ldi	r22, 0x9A	; 154
     7d8:	6f ee       	ldi	r22, 0xEF	; 239
     7da:	6e da       	rcall	.-2852   	; 0xfffffcb8 <__eeprom_end+0xff7efcb8>
     7dc:	94 b9       	out	0x04, r25	; 4
     7de:	ae 85       	ldd	r26, Y+14	; 0x0e
     7e0:	7a df       	rcall	.-268    	; 0x6d6 <__FUSE_REGION_LENGTH__+0x2d6>
     7e2:	85 2f       	mov	r24, r21
     7e4:	12 3d       	cpi	r17, 0xD2	; 210
     7e6:	c7 b3       	in	r28, 0x17	; 23
     7e8:	7e ce       	rjmp	.-772    	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
     7ea:	40 91 90 07 	lds	r20, 0x0790	; 0x800790 <__bss_end+0x68d>
     7ee:	db 65       	ori	r29, 0x5B	; 91
     7f0:	e8 ea       	ldi	r30, 0xA8	; 168
     7f2:	93 e9       	ldi	r25, 0x93	; 147
     7f4:	84 09       	sbc	r24, r4
     7f6:	25 a9       	ldd	r18, Z+53	; 0x35
     7f8:	d1 81       	ldd	r29, Z+1	; 0x01
     7fa:	68 e3       	ldi	r22, 0x38	; 56
     7fc:	d0 0d       	add	r29, r0
     7fe:	1a 7b       	andi	r17, 0xBA	; 186
     800:	96 eb       	ldi	r25, 0xB6	; 182
     802:	22 2c       	mov	r2, r2
     804:	be f5       	brtc	.+110    	; 0x874 <__FUSE_REGION_LENGTH__+0x474>
     806:	69 54       	subi	r22, 0x49	; 73
     808:	72 23       	and	r23, r18
     80a:	47 6c       	ori	r20, 0xC7	; 199
     80c:	72 78       	andi	r23, 0x82	; 130
     80e:	fd bb       	out	0x1d, r31	; 29
     810:	93 82       	std	Z+3, r9	; 0x03
     812:	e4 32       	cpi	r30, 0x24	; 36
     814:	98 34       	cpi	r25, 0x48	; 72
     816:	a5 f1       	brhs	.+104    	; 0x880 <__FUSE_REGION_LENGTH__+0x480>
     818:	fb b9       	out	0x0b, r31	; 11
     81a:	e9 92       	st	Y+, r14
     81c:	b1 f9       	bld	r27, 1
     81e:	14 ad       	ldd	r17, Z+60	; 0x3c
     820:	7a 11       	cpse	r23, r10
     822:	86 2b       	or	r24, r22
     824:	2c 18       	sub	r2, r12
     826:	ad 3e       	cpi	r26, 0xED	; 237
     828:	00 7d       	andi	r16, 0xD0	; 208
     82a:	32 c3       	rjmp	.+1636   	; 0xe90 <__stack+0x391>
     82c:	bd c8       	rjmp	.-3718   	; 0xfffff9a8 <__eeprom_end+0xff7ef9a8>
     82e:	cc d4       	rcall	.+2456   	; 0x11c8 <main+0x16>
     830:	ba 64       	ori	r27, 0x4A	; 74
     832:	67 31       	cpi	r22, 0x17	; 23
     834:	b9 02       	muls	r27, r25
     836:	d8 b9       	out	0x08, r29	; 8
     838:	b5 19       	sub	r27, r5
     83a:	85 8c       	ldd	r8, Z+29	; 0x1d
     83c:	c2 32       	cpi	r28, 0x22	; 34
     83e:	ce 97       	sbiw	r24, 0x3e	; 62
     840:	46 6a       	ori	r20, 0xA6	; 166
     842:	9c b9       	out	0x0c, r25	; 12
     844:	d5 70       	andi	r29, 0x05	; 5
     846:	46 a0       	ldd	r4, Z+38	; 0x26
     848:	39 ea       	ldi	r19, 0xA9	; 169
     84a:	66 65       	ori	r22, 0x56	; 86
     84c:	ea ad       	ldd	r30, Y+58	; 0x3a
     84e:	04 bf       	out	0x34, r16	; 52
     850:	9d dd       	rcall	.-1222   	; 0x38c <__trampolines_end+0x2e0>
     852:	7b 7e       	andi	r23, 0xEB	; 235
     854:	e1 34       	cpi	r30, 0x41	; 65
     856:	6b 33       	cpi	r22, 0x3B	; 59
     858:	2d 78       	andi	r18, 0x8D	; 141
     85a:	c2 cd       	rjmp	.-1148   	; 0x3e0 <__trampolines_end+0x334>
     85c:	9f 61       	ori	r25, 0x1F	; 31
     85e:	ea f4       	brpl	.+58     	; 0x89a <__FUSE_REGION_LENGTH__+0x49a>
     860:	3a fc       	.word	0xfc3a	; ????
     862:	eb be       	out	0x3b, r14	; 59
     864:	7a b5       	in	r23, 0x2a	; 42
     866:	74 ba       	out	0x14, r7	; 20
     868:	67 ae       	std	Z+63, r6	; 0x3f
     86a:	79 d6       	rcall	.+3314   	; 0x155e <main+0x3ac>
     86c:	8e 32       	cpi	r24, 0x2E	; 46
     86e:	38 73       	andi	r19, 0x38	; 56
     870:	04 c0       	rjmp	.+8      	; 0x87a <__FUSE_REGION_LENGTH__+0x47a>
     872:	09 4b       	sbci	r16, 0xB9	; 185
     874:	47 2f       	mov	r20, r23
     876:	33 ae       	std	Z+59, r3	; 0x3b
     878:	4d b9       	out	0x0d, r20	; 13
     87a:	14 f4       	brge	.+4      	; 0x880 <__FUSE_REGION_LENGTH__+0x480>
     87c:	ea 81       	ldd	r30, Y+2	; 0x02
     87e:	06 8d       	ldd	r16, Z+30	; 0x1e
     880:	0a 37       	cpi	r16, 0x7A	; 122
     882:	1b b2       	in	r1, 0x1b	; 27
     884:	fe 4e       	sbci	r31, 0xEE	; 238
     886:	3e 7b       	andi	r19, 0xBE	; 190
     888:	7a 2e       	mov	r7, r26
     88a:	41 cd       	rjmp	.-1406   	; 0x30e <__trampolines_end+0x262>
     88c:	57 35       	cpi	r21, 0x57	; 87
     88e:	96 6e       	ori	r25, 0xE6	; 230
     890:	e1 9f       	mul	r30, r17
     892:	f4 84       	ldd	r15, Z+12	; 0x0c
     894:	93 17       	cp	r25, r19
     896:	3a 18       	sub	r3, r10
     898:	88 45       	sbci	r24, 0x58	; 88
     89a:	94 25       	eor	r25, r4
     89c:	23 8c       	ldd	r2, Z+27	; 0x1b
     89e:	6a d0       	rcall	.+212    	; 0x974 <__FUSE_REGION_LENGTH__+0x574>
     8a0:	49 85       	ldd	r20, Y+9	; 0x09
     8a2:	38 a2       	std	Y+32, r3	; 0x20
     8a4:	ce ab       	std	Y+54, r28	; 0x36
     8a6:	f9 b3       	in	r31, 0x19	; 25
     8a8:	fa 38       	cpi	r31, 0x8A	; 138
     8aa:	66 33       	cpi	r22, 0x36	; 54
     8ac:	c1 58       	subi	r28, 0x81	; 129
     8ae:	63 1a       	sub	r6, r19
     8b0:	e8 1c       	adc	r14, r8
     8b2:	93 f3       	brvs	.-28     	; 0x898 <__FUSE_REGION_LENGTH__+0x498>
     8b4:	76 38       	cpi	r23, 0x86	; 134
     8b6:	9f 02       	muls	r25, r31
     8b8:	82 15       	cp	r24, r2
     8ba:	35 81       	ldd	r19, Z+5	; 0x05
     8bc:	23 74       	andi	r18, 0x43	; 67
     8be:	2e e7       	ldi	r18, 0x7E	; 126
     8c0:	59 01       	movw	r10, r18
     8c2:	72 a5       	ldd	r23, Z+42	; 0x2a
     8c4:	d9 38       	cpi	r29, 0x89	; 137
     8c6:	ec c4       	rjmp	.+2520   	; 0x12a0 <main+0xee>
     8c8:	ae 76       	andi	r26, 0x6E	; 110
     8ca:	fb a2       	std	Y+35, r15	; 0x23
     8cc:	a6 eb       	ldi	r26, 0xB6	; 182
     8ce:	2d 5e       	subi	r18, 0xED	; 237
     8d0:	6c f2       	brlt	.-102    	; 0x86c <__FUSE_REGION_LENGTH__+0x46c>
     8d2:	a3 b7       	in	r26, 0x33	; 51
     8d4:	83 c5       	rjmp	.+2822   	; 0x13dc <main+0x22a>
     8d6:	29 72       	andi	r18, 0x29	; 41
     8d8:	16 70       	andi	r17, 0x06	; 6
     8da:	9e 66       	ori	r25, 0x6E	; 110
     8dc:	fa e9       	ldi	r31, 0x9A	; 154
     8de:	bd 8c       	ldd	r11, Y+29	; 0x1d
     8e0:	49 84       	ldd	r4, Y+9	; 0x09
     8e2:	80 22       	and	r8, r16
     8e4:	c2 5e       	subi	r28, 0xE2	; 226
     8e6:	d9 c7       	rjmp	.+4018   	; 0x189a <main+0x6e8>
     8e8:	83 da       	rcall	.-2810   	; 0xfffffdf0 <__eeprom_end+0xff7efdf0>
     8ea:	3e 9b       	sbis	0x07, 6	; 7
     8ec:	2b 37       	cpi	r18, 0x7B	; 123
     8ee:	5f 1e       	adc	r5, r31
     8f0:	da 6d       	ori	r29, 0xDA	; 218
     8f2:	80 63       	ori	r24, 0x30	; 48
     8f4:	2a a8       	ldd	r2, Y+50	; 0x32
     8f6:	73 c6       	rjmp	.+3302   	; 0x15de <main+0x42c>
     8f8:	6b b4       	in	r6, 0x2b	; 43
     8fa:	d5 b6       	in	r13, 0x35	; 53
     8fc:	39 0b       	sbc	r19, r25
     8fe:	fd 74       	andi	r31, 0x4D	; 77
     900:	2d 00       	.word	0x002d	; ????
     902:	c2 7c       	andi	r28, 0xC2	; 194
     904:	1b 91       	.word	0x911b	; ????
     906:	f8 43       	sbci	r31, 0x38	; 56
     908:	3d 5a       	subi	r19, 0xAD	; 173
     90a:	b2 37       	cpi	r27, 0x72	; 114
     90c:	6d 3f       	cpi	r22, 0xFD	; 253
     90e:	60 c1       	rjmp	.+704    	; 0xbd0 <__stack+0xd1>
     910:	65 a8       	ldd	r6, Z+53	; 0x35
     912:	e7 94       	ror	r14
     914:	af 56       	subi	r26, 0x6F	; 111
     916:	7d 19       	sub	r23, r13
     918:	79 10       	cpse	r7, r9
     91a:	a2 a7       	std	Z+42, r26	; 0x2a
     91c:	e9 15       	cp	r30, r9
     91e:	36 4c       	sbci	r19, 0xC6	; 198
     920:	0c 5e       	subi	r16, 0xEC	; 236
     922:	3d cb       	rjmp	.-2438   	; 0xffffff9e <__eeprom_end+0xff7eff9e>
     924:	39 ba       	out	0x19, r3	; 25
     926:	5a fe       	.word	0xfe5a	; ????
     928:	db 6d       	ori	r29, 0xDB	; 219
     92a:	aa c2       	rjmp	.+1364   	; 0xe80 <__stack+0x381>
     92c:	0c 1b       	sub	r16, r28
     92e:	70 3a       	cpi	r23, 0xA0	; 160
     930:	73 21       	and	r23, r3
     932:	af 8c       	ldd	r10, Y+31	; 0x1f
     934:	2e 7c       	andi	r18, 0xCE	; 206
     936:	6c bf       	out	0x3c, r22	; 60
     938:	19 69       	ori	r17, 0x99	; 153
     93a:	b1 80       	ldd	r11, Z+1	; 0x01
     93c:	bf d4       	rcall	.+2430   	; 0x12bc <main+0x10a>
     93e:	75 bd       	out	0x25, r23	; 37
     940:	a0 92 c2 76 	sts	0x76C2, r10	; 0x8076c2 <__bss_end+0x75bf>
     944:	89 27       	eor	r24, r25
     946:	0c 1d       	adc	r16, r12
     948:	e0 c1       	rjmp	.+960    	; 0xd0a <__stack+0x20b>
     94a:	16 9b       	sbis	0x02, 6	; 2
     94c:	2e 3d       	cpi	r18, 0xDE	; 222
     94e:	af e0       	ldi	r26, 0x0F	; 15
     950:	6f 58       	subi	r22, 0x8F	; 143
     952:	6a f2       	brmi	.-102    	; 0x8ee <__FUSE_REGION_LENGTH__+0x4ee>
     954:	25 ba       	out	0x15, r2	; 21
     956:	84 a5       	ldd	r24, Z+44	; 0x2c
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	17 12       	cpse	r1, r23
     95c:	d2 27       	eor	r29, r18
     95e:	de e8       	ldi	r29, 0x8E	; 142
     960:	d4 cf       	rjmp	.-88     	; 0x90a <__FUSE_REGION_LENGTH__+0x50a>
     962:	8a b3       	in	r24, 0x1a	; 26
     964:	86 dc       	rcall	.-1780   	; 0x272 <__trampolines_end+0x1c6>
     966:	43 5a       	subi	r20, 0xA3	; 163
     968:	59 e3       	ldi	r21, 0x39	; 57
     96a:	c6 ed       	ldi	r28, 0xD6	; 214
     96c:	d1 34       	cpi	r29, 0x41	; 65
     96e:	1a c0       	rjmp	.+52     	; 0x9a4 <__FUSE_REGION_LENGTH__+0x5a4>
     970:	a4 1e       	adc	r10, r20
     972:	2e b9       	out	0x0e, r18	; 14
     974:	5a b6       	in	r5, 0x3a	; 58
     976:	2c da       	rcall	.-2984   	; 0xfffffdd0 <__eeprom_end+0xff7efdd0>
     978:	fb 60       	ori	r31, 0x0B	; 11
     97a:	93 d2       	rcall	.+1318   	; 0xea2 <__stack+0x3a3>
     97c:	a1 f5       	brne	.+104    	; 0x9e6 <__FUSE_REGION_LENGTH__+0x5e6>
     97e:	99 36       	cpi	r25, 0x69	; 105
     980:	69 8e       	std	Y+25, r6	; 0x19
     982:	ae 6d       	ori	r26, 0xDE	; 222
     984:	94 10       	cpse	r9, r4
     986:	fd 6b       	ori	r31, 0xBD	; 189
     988:	81 03       	fmuls	r16, r17
     98a:	f9 a0       	ldd	r15, Y+33	; 0x21
     98c:	b6 6c       	ori	r27, 0xC6	; 198
     98e:	36 1a       	sub	r3, r22
     990:	31 b5       	in	r19, 0x21	; 33
     992:	37 94       	ror	r3
     994:	54 4f       	sbci	r21, 0xF4	; 244
     996:	d9 68       	ori	r29, 0x89	; 137
     998:	d0 0f       	add	r29, r16
     99a:	99 82       	std	Y+1, r9	; 0x01
     99c:	22 46       	sbci	r18, 0x62	; 98
     99e:	49 c4       	rjmp	.+2194   	; 0x1232 <main+0x80>
     9a0:	a9 b9       	out	0x09, r26	; 9
     9a2:	3d 29       	or	r19, r13
     9a4:	e0 e7       	ldi	r30, 0x70	; 112
     9a6:	1e 17       	cp	r17, r30
     9a8:	2e db       	rcall	.-2468   	; 0x6 <__zero_reg__+0x5>
     9aa:	2f bd       	out	0x2f, r18	; 47
     9ac:	be c3       	rjmp	.+1916   	; 0x112a <mouse_hid_report_desc+0xf>
     9ae:	15 7f       	andi	r17, 0xF5	; 245
     9b0:	de dd       	rcall	.-1092   	; 0x56e <__FUSE_REGION_LENGTH__+0x16e>
     9b2:	3f 16       	cp	r3, r31
     9b4:	f6 cc       	rjmp	.-1556   	; 0x3a2 <__trampolines_end+0x2f6>
     9b6:	0c 6f       	ori	r16, 0xFC	; 252
     9b8:	4f 83       	std	Y+7, r20	; 0x07
     9ba:	a1 9b       	sbis	0x14, 1	; 20
     9bc:	64 11       	cpse	r22, r4
     9be:	3f 44       	sbci	r19, 0x4F	; 79
     9c0:	75 1f       	adc	r23, r21
     9c2:	82 75       	andi	r24, 0x52	; 82
     9c4:	1f d1       	rcall	.+574    	; 0xc04 <__stack+0x105>
     9c6:	1c bf       	out	0x3c, r17	; 60
     9c8:	a4 0b       	sbc	r26, r20
     9ca:	85 b0       	in	r8, 0x05	; 5
     9cc:	ae cf       	rjmp	.-164    	; 0x92a <__FUSE_REGION_LENGTH__+0x52a>
     9ce:	04 41       	sbci	r16, 0x14	; 20
     9d0:	71 00       	.word	0x0071	; ????
     9d2:	dd 6b       	ori	r29, 0xBD	; 189
     9d4:	15 9b       	sbis	0x02, 5	; 2
     9d6:	0e 34       	cpi	r16, 0x4E	; 78
     9d8:	0e b9       	out	0x0e, r16	; 14
     9da:	19 d8       	rcall	.-4046   	; 0xfffffa0e <__eeprom_end+0xff7efa0e>
     9dc:	d2 fb       	bst	r29, 2
     9de:	9c 6e       	ori	r25, 0xEC	; 236
     9e0:	16 4c       	sbci	r17, 0xC6	; 198
     9e2:	22 a4       	ldd	r2, Z+42	; 0x2a
     9e4:	7c 75       	andi	r23, 0x5C	; 92
     9e6:	b2 4c       	sbci	r27, 0xC2	; 194
     9e8:	9f fa       	.word	0xfa9f	; ????
     9ea:	9f b5       	in	r25, 0x2f	; 47
     9ec:	29 2c       	mov	r2, r9
     9ee:	12 51       	subi	r17, 0x12	; 18
     9f0:	28 30       	cpi	r18, 0x08	; 8
     9f2:	fb d6       	rcall	.+3574   	; 0x17ea <main+0x638>
     9f4:	98 46       	sbci	r25, 0x68	; 104
     9f6:	35 5b       	subi	r19, 0xB5	; 181
     9f8:	72 9f       	mul	r23, r18
     9fa:	11 16       	cp	r1, r17
     9fc:	77 c2       	rjmp	.+1262   	; 0xeec <__stack+0x3ed>
     9fe:	72 9f       	mul	r23, r18
     a00:	13 37       	cpi	r17, 0x73	; 115
     a02:	35 44       	sbci	r19, 0x45	; 69
     a04:	8e 3d       	cpi	r24, 0xDE	; 222
     a06:	fe ba       	out	0x1e, r15	; 30
     a08:	15 69       	ori	r17, 0x95	; 149
     a0a:	13 07       	cpc	r17, r19
     a0c:	2e 5d       	subi	r18, 0xDE	; 222
     a0e:	29 73       	andi	r18, 0x39	; 57
     a10:	41 e1       	ldi	r20, 0x11	; 17
     a12:	80 87       	std	Z+8, r24	; 0x08
     a14:	cf bf       	out	0x3f, r28	; 63
     a16:	1c 7d       	andi	r17, 0xDC	; 220
     a18:	9a 94       	dec	r9
     a1a:	81 7e       	andi	r24, 0xE1	; 225
     a1c:	3c ba       	out	0x1c, r3	; 28
     a1e:	8e 5b       	subi	r24, 0xBE	; 190
     a20:	7a 74       	andi	r23, 0x4A	; 74
     a22:	bc 7c       	andi	r27, 0xCC	; 204
     a24:	8f 1e       	adc	r8, r31
     a26:	93 50       	subi	r25, 0x03	; 3
     a28:	e7 1e       	adc	r14, r23
     a2a:	28 01       	movw	r4, r16
     a2c:	a3 77       	andi	r26, 0x73	; 115
     a2e:	1b 63       	ori	r17, 0x3B	; 59
     a30:	6f 1e       	adc	r6, r31
     a32:	fb ba       	out	0x1b, r15	; 27
     a34:	3a 34       	cpi	r19, 0x4A	; 74
     a36:	e3 2e       	mov	r14, r19
     a38:	e8 5c       	subi	r30, 0xC8	; 200
     a3a:	79 42       	sbci	r23, 0x29	; 41
     a3c:	5e bf       	out	0x3e, r21	; 62
     a3e:	ec bf       	out	0x3c, r30	; 60
     a40:	a4 48       	sbci	r26, 0x84	; 132
     a42:	1b 7b       	andi	r17, 0xBB	; 187
     a44:	37 2a       	or	r3, r23
     a46:	de be       	out	0x3e, r13	; 62
     a48:	5d 31       	cpi	r21, 0x1D	; 29
     a4a:	3b cc       	rjmp	.-1930   	; 0x2c2 <__trampolines_end+0x216>
     a4c:	59 02       	muls	r21, r25
     a4e:	3e ae       	std	Y+62, r3	; 0x3e
     a50:	8f 1e       	adc	r8, r31
     a52:	a9 86       	std	Y+9, r10	; 0x09
     a54:	b8 1d       	adc	r27, r8
     a56:	fb 46       	sbci	r31, 0x6B	; 107
     a58:	a7 fc       	sbrc	r10, 7
     a5a:	0a 35       	cpi	r16, 0x5A	; 90
     a5c:	c4 89       	ldd	r28, Z+20	; 0x14
     a5e:	58 c0       	rjmp	.+176    	; 0xb10 <__stack+0x11>
     a60:	62 52       	subi	r22, 0x22	; 34
     a62:	7f df       	rcall	.-258    	; 0x962 <__FUSE_REGION_LENGTH__+0x562>
     a64:	09 54       	subi	r16, 0x49	; 73
     a66:	ef a5       	ldd	r30, Y+47	; 0x2f
     a68:	b9 80       	ldd	r11, Y+1	; 0x01
     a6a:	00 74       	andi	r16, 0x40	; 64
     a6c:	a8 c7       	rjmp	.+3920   	; 0x19be <usb_init+0x2c>
     a6e:	45 19       	sub	r20, r5
     a70:	c0 a1       	ldd	r28, Z+32	; 0x20
     a72:	cd 0f       	add	r28, r29
     a74:	39 29       	or	r19, r9
     a76:	64 50       	subi	r22, 0x04	; 4
     a78:	99 f3       	breq	.-26     	; 0xa60 <__FUSE_REGION_LENGTH__+0x660>
     a7a:	a6 b9       	out	0x06, r26	; 6
     a7c:	30 f6       	brcc	.-116    	; 0xa0a <__FUSE_REGION_LENGTH__+0x60a>
     a7e:	56 1a       	sub	r5, r22
     a80:	f4 63       	ori	r31, 0x34	; 52
     a82:	db 01       	movw	r26, r22
     a84:	b9 a7       	std	Y+41, r27	; 0x29
     a86:	4e eb       	ldi	r20, 0xBE	; 190
     a88:	90 97       	sbiw	r26, 0x20	; 32
     a8a:	94 7f       	andi	r25, 0xF4	; 244
     a8c:	be c8       	rjmp	.-3716   	; 0xfffffc0a <__eeprom_end+0xff7efc0a>
     a8e:	d0 17       	cp	r29, r16
     a90:	f4 5c       	subi	r31, 0xC4	; 196
     a92:	99 b8       	out	0x09, r9	; 9
     a94:	0e 9d       	mul	r16, r14
     a96:	aa db       	rcall	.-2220   	; 0x1ec <__trampolines_end+0x140>
     a98:	5d 8b       	std	Y+21, r21	; 0x15
     a9a:	35 f5       	brhc	.+76     	; 0xae8 <__FUSE_REGION_LENGTH__+0x6e8>
     a9c:	1e ee       	ldi	r17, 0xEE	; 238
     a9e:	63 10       	cpse	r6, r3
     aa0:	c5 a2       	std	Z+37, r12	; 0x25
     aa2:	53 3f       	cpi	r21, 0xF3	; 243
     aa4:	67 dc       	rcall	.-1842   	; 0x374 <__trampolines_end+0x2c8>
     aa6:	01 f9       	bld	r16, 1
     aa8:	76 e9       	ldi	r23, 0x96	; 150
     aaa:	39 54       	subi	r19, 0x49	; 73
     aac:	3e ce       	rjmp	.-900    	; 0x72a <__FUSE_REGION_LENGTH__+0x32a>
     aae:	8c 57       	subi	r24, 0x7C	; 124
     ab0:	31 41       	sbci	r19, 0x11	; 17
     ab2:	c6 39       	cpi	r28, 0x96	; 150
     ab4:	ad 6e       	ori	r26, 0xED	; 237
     ab6:	e8 11       	cpse	r30, r8
     ab8:	9b e0       	ldi	r25, 0x0B	; 11
     aba:	1c e7       	ldi	r17, 0x7C	; 124
     abc:	0a 47       	sbci	r16, 0x7A	; 122
     abe:	3f 05       	cpc	r19, r15
     ac0:	6d 5c       	subi	r22, 0xCD	; 205
     ac2:	43 e4       	ldi	r20, 0x43	; 67
     ac4:	50 99       	sbic	0x0a, 0	; 10
     ac6:	07 9d       	mul	r16, r7
     ac8:	bd b8       	out	0x0d, r11	; 13
     aca:	c3 e3       	ldi	r28, 0x33	; 51
     acc:	e1 7c       	andi	r30, 0xC1	; 193
     ace:	38 d1       	rcall	.+624    	; 0xd40 <__stack+0x241>
     ad0:	76 33       	cpi	r23, 0x36	; 54
     ad2:	52 50       	subi	r21, 0x02	; 2
     ad4:	61 5a       	subi	r22, 0xA1	; 161
     ad6:	8c fb       	.word	0xfb8c	; ????
     ad8:	c8 75       	andi	r28, 0x58	; 88
     ada:	b9 c3       	rjmp	.+1906   	; 0x124e <main+0x9c>
     adc:	fd 7c       	andi	r31, 0xCD	; 205
     ade:	5f 64       	ori	r21, 0x4F	; 79
     ae0:	8b 8e       	std	Y+27, r8	; 0x1b
     ae2:	07 38       	cpi	r16, 0x87	; 135
     ae4:	13 d7       	rcall	.+3622   	; 0x190c <main+0x75a>
     ae6:	8e c3       	rjmp	.+1820   	; 0x1204 <main+0x52>
     ae8:	56 de       	rcall	.-852    	; 0x796 <__FUSE_REGION_LENGTH__+0x396>
     aea:	bc 0c       	add	r11, r12
     aec:	59 47       	sbci	r21, 0x79	; 121
     aee:	d6 1d       	adc	r29, r6
     af0:	cc 32       	cpi	r28, 0x2C	; 44
     af2:	25 fd       	sbrc	r18, 5
     af4:	38 62       	ori	r19, 0x28	; 40
     af6:	e3 1a       	sub	r14, r19
     af8:	e0 4e       	sbci	r30, 0xE0	; 224
     afa:	5f 1e       	adc	r5, r31
     afc:	fc f3       	brlt	.-2      	; 0xafc <__FUSE_REGION_LENGTH__+0x6fc>
     afe:	b7 76       	andi	r27, 0x67	; 103
     b00:	59 2c       	mov	r5, r9
     b02:	16 63       	ori	r17, 0x36	; 54
     b04:	40 bb       	out	0x10, r20	; 16
     b06:	71 25       	eor	r23, r1
     b08:	1d 0f       	add	r17, r29
     b0a:	c0 82       	st	Z, r12
     b0c:	22 a2       	std	Z+34, r2	; 0x22
     b0e:	ff bd       	out	0x2f, r31	; 47
     b10:	29 47       	sbci	r18, 0x79	; 121
     b12:	7d a2       	std	Y+37, r7	; 0x25
     b14:	56 8d       	ldd	r21, Z+30	; 0x1e
     b16:	a1 6d       	ori	r26, 0xD1	; 209
     b18:	ae 07       	cpc	r26, r30
     b1a:	22 32       	cpi	r18, 0x22	; 34
     b1c:	1f 13       	cpse	r17, r31
     b1e:	16 77       	andi	r17, 0x76	; 118
     b20:	c0 82       	st	Z, r12
     b22:	9c 1e       	adc	r9, r28
     b24:	16 57       	subi	r17, 0x76	; 118
     b26:	85 17       	cp	r24, r21
     b28:	75 a3       	std	Z+37, r23	; 0x25
     b2a:	4c b9       	out	0x0c, r20	; 12
     b2c:	fc af       	std	Y+60, r31	; 0x3c
     b2e:	e3 da       	rcall	.-2618   	; 0xf6 <__trampolines_end+0x4a>
     b30:	e3 8c       	ldd	r14, Z+27	; 0x1b
     b32:	8c 39       	cpi	r24, 0x9C	; 156
     b34:	de ed       	ldi	r29, 0xDE	; 222
     b36:	ec 5c       	subi	r30, 0xCC	; 204
     b38:	e4 8c       	ldd	r14, Z+28	; 0x1c
     b3a:	e6 06       	cpc	r14, r22
     b3c:	76 0e       	add	r7, r22
     b3e:	1c 95 58 b7 	jmp	0x456eb0	; 0x456eb0 <__TEXT_REGION_LENGTH__+0x436eb0>
     b42:	a4 52       	subi	r26, 0x24	; 36
     b44:	46 b0       	in	r4, 0x06	; 6
     b46:	2f 5e       	subi	r18, 0xEF	; 239
     b48:	30 36       	cpi	r19, 0x60	; 96
     b4a:	28 5b       	subi	r18, 0xB8	; 184
     b4c:	77 ee       	ldi	r23, 0xE7	; 231
     b4e:	78 b9       	out	0x08, r23	; 8
     b50:	74 68       	ori	r23, 0x84	; 132
     b52:	15 41       	sbci	r17, 0x15	; 21
     b54:	e2 63       	ori	r30, 0x32	; 50
     b56:	8e 9e       	mul	r8, r30
     b58:	bb f0       	brvs	.+46     	; 0xb88 <__stack+0x89>
     b5a:	63 02       	muls	r22, r19
     b5c:	74 a8       	ldd	r7, Z+52	; 0x34
     b5e:	be 08       	sbc	r11, r14
     b60:	c2 a5       	ldd	r28, Z+42	; 0x2a
     b62:	c3 0f       	add	r28, r19
     b64:	93 b9       	out	0x03, r25	; 3
     b66:	e2 60       	ori	r30, 0x02	; 2
     b68:	1e 31       	cpi	r17, 0x1E	; 30
     b6a:	ad 99       	sbic	0x15, 5	; 21
     b6c:	d7 e6       	ldi	r29, 0x67	; 103
     b6e:	eb 96       	adiw	r28, 0x3b	; 59
     b70:	b7 2f       	mov	r27, r23
     b72:	7f 77       	andi	r23, 0x7F	; 127
     b74:	b7 d3       	rcall	.+1902   	; 0x12e4 <main+0x132>
     b76:	2b 77       	andi	r18, 0x7B	; 123
     b78:	47 15       	cp	r20, r7
     b7a:	dd 34       	cpi	r29, 0x4D	; 77
     b7c:	cd 98       	cbi	0x19, 5	; 25
     b7e:	11 a8       	ldd	r1, Z+49	; 0x31
     b80:	4f b9       	out	0x0f, r20	; 15
     b82:	29 91       	ld	r18, Y+
     b84:	a5 26       	eor	r10, r21
     b86:	77 cf       	rjmp	.-274    	; 0xa76 <__FUSE_REGION_LENGTH__+0x676>
     b88:	f5 a5       	ldd	r31, Z+45	; 0x2d
     b8a:	99 f2       	breq	.-90     	; 0xb32 <__stack+0x33>
     b8c:	4c e0       	ldi	r20, 0x0C	; 12
     b8e:	12 e4       	ldi	r17, 0x42	; 66
     b90:	40 ea       	ldi	r20, 0xA0	; 160
     b92:	73 1d       	adc	r23, r3
     b94:	fa 7a       	andi	r31, 0xAA	; 170
     b96:	92 64       	ori	r25, 0x42	; 66
     b98:	9e 1d       	adc	r25, r14
     b9a:	b4 3f       	cpi	r27, 0xF4	; 244
     b9c:	19 69       	ori	r17, 0x99	; 153
     b9e:	b3 64       	ori	r27, 0x43	; 67
     ba0:	12 75       	andi	r17, 0x52	; 82
     ba2:	21 50       	subi	r18, 0x01	; 1
     ba4:	80 01       	movw	r16, r0
     ba6:	bc 2a       	or	r11, r28
     ba8:	51 d5       	rcall	.+2722   	; 0x164c <main+0x49a>
     baa:	8c 38       	cpi	r24, 0x8C	; 140
     bac:	87 cc       	rjmp	.-1778   	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
     bae:	ff dd       	rcall	.-1026   	; 0x7ae <__FUSE_REGION_LENGTH__+0x3ae>
     bb0:	f9 e1       	ldi	r31, 0x19	; 25
     bb2:	e2 8a       	std	Z+18, r14	; 0x12
     bb4:	d1 89       	ldd	r29, Z+17	; 0x11
     bb6:	41 c0       	rjmp	.+130    	; 0xc3a <__stack+0x13b>
     bb8:	51 f8       	bld	r5, 1
     bba:	7c f4       	brge	.+30     	; 0xbda <__stack+0xdb>
     bbc:	77 6b       	ori	r23, 0xB7	; 183
     bbe:	eb 71       	andi	r30, 0x1B	; 27
     bc0:	80 1a       	sub	r8, r16
     bc2:	0c 69       	ori	r16, 0x9C	; 156
     bc4:	c5 aa       	std	Z+53, r12	; 0x35
     bc6:	e3 25       	eor	r30, r3
     bc8:	5c 84       	ldd	r5, Y+12	; 0x0c
     bca:	94 6a       	ori	r25, 0xA4	; 164
     bcc:	e4 67       	ori	r30, 0x74	; 116
     bce:	6a 18       	sub	r6, r10
     bd0:	8e b8       	out	0x0e, r8	; 14
     bd2:	8d 80       	ldd	r8, Y+5	; 0x05
     bd4:	ab 2c       	mov	r10, r11
     bd6:	f2 e6       	ldi	r31, 0x62	; 98
     bd8:	63 c9       	rjmp	.-3386   	; 0xfffffea0 <__eeprom_end+0xff7efea0>
     bda:	54 2a       	or	r5, r20
     bdc:	d6 2e       	mov	r13, r22
     bde:	bf dd       	rcall	.-1154   	; 0x75e <__FUSE_REGION_LENGTH__+0x35e>
     be0:	19 b0       	in	r1, 0x09	; 9
     be2:	e2 27       	eor	r30, r18
     be4:	ad b9       	out	0x0d, r26	; 13
     be6:	f0 43       	sbci	r31, 0x30	; 48
     be8:	e5 29       	or	r30, r5
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	42 e7       	ldi	r20, 0x72	; 114
     bee:	2d d8       	rcall	.-4006   	; 0xfffffc4a <__eeprom_end+0xff7efc4a>
     bf0:	32 e6       	ldi	r19, 0x62	; 98
     bf2:	4e 1e       	adc	r4, r30
     bf4:	be df       	rcall	.-132    	; 0xb72 <__stack+0x73>
     bf6:	1d 99       	sbic	0x03, 5	; 3
     bf8:	b0 c3       	rjmp	.+1888   	; 0x135a <main+0x1a8>
     bfa:	e5 48       	sbci	r30, 0x85	; 133
     bfc:	12 a6       	std	Z+42, r1	; 0x2a
     bfe:	ce 1e       	adc	r12, r30
     c00:	be df       	rcall	.-132    	; 0xb7e <__stack+0x7f>
     c02:	3c fa       	.word	0xfa3c	; ????
     c04:	57 0d       	add	r21, r7
     c06:	98 b2       	in	r9, 0x18	; 24
     c08:	c7 ed       	ldi	r28, 0xD7	; 215
     c0a:	39 f0       	breq	.+14     	; 0xc1a <__stack+0x11b>
     c0c:	62 46       	sbci	r22, 0x62	; 98
     c0e:	ef 5c       	subi	r30, 0xCF	; 207
     c10:	1b b4       	in	r1, 0x2b	; 43
     c12:	cb f5       	brvc	.+114    	; 0xc86 <__stack+0x187>
     c14:	68 33       	cpi	r22, 0x38	; 56
     c16:	c5 e9       	ldi	r28, 0x95	; 149
     c18:	50 03       	mulsu	r21, r16
     c1a:	65 48       	sbci	r22, 0x85	; 133
     c1c:	f3 45       	sbci	r31, 0x53	; 83
     c1e:	08 92       	.word	0x9208	; ????
     c20:	87 6d       	ori	r24, 0xD7	; 215
     c22:	58 13       	cpse	r21, r24
     c24:	a4 ca       	rjmp	.-2744   	; 0x16e <__trampolines_end+0xc2>
     c26:	16 ae       	std	Z+62, r1	; 0x3e
     c28:	de 3e       	cpi	r29, 0xEE	; 238
     c2a:	fe 7e       	andi	r31, 0xEE	; 238
     c2c:	5f 3c       	cpi	r21, 0xCF	; 207
     c2e:	fa 57       	subi	r31, 0x7A	; 122
     c30:	2c da       	rcall	.-2984   	; 0x8a <__SREG__+0x4b>
     c32:	17 8d       	ldd	r17, Z+31	; 0x1f
     c34:	79 70       	andi	r23, 0x09	; 9
     c36:	62 46       	sbci	r22, 0x62	; 98
     c38:	0e 9e       	mul	r0, r30
     c3a:	be fe       	.word	0xfebe	; ????
     c3c:	5f 1d       	adc	r21, r15
     c3e:	99 91       	ld	r25, Y+
     c40:	81 61       	ori	r24, 0x11	; 17
     c42:	40 e3       	ldi	r20, 0x30	; 48
     c44:	44 eb       	ldi	r20, 0xB4	; 180
     c46:	54 0b       	sbc	r21, r20
     c48:	75 49       	sbci	r23, 0x95	; 149
     c4a:	f1 41       	sbci	r31, 0x11	; 17
     c4c:	00 63       	ori	r16, 0x30	; 48
     c4e:	25 a9       	ldd	r18, Z+53	; 0x35
     c50:	b1 c1       	rjmp	.+866    	; 0xfb4 <__stack+0x4b5>
     c52:	00 82       	st	Z, r0
     c54:	86 6f       	ori	r24, 0xF6	; 246
     c56:	3d f8       	.word	0xf83d	; ????
     c58:	53 05       	cpc	r21, r3
     c5a:	88 73       	andi	r24, 0x38	; 56
     c5c:	45 08       	sbc	r4, r5
     c5e:	73 64       	ori	r23, 0x43	; 67
     c60:	4a f7       	brpl	.-46     	; 0xc34 <__stack+0x135>
     c62:	6c 5a       	subi	r22, 0xAC	; 172
     c64:	17 ac       	ldd	r1, Z+63	; 0x3f
     c66:	da 17       	cp	r29, r26
     c68:	8d 79       	andi	r24, 0x9D	; 157
     c6a:	51 20       	and	r5, r1
     c6c:	c2 e7       	ldi	r28, 0x72	; 114
     c6e:	2d d8       	rcall	.-4006   	; 0xfffffcca <__eeprom_end+0xff7efcca>
     c70:	13 a4       	ldd	r1, Z+43	; 0x2b
     c72:	ca f7       	brpl	.-14     	; 0xc66 <__stack+0x167>
     c74:	4d 18       	sub	r4, r13
     c76:	93 85       	ldd	r25, Z+11	; 0x0b
     c78:	69 31       	cpi	r22, 0x19	; 25
     c7a:	e0 23       	and	r30, r16
     c7c:	c4 0a       	sbc	r12, r20
     c7e:	77 6c       	ori	r23, 0xC7	; 199
     c80:	5a 36       	cpi	r21, 0x6A	; 106
     c82:	cf fd       	.word	0xfdcf	; ????
     c84:	59 11       	cpse	r21, r9
     c86:	81 80       	ldd	r8, Z+1	; 0x01
     c88:	82 86       	std	Z+10, r8	; 0x0a
     c8a:	8e 7f       	andi	r24, 0xFE	; 254
     c8c:	7c 5b       	subi	r23, 0xBC	; 188
     c8e:	34 ea       	ldi	r19, 0xA4	; 164
     c90:	56 2e       	mov	r5, r22
     c92:	bf fc       	.word	0xfcbf	; ????
     c94:	7a 76       	andi	r23, 0x6A	; 106
     c96:	4f fd       	.word	0xfd4f	; ????
     c98:	59 30       	cpi	r21, 0x09	; 9
     c9a:	e2 46       	sbci	r30, 0x62	; 98
     c9c:	ef 5c       	subi	r30, 0xCF	; 207
     c9e:	3a d7       	rcall	.+3700   	; 0x1b14 <__vector_11+0x10c>
     ca0:	0d 79       	andi	r16, 0x9D	; 157
     ca2:	51 20       	and	r5, r1
     ca4:	a3 a5       	ldd	r26, Z+43	; 0x2b
     ca6:	c8 f3       	brcs	.-14     	; 0xc9a <__stack+0x19b>
     ca8:	64 2b       	or	r22, r20
     caa:	b5 e8       	ldi	r27, 0x85	; 133
     cac:	52 07       	cpc	r21, r18
     cae:	8c 9a       	sbi	0x11, 4	; 17
     cb0:	97 8d       	ldd	r25, Z+31	; 0x1f
     cb2:	98 b2       	in	r9, 0x18	; 24
     cb4:	c7 0c       	add	r12, r7
     cb6:	7b 74       	andi	r23, 0x4B	; 75
     cb8:	4b f5       	brvc	.+82     	; 0xd0c <__stack+0x20d>
     cba:	68 52       	subi	r22, 0x28	; 40
     cbc:	07 6d       	ori	r16, 0xD7	; 215
     cbe:	39 f0       	breq	.+14     	; 0xcce <__stack+0x1cf>
     cc0:	62 27       	eor	r22, r18
     cc2:	ad d8       	rcall	.-3750   	; 0xfffffe1e <__eeprom_end+0xff7efe1e>
     cc4:	13 85       	ldd	r17, Z+11	; 0x0b
     cc6:	88 73       	andi	r24, 0x38	; 56
     cc8:	45 e9       	ldi	r20, 0x95	; 149
     cca:	50 03       	mulsu	r21, r16
     ccc:	84 8a       	std	Z+20, r8	; 0x14
     cce:	77 6c       	ori	r23, 0xC7	; 199
     cd0:	5a 17       	cp	r21, r26
     cd2:	8d 98       	cbi	0x11, 5	; 17
     cd4:	93 85       	ldd	r25, Z+11	; 0x0b
     cd6:	88 92       	.word	0x9288	; ????
     cd8:	a6 af       	std	Z+62, r26	; 0x3e
     cda:	dc 3a       	cpi	r29, 0xAC	; 172
     cdc:	d7 0d       	add	r29, r7
     cde:	98 b2       	in	r9, 0x18	; 24
     ce0:	e6 2f       	mov	r30, r22
     ce2:	dc 1b       	sub	r29, r28
     ce4:	b4 cb       	rjmp	.-2200   	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     ce6:	f5 68       	ori	r31, 0x85	; 133
     ce8:	52 07       	cpc	r21, r18
     cea:	6d 39       	cpi	r22, 0x9D	; 157
     cec:	d1 01       	movw	r26, r2
     cee:	80 63       	ori	r24, 0x30	; 48
     cf0:	44 eb       	ldi	r20, 0xB4	; 180
     cf2:	35 c9       	rjmp	.-3478   	; 0xffffff5e <__eeprom_end+0xff7eff5e>
     cf4:	f1 60       	ori	r31, 0x01	; 1
     cf6:	42 06       	cpc	r4, r18
     cf8:	8e 9e       	mul	r8, r30
     cfa:	be fe       	.word	0xfebe	; ????
     cfc:	7e 7e       	andi	r23, 0xEE	; 238
     cfe:	5f 1d       	adc	r21, r15
     d00:	99 b0       	in	r9, 0x09	; 9
     d02:	e2 46       	sbci	r30, 0x62	; 98
     d04:	ef 5c       	subi	r30, 0xCF	; 207
     d06:	1b 95       	.word	0x951b	; ????
     d08:	a8 d2       	rcall	.+1360   	; 0x125a <main+0xa8>
     d0a:	26 ce       	rjmp	.-948    	; 0x958 <__FUSE_REGION_LENGTH__+0x558>
     d0c:	ff 5d       	subi	r31, 0xDF	; 223
     d0e:	19 b0       	in	r1, 0x09	; 9
     d10:	e2 46       	sbci	r30, 0x62	; 98
     d12:	0e 7f       	andi	r16, 0xFE	; 254
     d14:	5d 38       	cpi	r21, 0x8D	; 141
     d16:	f2 47       	sbci	r31, 0x72	; 114
     d18:	0c 7b       	andi	r16, 0xBC	; 188
     d1a:	74 4b       	sbci	r23, 0xB4	; 180
     d1c:	f5 68       	ori	r31, 0x85	; 133
     d1e:	52 26       	eor	r5, r18
     d20:	ce ff       	.word	0xffce	; ????
     d22:	7c 7a       	andi	r23, 0xAC	; 172
     d24:	57 2c       	mov	r5, r7
     d26:	bb d5       	rcall	.+2934   	; 0x189e <main+0x6ec>
     d28:	09 90       	ld	r0, Y+
     d2a:	83 84       	ldd	r8, Z+11	; 0x0b
     d2c:	6b 54       	subi	r22, 0x4B	; 75
     d2e:	2a b7       	in	r18, 0x3a	; 58
     d30:	cd f9       	.word	0xf9cd	; ????
     d32:	51 01       	movw	r10, r2
     d34:	80 82       	st	Z, r8
     d36:	86 8e       	std	Z+30, r8	; 0x1e
     d38:	7f 5d       	subi	r23, 0xDF	; 223
     d3a:	38 f2       	brcs	.-114    	; 0xcca <__stack+0x1cb>
     d3c:	47 0c       	add	r4, r7
     d3e:	9a 97       	sbiw	r26, 0x2a	; 42
     d40:	ac da       	rcall	.-2728   	; 0x29a <__trampolines_end+0x1ee>
     d42:	17 8d       	ldd	r17, Z+31	; 0x1f
     d44:	79 51       	subi	r23, 0x19	; 25
     d46:	01 61       	ori	r16, 0x11	; 17
     d48:	40 e3       	ldi	r20, 0x30	; 48
     d4a:	44 eb       	ldi	r20, 0xB4	; 180
     d4c:	54 0b       	sbc	r21, r20
     d4e:	75 68       	ori	r23, 0x85	; 133
     d50:	33 c5       	rjmp	.+2662   	; 0x17b8 <main+0x606>
     d52:	08 73       	andi	r16, 0x38	; 56
     d54:	45 e9       	ldi	r20, 0x95	; 149
     d56:	31 e0       	ldi	r19, 0x01	; 1
     d58:	23 c4       	rjmp	.+2118   	; 0x15a0 <main+0x3ee>
     d5a:	eb 35       	cpi	r30, 0x5B	; 91
     d5c:	e8 33       	cpi	r30, 0x38	; 56
     d5e:	c5 e9       	ldi	r28, 0x95	; 149
     d60:	31 c1       	rjmp	.+610    	; 0xfc4 <__stack+0x4c5>
     d62:	e1 40       	sbci	r30, 0x01	; 1
     d64:	02 86       	std	Z+10, r0	; 0x0a
     d66:	8e 7f       	andi	r24, 0xFE	; 254
     d68:	7c 7a       	andi	r23, 0xAC	; 172
     d6a:	76 6e       	ori	r23, 0xE6	; 230
     d6c:	3f dd       	rcall	.-1410   	; 0x7ec <__FUSE_REGION_LENGTH__+0x3ec>
     d6e:	19 b0       	in	r1, 0x09	; 9
     d70:	e2 46       	sbci	r30, 0x62	; 98
     d72:	0e 9e       	mul	r0, r30
     d74:	9f bc       	out	0x2f, r9	; 47
     d76:	db 15       	cp	r29, r11
     d78:	a8 d2       	rcall	.+1360   	; 0x12ca <main+0x118>
     d7a:	07 6d       	ori	r16, 0xD7	; 215
     d7c:	39 f0       	breq	.+14     	; 0xd8c <__stack+0x28d>
     d7e:	43 e5       	ldi	r20, 0x53	; 83
     d80:	29 b1       	in	r18, 0x09	; 9
     d82:	e0 23       	and	r30, r16
     d84:	a5 c8       	rjmp	.-3766   	; 0xfffffed0 <__eeprom_end+0xff7efed0>
     d86:	12 a6       	std	Z+42, r1	; 0x2a
     d88:	ce 1e       	adc	r12, r30
     d8a:	9f bc       	out	0x2f, r9	; 47
     d8c:	fa 76       	andi	r31, 0x6A	; 106
     d8e:	6e 3f       	cpi	r22, 0xFE	; 254
     d90:	fc 5b       	subi	r31, 0xBC	; 188
     d92:	34 ea       	ldi	r19, 0xA4	; 164
     d94:	56 0f       	add	r21, r22
     d96:	9c ba       	out	0x1c, r9	; 28
     d98:	d7 0d       	add	r29, r7
     d9a:	79 51       	subi	r23, 0x19	; 25
     d9c:	01 80       	ldd	r0, Z+1	; 0x01
     d9e:	63 25       	eor	r22, r3
     da0:	c8 12       	cpse	r12, r24
     da2:	87 6d       	ori	r24, 0xD7	; 215
     da4:	39 f0       	breq	.+14     	; 0xdb4 <__stack+0x2b5>
     da6:	62 46       	sbci	r22, 0x62	; 98
     da8:	ef 3d       	cpi	r30, 0xDF	; 223
     daa:	d9 30       	cpi	r29, 0x09	; 9
     dac:	e2 27       	eor	r30, r18
     dae:	ad d8       	rcall	.-3750   	; 0xffffff0a <__eeprom_end+0xff7eff0a>
     db0:	32 e6       	ldi	r19, 0x62	; 98
     db2:	4e ff       	.word	0xff4e	; ????
     db4:	7c 7a       	andi	r23, 0xAC	; 172
     db6:	76 6e       	ori	r23, 0xE6	; 230
     db8:	5e 1f       	adc	r21, r30
     dba:	bc db       	rcall	.-2184   	; 0x534 <__FUSE_REGION_LENGTH__+0x134>
     dbc:	15 a8       	ldd	r1, Z+53	; 0x35
     dbe:	d2 26       	eor	r13, r18
     dc0:	ce 1e       	adc	r12, r30
     dc2:	9f 9d       	mul	r25, r15
     dc4:	99 91       	ld	r25, Y+
     dc6:	a0 c2       	rjmp	.+1344   	; 0x1308 <main+0x156>
     dc8:	e7 2d       	mov	r30, r7
     dca:	d8 13       	cpse	r29, r24
     dcc:	85 69       	ori	r24, 0x95	; 149
     dce:	50 22       	and	r5, r16
     dd0:	a7 cc       	rjmp	.-1714   	; 0x720 <__FUSE_REGION_LENGTH__+0x320>
     dd2:	1a b6       	in	r1, 0x3a	; 58
     dd4:	cf 1c       	adc	r12, r15
     dd6:	ba f6       	brpl	.-82     	; 0xd86 <__stack+0x287>
     dd8:	6e 5e       	subi	r22, 0xEE	; 238
     dda:	3e df       	rcall	.-388    	; 0xc58 <__stack+0x159>
     ddc:	1d b8       	out	0x0d, r1	; 13
     dde:	d3 24       	eor	r13, r3
     de0:	ab d4       	rcall	.+2390   	; 0x1738 <main+0x586>
     de2:	2a d6       	rcall	.+3156   	; 0x1a38 <__vector_11+0x30>
     de4:	0f 7d       	andi	r16, 0xDF	; 223
     de6:	59 11       	cpse	r21, r9
     de8:	a0 c2       	rjmp	.+1344   	; 0x132a <main+0x178>
     dea:	e7 4c       	sbci	r30, 0xC7	; 199
     dec:	1a 97       	sbiw	r26, 0x0a	; 10
     dee:	8d 98       	cbi	0x11, 5	; 17
     df0:	93 a4       	ldd	r9, Z+43	; 0x2b
     df2:	ca f7       	brpl	.-14     	; 0xde6 <__stack+0x2e7>
     df4:	6c 5a       	subi	r22, 0xAC	; 172
     df6:	17 ac       	ldd	r1, Z+63	; 0x3f
     df8:	bb f4       	brvc	.+46     	; 0xe28 <__stack+0x329>
     dfa:	6a 56       	subi	r22, 0x6A	; 106
     dfc:	0f 9c       	mul	r0, r15
     dfe:	ba d7       	rcall	.+3956   	; 0x1d74 <__addsf3x+0x86>
     e00:	0d 98       	cbi	0x01, 5	; 1
     e02:	93 a4       	ldd	r9, Z+43	; 0x2b
     e04:	ca f7       	brpl	.-14     	; 0xdf8 <__stack+0x2f9>
     e06:	6c 3b       	cpi	r22, 0xBC	; 188
     e08:	d5 09       	sbc	r29, r5
     e0a:	71 60       	ori	r23, 0x01	; 1
     e0c:	42 06       	cpc	r4, r18
     e0e:	6f 3d       	cpi	r22, 0xDF	; 223
     e10:	d9 30       	cpi	r29, 0x09	; 9
     e12:	c3 04       	cpc	r12, r3
     e14:	8a 96       	adiw	r24, 0x2a	; 42
     e16:	8f 7d       	andi	r24, 0xDF	; 223
     e18:	78 53       	subi	r23, 0x38	; 56
     e1a:	24 ca       	rjmp	.-3000   	; 0x264 <__trampolines_end+0x1b8>
     e1c:	f7 4d       	sbci	r31, 0xD7	; 215
     e1e:	18 b2       	in	r1, 0x18	; 24
     e20:	e6 4e       	sbci	r30, 0xE6	; 230
     e22:	ff 5d       	subi	r31, 0xDF	; 223
     e24:	38 d3       	rcall	.+1648   	; 0x1496 <main+0x2e4>
     e26:	05 69       	ori	r16, 0x95	; 149
     e28:	50 03       	mulsu	r21, r16
     e2a:	84 8a       	std	Z+20, r8	; 0x14
     e2c:	96 8f       	std	Z+30, r25	; 0x1e
     e2e:	9c 9b       	sbis	0x13, 4	; 19
     e30:	b4 ea       	ldi	r27, 0xA4	; 164
     e32:	37 ec       	ldi	r19, 0xC7	; 199
     e34:	5a 17       	cp	r21, r26
     e36:	ac bb       	out	0x1c, r26	; 28
     e38:	f4 6a       	ori	r31, 0xA4	; 164
     e3a:	37 cd       	rjmp	.-1426   	; 0x8aa <__FUSE_REGION_LENGTH__+0x4aa>
     e3c:	f9 70       	andi	r31, 0x09	; 9
     e3e:	43 e5       	ldi	r20, 0x53	; 83
     e40:	48 f3       	brcs	.-46     	; 0xe14 <__stack+0x315>
     e42:	45 08       	sbc	r4, r5
     e44:	92 87       	std	Z+10, r25	; 0x0a
     e46:	8c 7b       	andi	r24, 0xBC	; 188
     e48:	74 4b       	sbci	r23, 0xB4	; 180
     e4a:	f5 49       	sbci	r31, 0x95	; 149
     e4c:	f1 41       	sbci	r31, 0x11	; 17
     e4e:	e1 40       	sbci	r30, 0x01	; 1
     e50:	02 86       	std	Z+10, r0	; 0x0a
     e52:	6f 3d       	cpi	r22, 0xDF	; 223
     e54:	d9 11       	cpse	r29, r9
     e56:	81 61       	ori	r24, 0x11	; 17
     e58:	40 02       	muls	r20, r16
     e5a:	86 6f       	ori	r24, 0xF6	; 246
     e5c:	3d f8       	.word	0xf83d	; ????
     e5e:	53 24       	eor	r5, r3
     e60:	ca 16       	cp	r12, r26
     e62:	ae de       	rcall	.-676    	; 0xbc0 <__stack+0xc1>
     e64:	3e df       	rcall	.-388    	; 0xce2 <__stack+0x1e3>
     e66:	1d 99       	sbic	0x03, 5	; 3
     e68:	91 a0       	ldd	r9, Z+33	; 0x21
     e6a:	a3 c4       	rjmp	.+2374   	; 0x17b2 <main+0x600>
     e6c:	eb 35       	cpi	r30, 0x5B	; 91
     e6e:	e8 52       	subi	r30, 0x28	; 40
     e70:	07 8c       	ldd	r0, Z+31	; 0x1f
     e72:	7b 74       	andi	r23, 0x4B	; 75
     e74:	6a 37       	cpi	r22, 0x7A	; 122
     e76:	cd f9       	.word	0xf9cd	; ????
     e78:	51 20       	and	r5, r1
     e7a:	c2 06       	cpc	r12, r18
     e7c:	8e 7f       	andi	r24, 0xFE	; 254
     e7e:	7c 7a       	andi	r23, 0xAC	; 172
     e80:	57 0d       	add	r21, r7
     e82:	79 51       	subi	r23, 0x19	; 25
     e84:	20 c2       	rjmp	.+1088   	; 0x12c6 <main+0x114>
     e86:	06 8e       	std	Z+30, r0	; 0x1e
     e88:	7f 5d       	subi	r23, 0xDF	; 223
     e8a:	19 b0       	in	r1, 0x09	; 9
     e8c:	c3 e5       	ldi	r28, 0x53	; 83
     e8e:	29 d0       	rcall	.+82     	; 0xee2 <__stack+0x3e3>
     e90:	22 a7       	std	Z+42, r18	; 0x2a
     e92:	cc fb       	.word	0xfbcc	; ????
     e94:	55 28       	or	r5, r5
     e96:	b3 c5       	rjmp	.+2918   	; 0x19fe <__vector_10+0x38>
     e98:	e9 50       	subi	r30, 0x09	; 9
     e9a:	22 a7       	std	Z+42, r18	; 0x2a
     e9c:	cc 1a       	sub	r12, r28
     e9e:	b6 cf       	rjmp	.-148    	; 0xe0c <__stack+0x30d>
     ea0:	1c 9b       	sbis	0x03, 4	; 3
     ea2:	b4 ea       	ldi	r27, 0xA4	; 164
     ea4:	56 2e       	mov	r5, r22
     ea6:	bf dd       	rcall	.-1154   	; 0xa26 <__FUSE_REGION_LENGTH__+0x626>
     ea8:	19 b0       	in	r1, 0x09	; 9
     eaa:	e2 46       	sbci	r30, 0x62	; 98
     eac:	ef 5c       	subi	r30, 0xCF	; 207
     eae:	3a d7       	rcall	.+3700   	; 0x1d24 <__addsf3x+0x36>
     eb0:	0d 79       	andi	r16, 0x9D	; 157
     eb2:	70 62       	ori	r23, 0x20	; 32
     eb4:	27 ad       	ldd	r18, Z+63	; 0x3f
     eb6:	d8 13       	cpse	r29, r24
     eb8:	a4 ab       	std	Z+52, r26	; 0x34
     eba:	d4 2a       	or	r13, r20
     ebc:	b7 ec       	ldi	r27, 0xC7	; 199
     ebe:	5a 17       	cp	r21, r26
     ec0:	8d 79       	andi	r24, 0x9D	; 157
     ec2:	70 43       	sbci	r23, 0x30	; 48
     ec4:	04 8a       	std	Z+20, r0	; 0x14
     ec6:	77 4d       	sbci	r23, 0xD7	; 215
     ec8:	f9 70       	andi	r31, 0x09	; 9
     eca:	62 27       	eor	r22, r18
     ecc:	cc 1a       	sub	r12, r28
     ece:	b6 ee       	ldi	r27, 0xE6	; 230
     ed0:	3f dd       	rcall	.-1410   	; 0x950 <__FUSE_REGION_LENGTH__+0x550>
     ed2:	38 f2       	brcs	.-114    	; 0xe62 <__stack+0x363>
     ed4:	47 0c       	add	r4, r7
     ed6:	7b 55       	subi	r23, 0x5B	; 91
     ed8:	28 d2       	rcall	.+1104   	; 0x132a <main+0x178>
     eda:	07 8c       	ldd	r0, Z+31	; 0x1f
     edc:	9a b6       	in	r9, 0x3a	; 58
     ede:	cf 1c       	adc	r12, r15
     ee0:	9b 95       	.word	0x959b	; ????
     ee2:	89 71       	andi	r24, 0x19	; 25
     ee4:	60 42       	sbci	r22, 0x20	; 32
     ee6:	e7 2d       	mov	r30, r7
     ee8:	d8 13       	cpse	r29, r24
     eea:	85 88       	ldd	r8, Z+21	; 0x15
     eec:	92 a6       	std	Z+42, r9	; 0x2a
     eee:	ce 1e       	adc	r12, r30
     ef0:	be fe       	.word	0xfebe	; ????
     ef2:	7e 7e       	andi	r23, 0xEE	; 238
     ef4:	7e 7e       	andi	r23, 0xEE	; 238
     ef6:	7e 7e       	andi	r23, 0xEE	; 238
     ef8:	5f 3c       	cpi	r21, 0xCF	; 207
     efa:	db 34       	cpi	r29, 0x4B	; 75
     efc:	ea 56       	subi	r30, 0x6A	; 106
     efe:	2e de       	rcall	.-932    	; 0xb5c <__stack+0x5d>
     f00:	1f bc       	out	0x2f, r1	; 47
     f02:	fa 76       	andi	r31, 0x6A	; 106
     f04:	4f 1c       	adc	r4, r15
     f06:	9b 95       	.word	0x959b	; ????
     f08:	89 71       	andi	r24, 0x19	; 25
     f0a:	60 23       	and	r22, r16
     f0c:	a5 c8       	rjmp	.-3766   	; 0x58 <__SREG__+0x19>
     f0e:	f3 64       	ori	r31, 0x43	; 67
     f10:	4a 16       	cp	r4, r26
     f12:	ae bf       	out	0x3e, r26	; 62
     f14:	fc 7a       	andi	r31, 0xAC	; 172
     f16:	76 6e       	ori	r23, 0xE6	; 230
     f18:	3f dd       	rcall	.-1410   	; 0x998 <__FUSE_REGION_LENGTH__+0x598>
     f1a:	19 91       	ld	r17, Y+
     f1c:	a0 a3       	std	Z+32, r26	; 0x20
     f1e:	c4 0a       	sbc	r12, r20
     f20:	77 4d       	sbci	r23, 0xD7	; 215
     f22:	18 b2       	in	r1, 0x18	; 24
     f24:	e6 2f       	mov	r30, r22
     f26:	dc 1b       	sub	r29, r28
     f28:	95 a8       	ldd	r9, Z+53	; 0x35
     f2a:	b3 c5       	rjmp	.+2918   	; 0x1a92 <__vector_11+0x8a>
     f2c:	e9 50       	subi	r30, 0x09	; 9
     f2e:	22 c6       	rjmp	.+3140   	; 0x1b74 <__vector_11+0x16c>
     f30:	0e 9e       	mul	r0, r30
     f32:	9f 9d       	mul	r25, r15
     f34:	b8 f2       	brcs	.-82     	; 0xee4 <__stack+0x3e5>
     f36:	47 ed       	ldi	r20, 0xD7	; 215
     f38:	58 13       	cpse	r21, r24
     f3a:	85 69       	ori	r24, 0x95	; 149
     f3c:	50 22       	and	r5, r16
     f3e:	a7 ad       	ldd	r26, Z+63	; 0x3f
     f40:	b9 d1       	rcall	.+882    	; 0x12b4 <main+0x102>
     f42:	01 80       	ldd	r0, Z+1	; 0x01
     f44:	82 86       	std	Z+10, r8	; 0x0a
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	5d 19       	sub	r21, r13
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	80 82       	st	Z, r8
     f4e:	67 4c       	sbci	r22, 0xC7	; 199
     f50:	fb 55       	subi	r31, 0x5B	; 91
     f52:	28 b3       	in	r18, 0x18	; 24
     f54:	e4 2b       	or	r30, r20
     f56:	d4 2a       	or	r13, r20
     f58:	d6 2e       	mov	r13, r22
     f5a:	de 3e       	cpi	r29, 0xEE	; 238
     f5c:	fe 5f       	subi	r31, 0xFE	; 254
     f5e:	1d b8       	out	0x0d, r1	; 13
     f60:	d3 24       	eor	r13, r3
     f62:	ab b5       	in	r26, 0x2b	; 43
     f64:	e8 52       	subi	r30, 0x28	; 40
     f66:	26 af       	std	Z+62, r18	; 0x3e
     f68:	bd d9       	rcall	.-3206   	; 0x2e4 <__trampolines_end+0x238>
     f6a:	30 c3       	rjmp	.+1632   	; 0x15cc <main+0x41a>
     f6c:	04 6b       	ori	r16, 0xB4	; 180
     f6e:	54 2a       	or	r5, r20
     f70:	b7 cd       	rjmp	.-1170   	; 0xae0 <__FUSE_REGION_LENGTH__+0x6e0>
     f72:	f9 70       	andi	r31, 0x09	; 9
     f74:	43 e5       	ldi	r20, 0x53	; 83
     f76:	48 12       	cpse	r4, r24
     f78:	a6 af       	std	Z+62, r26	; 0x3e
     f7a:	dc 1b       	sub	r29, r28
     f7c:	b4 cb       	rjmp	.-2200   	; 0x6e6 <__FUSE_REGION_LENGTH__+0x2e6>
     f7e:	14 8b       	std	Z+20, r17	; 0x14
     f80:	75 49       	sbci	r23, 0x95	; 149
     f82:	10 83       	st	Z, r17
     f84:	65 29       	or	r22, r5
     f86:	b1 c1       	rjmp	.+866    	; 0x12ea <main+0x138>
     f88:	00 63       	ori	r16, 0x30	; 48
     f8a:	44 eb       	ldi	r20, 0xB4	; 180
     f8c:	54 0b       	sbc	r21, r20
     f8e:	94 8b       	std	Z+20, r25	; 0x14
     f90:	75 68       	ori	r23, 0x85	; 133
     f92:	33 c5       	rjmp	.+2662   	; 0x19fa <__vector_10+0x34>
     f94:	e9 31       	cpi	r30, 0x19	; 25
     f96:	e0 42       	sbci	r30, 0x20	; 32
     f98:	06 8e       	std	Z+30, r0	; 0x1e
     f9a:	7f 7c       	andi	r23, 0xCF	; 207
     f9c:	7a 57       	subi	r23, 0x7A	; 122
     f9e:	0d 79       	andi	r16, 0x9D	; 157
     fa0:	70 62       	ori	r23, 0x20	; 32
     fa2:	46 0e       	add	r4, r22
     fa4:	9e 9f       	mul	r25, r30
     fa6:	9d b8       	out	0x0d, r9	; 13
     fa8:	d3 05       	cpc	r29, r3
     faa:	69 31       	cpi	r22, 0x19	; 25
     fac:	c1 e1       	ldi	r28, 0x11	; 17
     fae:	21 a1       	ldd	r18, Z+33	; 0x21
     fb0:	c0 02       	muls	r28, r16
     fb2:	67 2d       	mov	r22, r7
     fb4:	d8 13       	cpse	r29, r24
     fb6:	a4 ca       	rjmp	.-2744   	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
     fb8:	16 8f       	std	Z+30, r17	; 0x1e
     fba:	7d 78       	andi	r23, 0x8D	; 141
     fbc:	53 05       	cpc	r21, r3
     fbe:	69 50       	subi	r22, 0x09	; 9
     fc0:	03 65       	ori	r16, 0x53	; 83
     fc2:	48 12       	cpse	r4, r24
     fc4:	87 6d       	ori	r24, 0xD7	; 215
     fc6:	39 f0       	breq	.+14     	; 0xfd6 <__stack+0x4d7>
     fc8:	43 e5       	ldi	r20, 0x53	; 83
     fca:	48 12       	cpse	r4, r24
     fcc:	87 8c       	ldd	r8, Z+31	; 0x1f
     fce:	9a 97       	sbiw	r26, 0x2a	; 42
     fd0:	8d 79       	andi	r24, 0x9D	; 157
     fd2:	51 20       	and	r5, r1
     fd4:	c2 06       	cpc	r12, r18
     fd6:	6f 5c       	subi	r22, 0xCF	; 207
     fd8:	3a f6       	brpl	.-114    	; 0xf68 <__stack+0x469>
     fda:	6e 3f       	cpi	r22, 0xFE	; 254
     fdc:	dd 19       	sub	r29, r13
     fde:	b0 c3       	rjmp	.+1888   	; 0x1740 <main+0x58e>
     fe0:	e5 29       	or	r30, r5
     fe2:	b1 c1       	rjmp	.+866    	; 0x1346 <main+0x194>
     fe4:	00 63       	ori	r16, 0x30	; 48
     fe6:	25 a9       	ldd	r18, Z+53	; 0x35
     fe8:	b1 e0       	ldi	r27, 0x01	; 1
     fea:	42 e7       	ldi	r20, 0x72	; 114
     fec:	2d b9       	out	0x0d, r18	; 13
     fee:	d1 20       	and	r13, r1
     ff0:	a3 c4       	rjmp	.+2374   	; 0x1938 <main+0x786>
     ff2:	eb 54       	subi	r30, 0x4B	; 75
     ff4:	2a d6       	rcall	.+3156   	; 0x1c4a <__vector_11+0x242>
     ff6:	0f 7d       	andi	r16, 0xDF	; 223
     ff8:	78 72       	andi	r23, 0x28	; 40
     ffa:	66 2f       	mov	r22, r22
     ffc:	dc 3a       	cpi	r29, 0xAC	; 172
     ffe:	f6 4f       	sbci	r31, 0xF6	; 246
    1000:	1c ba       	out	0x1c, r1	; 28
    1002:	f6 6e       	ori	r31, 0xE6	; 230
    1004:	3f fc       	.word	0xfc3f	; ????
    1006:	5b 15       	cp	r21, r11
    1008:	89 71       	andi	r24, 0x19	; 25
    100a:	60 23       	and	r22, r16
    100c:	a5 c8       	rjmp	.-3766   	; 0x158 <__trampolines_end+0xac>
    100e:	12 87       	std	Z+10, r17	; 0x0a
    1010:	6d 58       	subi	r22, 0x8D	; 141
    1012:	32 c7       	rjmp	.+3684   	; 0x1e78 <__fp_pscA>
    1014:	0c 9a       	sbi	0x01, 4	; 1
    1016:	97 8d       	ldd	r25, Z+31	; 0x1f
    1018:	98 b2       	in	r9, 0x18	; 24
    101a:	e6 4e       	sbci	r30, 0xE6	; 230
    101c:	1e 9f       	mul	r17, r30
    101e:	9d 99       	sbic	0x13, 5	; 19
    1020:	b0 e2       	ldi	r27, 0x20	; 32
    1022:	46 ef       	ldi	r20, 0xF6	; 246
    1024:	5c 3a       	cpi	r21, 0xAC	; 172
    1026:	d7 0d       	add	r29, r7
    1028:	98 b2       	in	r9, 0x18	; 24
    102a:	e6 2f       	mov	r30, r22
    102c:	bd f8       	.word	0xf8bd	; ????
    102e:	72 47       	sbci	r23, 0x72	; 114
    1030:	ed 58       	subi	r30, 0x8D	; 141
    1032:	13 a4       	ldd	r1, Z+43	; 0x2b
    1034:	ca 16       	cp	r12, r26
    1036:	8f 9c       	mul	r8, r15
    1038:	9b 95       	.word	0x959b	; ????
    103a:	a8 b3       	in	r26, 0x18	; 24
    103c:	e4 2b       	or	r30, r20
    103e:	d4 2a       	or	r13, r20
    1040:	b7 cd       	rjmp	.-1170   	; 0xbb0 <__stack+0xb1>
    1042:	18 93       	.word	0x9318	; ????
    1044:	a4 ab       	std	Z+52, r26	; 0x34
    1046:	b5 c9       	rjmp	.-3222   	; 0x3b2 <__trampolines_end+0x306>
    1048:	10 83       	st	Z, r17
    104a:	65 48       	sbci	r22, 0x85	; 133
    104c:	12 87       	std	Z+10, r17	; 0x0a
    104e:	6d 39       	cpi	r22, 0x9D	; 157
    1050:	d1 01       	movw	r26, r2
    1052:	80 82       	st	Z, r8
    1054:	86 6f       	ori	r24, 0xF6	; 246
    1056:	5c 1b       	sub	r21, r28
    1058:	b4 cb       	rjmp	.-2200   	; 0x7c2 <__FUSE_REGION_LENGTH__+0x3c2>
    105a:	f5 68       	ori	r31, 0x85	; 133
    105c:	33 e4       	ldi	r19, 0x43	; 67
    105e:	4a 16       	cp	r4, r26
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	78 53       	subi	r23, 0x38	; 56
    1064:	24 ab       	std	Z+52, r18	; 0x34
    1066:	b5 e8       	ldi	r27, 0x85	; 133
    1068:	33 e4       	ldi	r19, 0x43	; 67
    106a:	4a f7       	brpl	.-46     	; 0x103e <__stack+0x53f>
    106c:	6c 5a       	subi	r22, 0xAC	; 172
    106e:	17 ac       	ldd	r1, Z+63	; 0x3f
    1070:	bb d5       	rcall	.+2934   	; 0x1be8 <__vector_11+0x1e0>
    1072:	28 b3       	in	r18, 0x18	; 24
    1074:	c5 08       	sbc	r12, r5
    1076:	92 87       	std	Z+10, r25	; 0x0a
    1078:	6d 39       	cpi	r22, 0x9D	; 157
    107a:	d1 20       	and	r13, r1
    107c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    107e:	c8 12       	cpse	r12, r24
    1080:	a6 af       	std	Z+62, r26	; 0x3e
    1082:	dc 1b       	sub	r29, r28
    1084:	b4 cb       	rjmp	.-2200   	; 0x7ee <__FUSE_REGION_LENGTH__+0x3ee>
    1086:	14 aa       	std	Z+52, r1	; 0x34
    1088:	b7 cd       	rjmp	.-1170   	; 0xbf8 <__stack+0xf9>
    108a:	18 93       	.word	0x9318	; ????
    108c:	85 69       	ori	r24, 0x95	; 149
    108e:	50 03       	mulsu	r21, r16
    1090:	65 29       	or	r22, r5
    1092:	b1 c1       	rjmp	.+866    	; 0x13f6 <main+0x244>
    1094:	00 82       	st	Z, r0
    1096:	86 6f       	ori	r24, 0xF6	; 246
    1098:	3d d9       	rcall	.-3462   	; 0x314 <__trampolines_end+0x268>
    109a:	30 c3       	rjmp	.+1632   	; 0x16fc <main+0x54a>
    109c:	04 6b       	ori	r16, 0xB4	; 180
    109e:	35 e8       	ldi	r19, 0x85	; 133
    10a0:	33 e4       	ldi	r19, 0x43	; 67
    10a2:	2b d4       	rcall	.+2134   	; 0x18fa <main+0x748>
    10a4:	0b 75       	andi	r16, 0x5B	; 91
    10a6:	a9 6b       	ori	r26, 0xB9	; 185
    10a8:	bb ff       	.word	0xffbb	; ????

000010aa <descriptor_list>:
    10aa:	00 01 00 00 60 11 12 00 02 00 00 f9 10 22 00 22     ....`........"."
    10ba:	00 00 1b 11 45 00 21 00 00 0b 11 09 00 03 00 00     ....E.!.........
    10ca:	f5 10 04 01 03 09 04 eb 10 08 02 03 09 04 db 10     ................
    10da:	0e                                                  .

000010db <string2>:
    10db:	0e 03 50 00 75 00 62 00 6c 00 69 00 63 00 00 00     ..P.u.b.l.i.c...

000010eb <string1>:
    10eb:	08 03 42 00 73 00 74 00 00 00                       ..B.s.t...

000010f5 <string0>:
    10f5:	04 03 09 04                                         ....

000010f9 <config1_descriptor>:
    10f9:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
    1109:	02 00 09 21 11 01 00 01 22 45 00 07 05 83 03 06     ...!...."E......
    1119:	00 01                                               ..

0000111b <mouse_hid_report_desc>:
    111b:	05 01 09 02 a1 01 05 09 19 01 29 05 15 00 25 01     ..........)...%.
    112b:	95 05 75 01 81 02 95 01 75 03 81 03 05 01 09 30     ..u.....u......0
    113b:	09 31 16 01 80 26 ff 7f 36 01 80 46 ff 7f 75 10     .1...&..6..F..u.
    114b:	95 02 81 06 09 38 15 81 25 7f 35 81 45 7f 75 08     .....8..%.5.E.u.
    115b:	95 01 81 06 c0                                      .....

00001160 <device_descriptor>:
    1160:	12 01 00 02 00 00 00 20 c0 16 7e 04 00 01 01 02     ....... ..~.....
    1170:	00 01                                               ..

00001172 <endpoint_config_table>:
    1172:	00 00 01 c1 02 00                                   ......

00001178 <__ctors_end>:
    1178:	11 24       	eor	r1, r1
    117a:	1f be       	out	0x3f, r1	; 63
    117c:	cf ef       	ldi	r28, 0xFF	; 255
    117e:	da e0       	ldi	r29, 0x0A	; 10
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	cd bf       	out	0x3d, r28	; 61

00001184 <__do_copy_data>:
    1184:	11 e0       	ldi	r17, 0x01	; 1
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	b1 e0       	ldi	r27, 0x01	; 1
    118a:	ec e0       	ldi	r30, 0x0C	; 12
    118c:	ff e1       	ldi	r31, 0x1F	; 31
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <__do_copy_data+0x10>
    1190:	05 90       	lpm	r0, Z+
    1192:	0d 92       	st	X+, r0
    1194:	a2 30       	cpi	r26, 0x02	; 2
    1196:	b1 07       	cpc	r27, r17
    1198:	d9 f7       	brne	.-10     	; 0x1190 <__do_copy_data+0xc>

0000119a <__do_clear_bss>:
    119a:	21 e0       	ldi	r18, 0x01	; 1
    119c:	a2 e0       	ldi	r26, 0x02	; 2
    119e:	b1 e0       	ldi	r27, 0x01	; 1
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <.do_clear_bss_start>

000011a2 <.do_clear_bss_loop>:
    11a2:	1d 92       	st	X+, r1

000011a4 <.do_clear_bss_start>:
    11a4:	a3 30       	cpi	r26, 0x03	; 3
    11a6:	b2 07       	cpc	r27, r18
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <.do_clear_bss_loop>
    11aa:	03 d0       	rcall	.+6      	; 0x11b2 <main>
    11ac:	ad c6       	rjmp	.+3418   	; 0x1f08 <_exit>

000011ae <__bad_interrupt>:
    11ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000011b2 <main>:
	SS_HIGH;
}


int main(void)
{
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	2c 97       	sbiw	r28, 0x0c	; 12
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
	union motion_data x, y;

	// set clock prescaler for 16MHz
	CLKPR = 0x80;
    11c6:	80 e8       	ldi	r24, 0x80	; 128
    11c8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	CLKPR = 0x00;
    11cc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>


static void pins_init(void)
{
	// buttons
	PORTD |= 0b00111111; // L, R, M, FSB, RSB, DPI
    11d0:	8b b1       	in	r24, 0x0b	; 11
    11d2:	8f 63       	ori	r24, 0x3F	; 63
    11d4:	8b b9       	out	0x0b, r24	; 11
	
	// wheel (mechanical encoder, quadrature outputs A/B)
	DDRC &= ~((1<<6) | (1<<7)); // pullup inputs on C6, C7
    11d6:	87 b1       	in	r24, 0x07	; 7
    11d8:	8f 73       	andi	r24, 0x3F	; 63
    11da:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<6) | (1<<7);
    11dc:	88 b1       	in	r24, 0x08	; 8
    11de:	80 6c       	ori	r24, 0xC0	; 192
    11e0:	88 b9       	out	0x08, r24	; 8
	
	// teensy LED
	DDRD |= (1<<6);
    11e2:	56 9a       	sbi	0x0a, 6	; 10
	
	// RGB LED
	DDRB |= (1<<5) | (1<<6);
    11e4:	84 b1       	in	r24, 0x04	; 4
    11e6:	80 66       	ori	r24, 0x60	; 96
    11e8:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<7);
    11ea:	57 9a       	sbi	0x0a, 7	; 10
	PORTB |= (1<<5); // Red (off)
    11ec:	2d 9a       	sbi	0x05, 5	; 5
	PORTB |= (1<<6); // Green (off)
    11ee:	2e 9a       	sbi	0x05, 6	; 5
	PORTD |= (1<<7); // Blue (off)
    11f0:	5f 9a       	sbi	0x0b, 7	; 11
	
	// not necssary if NRESET is pulled high in PCB
	//DDRC |= (1<<7); PORTC |= (1<<7); // C7, NRESET high output

	EICRA = 0b01010101; // generate interrupt request on any edge of D0/D1/D2/D3
    11f2:	85 e5       	ldi	r24, 0x55	; 85
    11f4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 0; // but don't enable any actual interrupts
    11f8:	1d ba       	out	0x1d, r1	; 29
	EIFR = 0b00001111; // clear EIFR
    11fa:	8f e0       	ldi	r24, 0x0F	; 15
    11fc:	8c bb       	out	0x1c, r24	; 28
	CLKPR = 0x00;

	pins_init();

	// previous state to compare against for debouncing
	uint8_t btn_prev = (~PIND) & 0b00111111; // read L, R, M, FSB, RSB, DPI
    11fe:	89 b1       	in	r24, 0x09	; 9
    1200:	80 95       	com	r24
    1202:	8f 73       	andi	r24, 0x3F	; 63
    1204:	f8 2e       	mov	r15, r24
	uint8_t btn_usb = 0x00;
	// previously transmitted button state
	uint8_t btn_usb_prev = 0x00;
	// if dpi button is pressed when plugging in, jump to bootloader
	// see https://www.pjrc.com/teensy/jump_to_bootloader.html
	delay_ms(50);
    1206:	2f ef       	ldi	r18, 0xFF	; 255
    1208:	30 e7       	ldi	r19, 0x70	; 112
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	21 50       	subi	r18, 0x01	; 1
    120e:	30 40       	sbci	r19, 0x00	; 0
    1210:	80 40       	sbci	r24, 0x00	; 0
    1212:	e1 f7       	brne	.-8      	; 0x120c <main+0x5a>
    1214:	00 c0       	rjmp	.+0      	; 0x1216 <main+0x64>
    1216:	00 00       	nop
	if (!(PIND & (1<<2)))
    1218:	4a 99       	sbic	0x09, 2	; 9
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <main+0x6e>
		__asm__ volatile ("jmp 0x7e00");
    121c:	0c 94 00 3f 	jmp	0x7e00	; 0x7e00 <__data_load_end+0x5ef2>


// spi functions
static void spi_init(void)
{
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS); // outputs
    1220:	84 b1       	in	r24, 0x04	; 4
    1222:	87 60       	ori	r24, 0x07	; 7
    1224:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<0); PORTB |= (1<<0); // set the hardware SS pin to low to enable SPI
    1226:	20 9a       	sbi	0x04, 0	; 4
    1228:	28 9a       	sbi	0x05, 0	; 5
	// MISO pullup input is already done in hardware
	// enable spi, master mode, mode 3, clock rate = fck/4 = 2MHz
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
    122a:	8c e5       	ldi	r24, 0x5C	; 92
    122c:	8c bd       	out	0x2c, r24	; 44
	// dpi settings
	uint8_t dpi_index = 1;
	uint8_t dpis[] = {3, 7, 15};
	
	// Profile switching when mouse is plugged in
	delay_ms(50);
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	e0 e7       	ldi	r30, 0x70	; 112
    1232:	f2 e0       	ldi	r31, 0x02	; 2
    1234:	91 50       	subi	r25, 0x01	; 1
    1236:	e0 40       	sbci	r30, 0x00	; 0
    1238:	f0 40       	sbci	r31, 0x00	; 0
    123a:	e1 f7       	brne	.-8      	; 0x1234 <main+0x82>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <main+0x8c>
    123e:	00 00       	nop
	if (!(PIND & (1<<3))) {
    1240:	4b 9b       	sbis	0x09, 3	; 9
    1242:	2a c3       	rjmp	.+1620   	; 0x1898 <main+0x6e6>
		profile = 2;
		// dpi settings
		dpi_index = 0;
	}
		
	else if (!(PIND & (1<<4))) {
    1244:	4c 99       	sbic	0x09, 4	; 9
    1246:	2c c3       	rjmp	.+1624   	; 0x18a0 <main+0x6ee>
    1248:	8f e0       	ldi	r24, 0x0F	; 15
		// Initial profile
		profile = 3;
    124a:	23 e0       	ldi	r18, 0x03	; 3
    124c:	2a 83       	std	Y+2, r18	; 0x02
// actual dpi value = (dpi + 1) * 100
static void pmw3360_init(const uint8_t dpi)
{
	const uint8_t *psrom = srom;

	SS_HIGH;
    124e:	28 9a       	sbi	0x05, 0	; 5
	delay_ms(3);
    1250:	ef ed       	ldi	r30, 0xDF	; 223
    1252:	fe e2       	ldi	r31, 0x2E	; 46
    1254:	31 97       	sbiw	r30, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <main+0xa2>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <main+0xa8>
    125a:	00 00       	nop

	// shutdown first
	SS_LOW;
    125c:	28 98       	cbi	0x05, 0	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    125e:	9b eb       	ldi	r25, 0xBB	; 187
    1260:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1262:	0d b4       	in	r0, 0x2d	; 45
    1264:	07 fe       	sbrs	r0, 7
    1266:	fd cf       	rjmp	.-6      	; 0x1262 <main+0xb0>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1268:	96 eb       	ldi	r25, 0xB6	; 182
    126a:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    126c:	0d b4       	in	r0, 0x2d	; 45
    126e:	07 fe       	sbrs	r0, 7
    1270:	fd cf       	rjmp	.-6      	; 0x126c <main+0xba>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    1272:	ef ec       	ldi	r30, 0xCF	; 207
    1274:	f2 e0       	ldi	r31, 0x02	; 2
    1276:	31 97       	sbiw	r30, 0x01	; 1
    1278:	f1 f7       	brne	.-4      	; 0x1276 <main+0xc4>
    127a:	00 c0       	rjmp	.+0      	; 0x127c <main+0xca>
    127c:	00 00       	nop
	delay_ms(3);

	// shutdown first
	SS_LOW;
	spi_write(0x3b, 0xb6);
	SS_HIGH;
    127e:	28 9a       	sbi	0x05, 0	; 5
	delay_ms(300);
    1280:	ff ef       	ldi	r31, 0xFF	; 255
    1282:	25 ea       	ldi	r18, 0xA5	; 165
    1284:	3e e0       	ldi	r19, 0x0E	; 14
    1286:	f1 50       	subi	r31, 0x01	; 1
    1288:	20 40       	sbci	r18, 0x00	; 0
    128a:	30 40       	sbci	r19, 0x00	; 0
    128c:	e1 f7       	brne	.-8      	; 0x1286 <main+0xd4>
    128e:	00 c0       	rjmp	.+0      	; 0x1290 <main+0xde>
    1290:	00 00       	nop

	// drop and raise ncs to reset spi port
	SS_LOW;
    1292:	28 98       	cbi	0x05, 0	; 5
	delay_us(40);
    1294:	95 ed       	ldi	r25, 0xD5	; 213
    1296:	9a 95       	dec	r25
    1298:	f1 f7       	brne	.-4      	; 0x1296 <main+0xe4>
    129a:	00 00       	nop
	SS_HIGH;
    129c:	28 9a       	sbi	0x05, 0	; 5
	delay_us(40);
    129e:	e5 ed       	ldi	r30, 0xD5	; 213
    12a0:	ea 95       	dec	r30
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <main+0xee>
    12a4:	00 00       	nop

	// power up reset
	SS_LOW;
    12a6:	28 98       	cbi	0x05, 0	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    12a8:	9a eb       	ldi	r25, 0xBA	; 186
    12aa:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    12ac:	0d b4       	in	r0, 0x2d	; 45
    12ae:	07 fe       	sbrs	r0, 7
    12b0:	fd cf       	rjmp	.-6      	; 0x12ac <main+0xfa>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    12b2:	9a e5       	ldi	r25, 0x5A	; 90
    12b4:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    12b6:	0d b4       	in	r0, 0x2d	; 45
    12b8:	07 fe       	sbrs	r0, 7
    12ba:	fd cf       	rjmp	.-6      	; 0x12b6 <main+0x104>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    12bc:	ef ec       	ldi	r30, 0xCF	; 207
    12be:	f2 e0       	ldi	r31, 0x02	; 2
    12c0:	31 97       	sbiw	r30, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <main+0x10e>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <main+0x114>
    12c6:	00 00       	nop
	delay_us(40);

	// power up reset
	SS_LOW;
	spi_write(0x3a, 0x5a);
	SS_HIGH;
    12c8:	28 9a       	sbi	0x05, 0	; 5
	delay_ms(50);
    12ca:	ff ef       	ldi	r31, 0xFF	; 255
    12cc:	20 e7       	ldi	r18, 0x70	; 112
    12ce:	32 e0       	ldi	r19, 0x02	; 2
    12d0:	f1 50       	subi	r31, 0x01	; 1
    12d2:	20 40       	sbci	r18, 0x00	; 0
    12d4:	30 40       	sbci	r19, 0x00	; 0
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <main+0x11e>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <main+0x128>
    12da:	00 00       	nop

	// read from 0x02 to 0x06
	SS_LOW;
    12dc:	28 98       	cbi	0x05, 0	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    12e2:	0d b4       	in	r0, 0x2d	; 45
    12e4:	07 fe       	sbrs	r0, 7
    12e6:	fd cf       	rjmp	.-6      	; 0x12e2 <main+0x130>
}

static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
    12e8:	ef e7       	ldi	r30, 0x7F	; 127
    12ea:	f2 e0       	ldi	r31, 0x02	; 2
    12ec:	31 97       	sbiw	r30, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <main+0x13a>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <main+0x140>
    12f2:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    12f4:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    12f6:	0d b4       	in	r0, 0x2d	; 45
    12f8:	07 fe       	sbrs	r0, 7
    12fa:	fd cf       	rjmp	.-6      	; 0x12f6 <main+0x144>
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    12fc:	9e b5       	in	r25, 0x2e	; 46
static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
	uint8_t data = spi_recv();
	delay_us(20);
    12fe:	fa e6       	ldi	r31, 0x6A	; 106
    1300:	fa 95       	dec	r31
    1302:	f1 f7       	brne	.-4      	; 0x1300 <main+0x14e>
    1304:	00 c0       	rjmp	.+0      	; 0x1306 <main+0x154>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1306:	93 e0       	ldi	r25, 0x03	; 3
    1308:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    130a:	0d b4       	in	r0, 0x2d	; 45
    130c:	07 fe       	sbrs	r0, 7
    130e:	fd cf       	rjmp	.-6      	; 0x130a <main+0x158>
}

static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
    1310:	ef e7       	ldi	r30, 0x7F	; 127
    1312:	f2 e0       	ldi	r31, 0x02	; 2
    1314:	31 97       	sbiw	r30, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <main+0x162>
    1318:	00 c0       	rjmp	.+0      	; 0x131a <main+0x168>
    131a:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    131c:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    131e:	0d b4       	in	r0, 0x2d	; 45
    1320:	07 fe       	sbrs	r0, 7
    1322:	fd cf       	rjmp	.-6      	; 0x131e <main+0x16c>
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    1324:	9e b5       	in	r25, 0x2e	; 46
static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
	uint8_t data = spi_recv();
	delay_us(20);
    1326:	fa e6       	ldi	r31, 0x6A	; 106
    1328:	fa 95       	dec	r31
    132a:	f1 f7       	brne	.-4      	; 0x1328 <main+0x176>
    132c:	00 c0       	rjmp	.+0      	; 0x132e <main+0x17c>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    132e:	94 e0       	ldi	r25, 0x04	; 4
    1330:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1332:	0d b4       	in	r0, 0x2d	; 45
    1334:	07 fe       	sbrs	r0, 7
    1336:	fd cf       	rjmp	.-6      	; 0x1332 <main+0x180>
}

static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
    1338:	ef e7       	ldi	r30, 0x7F	; 127
    133a:	f2 e0       	ldi	r31, 0x02	; 2
    133c:	31 97       	sbiw	r30, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <main+0x18a>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <main+0x190>
    1342:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1344:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    1346:	0d b4       	in	r0, 0x2d	; 45
    1348:	07 fe       	sbrs	r0, 7
    134a:	fd cf       	rjmp	.-6      	; 0x1346 <main+0x194>
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    134c:	9e b5       	in	r25, 0x2e	; 46
static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
	uint8_t data = spi_recv();
	delay_us(20);
    134e:	fa e6       	ldi	r31, 0x6A	; 106
    1350:	fa 95       	dec	r31
    1352:	f1 f7       	brne	.-4      	; 0x1350 <main+0x19e>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <main+0x1a4>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1356:	95 e0       	ldi	r25, 0x05	; 5
    1358:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    135a:	0d b4       	in	r0, 0x2d	; 45
    135c:	07 fe       	sbrs	r0, 7
    135e:	fd cf       	rjmp	.-6      	; 0x135a <main+0x1a8>
}

static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
    1360:	ef e7       	ldi	r30, 0x7F	; 127
    1362:	f2 e0       	ldi	r31, 0x02	; 2
    1364:	31 97       	sbiw	r30, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <main+0x1b2>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <main+0x1b8>
    136a:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    136c:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    136e:	0d b4       	in	r0, 0x2d	; 45
    1370:	07 fe       	sbrs	r0, 7
    1372:	fd cf       	rjmp	.-6      	; 0x136e <main+0x1bc>
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    1374:	9e b5       	in	r25, 0x2e	; 46
static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
	uint8_t data = spi_recv();
	delay_us(20);
    1376:	fa e6       	ldi	r31, 0x6A	; 106
    1378:	fa 95       	dec	r31
    137a:	f1 f7       	brne	.-4      	; 0x1378 <main+0x1c6>
    137c:	00 c0       	rjmp	.+0      	; 0x137e <main+0x1cc>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    137e:	96 e0       	ldi	r25, 0x06	; 6
    1380:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1382:	0d b4       	in	r0, 0x2d	; 45
    1384:	07 fe       	sbrs	r0, 7
    1386:	fd cf       	rjmp	.-6      	; 0x1382 <main+0x1d0>
}

static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
    1388:	ef e7       	ldi	r30, 0x7F	; 127
    138a:	f2 e0       	ldi	r31, 0x02	; 2
    138c:	31 97       	sbiw	r30, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <main+0x1da>
    1390:	00 c0       	rjmp	.+0      	; 0x1392 <main+0x1e0>
    1392:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1394:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    1396:	0d b4       	in	r0, 0x2d	; 45
    1398:	07 fe       	sbrs	r0, 7
    139a:	fd cf       	rjmp	.-6      	; 0x1396 <main+0x1e4>
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    139c:	9e b5       	in	r25, 0x2e	; 46
static inline uint8_t spi_read(const uint8_t addr)
{
	spi_send(addr);
	delay_us(160); // t_SRAD
	uint8_t data = spi_recv();
	delay_us(20);
    139e:	fa e6       	ldi	r31, 0x6A	; 106
    13a0:	fa 95       	dec	r31
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <main+0x1ee>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <main+0x1f4>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    13a6:	90 e9       	ldi	r25, 0x90	; 144
    13a8:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    13aa:	0d b4       	in	r0, 0x2d	; 45
    13ac:	07 fe       	sbrs	r0, 7
    13ae:	fd cf       	rjmp	.-6      	; 0x13aa <main+0x1f8>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    13b0:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    13b2:	0d b4       	in	r0, 0x2d	; 45
    13b4:	07 fe       	sbrs	r0, 7
    13b6:	fd cf       	rjmp	.-6      	; 0x13b2 <main+0x200>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    13b8:	ef ec       	ldi	r30, 0xCF	; 207
    13ba:	f2 e0       	ldi	r31, 0x02	; 2
    13bc:	31 97       	sbiw	r30, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <main+0x20a>
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <main+0x210>
    13c2:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    13c4:	93 e9       	ldi	r25, 0x93	; 147
    13c6:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    13c8:	0d b4       	in	r0, 0x2d	; 45
    13ca:	07 fe       	sbrs	r0, 7
    13cc:	fd cf       	rjmp	.-6      	; 0x13c8 <main+0x216>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    13ce:	9d e1       	ldi	r25, 0x1D	; 29
    13d0:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    13d2:	0d b4       	in	r0, 0x2d	; 45
    13d4:	07 fe       	sbrs	r0, 7
    13d6:	fd cf       	rjmp	.-6      	; 0x13d2 <main+0x220>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    13d8:	ef ec       	ldi	r30, 0xCF	; 207
    13da:	f2 e0       	ldi	r31, 0x02	; 2
    13dc:	31 97       	sbiw	r30, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <main+0x22a>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <main+0x230>
    13e2:	00 00       	nop
	spi_read(0x06);

	// srom download
	spi_write(0x10, 0x00);
	spi_write(0x13, 0x1d);
	SS_HIGH;
    13e4:	28 9a       	sbi	0x05, 0	; 5
	delay_ms(10);
    13e6:	ef e3       	ldi	r30, 0x3F	; 63
    13e8:	fc e9       	ldi	r31, 0x9C	; 156
    13ea:	31 97       	sbiw	r30, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <main+0x238>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <main+0x23e>
    13f0:	00 00       	nop
	SS_LOW;
    13f2:	28 98       	cbi	0x05, 0	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    13f4:	93 e9       	ldi	r25, 0x93	; 147
    13f6:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    13f8:	0d b4       	in	r0, 0x2d	; 45
    13fa:	07 fe       	sbrs	r0, 7
    13fc:	fd cf       	rjmp	.-6      	; 0x13f8 <main+0x246>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    13fe:	98 e1       	ldi	r25, 0x18	; 24
    1400:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1402:	0d b4       	in	r0, 0x2d	; 45
    1404:	07 fe       	sbrs	r0, 7
    1406:	fd cf       	rjmp	.-6      	; 0x1402 <main+0x250>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    1408:	ef ec       	ldi	r30, 0xCF	; 207
    140a:	f2 e0       	ldi	r31, 0x02	; 2
    140c:	31 97       	sbiw	r30, 0x01	; 1
    140e:	f1 f7       	brne	.-4      	; 0x140c <main+0x25a>
    1410:	00 c0       	rjmp	.+0      	; 0x1412 <main+0x260>
    1412:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1414:	92 ee       	ldi	r25, 0xE2	; 226
    1416:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1418:	0d b4       	in	r0, 0x2d	; 45
    141a:	07 fe       	sbrs	r0, 7
    141c:	fd cf       	rjmp	.-6      	; 0x1418 <main+0x266>
    141e:	ec ea       	ldi	r30, 0xAC	; 172
    1420:	f0 e0       	ldi	r31, 0x00	; 0
	SS_LOW;
	spi_write(0x13, 0x18);

	spi_send(0x62 | 0x80);
	for (uint16_t i = 0; i < SROM_LENGTH; i++) {
		delay_us(16);
    1422:	25 e5       	ldi	r18, 0x55	; 85
    1424:	2a 95       	dec	r18
    1426:	f1 f7       	brne	.-4      	; 0x1424 <main+0x272>
    1428:	00 00       	nop
		spi_send(pgm_read_byte(psrom++));
    142a:	94 91       	lpm	r25, Z
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    142c:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    142e:	0d b4       	in	r0, 0x2d	; 45
    1430:	07 fe       	sbrs	r0, 7
    1432:	fd cf       	rjmp	.-6      	; 0x142e <main+0x27c>
    1434:	31 96       	adiw	r30, 0x01	; 1
	delay_ms(10);
	SS_LOW;
	spi_write(0x13, 0x18);

	spi_send(0x62 | 0x80);
	for (uint16_t i = 0; i < SROM_LENGTH; i++) {
    1436:	30 e1       	ldi	r19, 0x10	; 16
    1438:	ea 3a       	cpi	r30, 0xAA	; 170
    143a:	f3 07       	cpc	r31, r19
    143c:	91 f7       	brne	.-28     	; 0x1422 <main+0x270>
		delay_us(16);
		spi_send(pgm_read_byte(psrom++));
	}
	delay_us(18);
    143e:	90 e6       	ldi	r25, 0x60	; 96
    1440:	9a 95       	dec	r25
    1442:	f1 f7       	brne	.-4      	; 0x1440 <main+0x28e>
	SS_HIGH;
    1444:	28 9a       	sbi	0x05, 0	; 5
	delay_us(200);
    1446:	ef e1       	ldi	r30, 0x1F	; 31
    1448:	f3 e0       	ldi	r31, 0x03	; 3
    144a:	31 97       	sbiw	r30, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <main+0x298>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <main+0x29e>
    1450:	00 00       	nop

	// configuration/settings
	SS_LOW;
    1452:	28 98       	cbi	0x05, 0	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1454:	90 e9       	ldi	r25, 0x90	; 144
    1456:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1458:	0d b4       	in	r0, 0x2d	; 45
    145a:	07 fe       	sbrs	r0, 7
    145c:	fd cf       	rjmp	.-6      	; 0x1458 <main+0x2a6>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    145e:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    1460:	0d b4       	in	r0, 0x2d	; 45
    1462:	07 fe       	sbrs	r0, 7
    1464:	fd cf       	rjmp	.-6      	; 0x1460 <main+0x2ae>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    1466:	ef ec       	ldi	r30, 0xCF	; 207
    1468:	f2 e0       	ldi	r31, 0x02	; 2
    146a:	31 97       	sbiw	r30, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <main+0x2b8>
    146e:	00 c0       	rjmp	.+0      	; 0x1470 <main+0x2be>
    1470:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1472:	9d e8       	ldi	r25, 0x8D	; 141
    1474:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1476:	0d b4       	in	r0, 0x2d	; 45
    1478:	07 fe       	sbrs	r0, 7
    147a:	fd cf       	rjmp	.-6      	; 0x1476 <main+0x2c4>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    147c:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    147e:	0d b4       	in	r0, 0x2d	; 45
    1480:	07 fe       	sbrs	r0, 7
    1482:	fd cf       	rjmp	.-6      	; 0x147e <main+0x2cc>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    1484:	ef ec       	ldi	r30, 0xCF	; 207
    1486:	f2 e0       	ldi	r31, 0x02	; 2
    1488:	31 97       	sbiw	r30, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <main+0x2d6>
    148c:	00 c0       	rjmp	.+0      	; 0x148e <main+0x2dc>
    148e:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1490:	91 e9       	ldi	r25, 0x91	; 145
    1492:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    1494:	0d b4       	in	r0, 0x2d	; 45
    1496:	07 fe       	sbrs	r0, 7
    1498:	fd cf       	rjmp	.-6      	; 0x1494 <main+0x2e2>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    149a:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    149c:	0d b4       	in	r0, 0x2d	; 45
    149e:	07 fe       	sbrs	r0, 7
    14a0:	fd cf       	rjmp	.-6      	; 0x149c <main+0x2ea>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    14a2:	ef ec       	ldi	r30, 0xCF	; 207
    14a4:	f2 e0       	ldi	r31, 0x02	; 2
    14a6:	31 97       	sbiw	r30, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <main+0x2f4>
    14aa:	00 c0       	rjmp	.+0      	; 0x14ac <main+0x2fa>
    14ac:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    14ae:	9f e8       	ldi	r25, 0x8F	; 143
    14b0:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & (1<<SPIF)));
    14b2:	0d b4       	in	r0, 0x2d	; 45
    14b4:	07 fe       	sbrs	r0, 7
    14b6:	fd cf       	rjmp	.-6      	; 0x14b2 <main+0x300>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    14b8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    14ba:	0d b4       	in	r0, 0x2d	; 45
    14bc:	07 fe       	sbrs	r0, 7
    14be:	fd cf       	rjmp	.-6      	; 0x14ba <main+0x308>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    14c0:	8f ec       	ldi	r24, 0xCF	; 207
    14c2:	92 e0       	ldi	r25, 0x02	; 2
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <main+0x312>
    14c8:	00 c0       	rjmp	.+0      	; 0x14ca <main+0x318>
    14ca:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    14cc:	83 ee       	ldi	r24, 0xE3	; 227
    14ce:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    14d0:	0d b4       	in	r0, 0x2d	; 45
    14d2:	07 fe       	sbrs	r0, 7
    14d4:	fd cf       	rjmp	.-6      	; 0x14d0 <main+0x31e>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    14d6:	82 e0       	ldi	r24, 0x02	; 2
    14d8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    14da:	0d b4       	in	r0, 0x2d	; 45
    14dc:	07 fe       	sbrs	r0, 7
    14de:	fd cf       	rjmp	.-6      	; 0x14da <main+0x328>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    14e0:	ef ec       	ldi	r30, 0xCF	; 207
    14e2:	f2 e0       	ldi	r31, 0x02	; 2
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <main+0x332>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <main+0x338>
    14ea:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    14ec:	8b ea       	ldi	r24, 0xAB	; 171
    14ee:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    14f0:	0d b4       	in	r0, 0x2d	; 45
    14f2:	07 fe       	sbrs	r0, 7
    14f4:	fd cf       	rjmp	.-6      	; 0x14f0 <main+0x33e>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    14f6:	80 e1       	ldi	r24, 0x10	; 16
    14f8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    14fa:	0d b4       	in	r0, 0x2d	; 45
    14fc:	07 fe       	sbrs	r0, 7
    14fe:	fd cf       	rjmp	.-6      	; 0x14fa <main+0x348>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    1500:	8f ec       	ldi	r24, 0xCF	; 207
    1502:	92 e0       	ldi	r25, 0x02	; 2
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <main+0x352>
    1508:	00 c0       	rjmp	.+0      	; 0x150a <main+0x358>
    150a:	00 00       	nop
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    150c:	8c ea       	ldi	r24, 0xAC	; 172
    150e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    1510:	0d b4       	in	r0, 0x2d	; 45
    1512:	07 fe       	sbrs	r0, 7
    1514:	fd cf       	rjmp	.-6      	; 0x1510 <main+0x35e>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    151a:	0d b4       	in	r0, 0x2d	; 45
    151c:	07 fe       	sbrs	r0, 7
    151e:	fd cf       	rjmp	.-6      	; 0x151a <main+0x368>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    1520:	ef ec       	ldi	r30, 0xCF	; 207
    1522:	f2 e0       	ldi	r31, 0x02	; 2
    1524:	31 97       	sbiw	r30, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <main+0x372>
    1528:	00 c0       	rjmp	.+0      	; 0x152a <main+0x378>
    152a:	00 00       	nop
	spi_write(0x0f, dpi); // DPI
	// LOD Stuff
	spi_write(0x63, 0x02); // LOD: 0x00 disable lift detection, 0x02 = 2mm, 0x03 = 3mm
	spi_write(0x2b, 0x10); // Minimum SQUAL for zero motion data (default: 0x10)
	spi_write(0x2c, 0x0a); // Minimum Valid features (reduce SQUAL score) (default: 0x0a)
	SS_HIGH;
    152c:	28 9a       	sbi	0x05, 0	; 5
	delay_us(200);
    152e:	8f e1       	ldi	r24, 0x1F	; 31
    1530:	93 e0       	ldi	r25, 0x03	; 3
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <main+0x380>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <main+0x386>
    1538:	00 00       	nop
}

// angle snapping
static void angle_init(const uint8_t angle) {
	SS_LOW;
    153a:	28 98       	cbi	0x05, 0	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    153c:	82 ec       	ldi	r24, 0xC2	; 194
    153e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
    1540:	0d b4       	in	r0, 0x2d	; 45
    1542:	07 fe       	sbrs	r0, 7
    1544:	fd cf       	rjmp	.-6      	; 0x1540 <main+0x38e>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    1546:	1e bc       	out	0x2e, r1	; 46
	while (!(SPSR & (1<<SPIF)));
    1548:	0d b4       	in	r0, 0x2d	; 45
    154a:	07 fe       	sbrs	r0, 7
    154c:	fd cf       	rjmp	.-6      	; 0x1548 <main+0x396>

static inline void spi_write(const uint8_t addr, const uint8_t data)
{
	spi_send(addr | 0x80);
	spi_send(data);
	delay_us(180); // maximum of t_SWW, t_SWR
    154e:	ef ec       	ldi	r30, 0xCF	; 207
    1550:	f2 e0       	ldi	r31, 0x02	; 2
    1552:	31 97       	sbiw	r30, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <main+0x3a0>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <main+0x3a6>
    1558:	00 00       	nop

// angle snapping
static void angle_init(const uint8_t angle) {
	SS_LOW;
	spi_write(0x42, angle); // Angle snapping: 0x00 = off, 0x80 = on
	SS_HIGH;
    155a:	28 9a       	sbi	0x05, 0	; 5
	pmw3360_init(dpis[dpi_index]);

	// Init angle snapping
	angle_init(angles[angle_index]);
	
	usb_init();
    155c:	1a d2       	rcall	.+1076   	; 0x1992 <usb_init>
	while (!usb_configured());
    155e:	30 d2       	rcall	.+1120   	; 0x19c0 <usb_configured>
    1560:	88 23       	and	r24, r24
    1562:	e9 f3       	breq	.-6      	; 0x155e <main+0x3ac>
	delay_ms(456); // arbitrary
    1564:	ff ef       	ldi	r31, 0xFF	; 255
    1566:	23 e4       	ldi	r18, 0x43	; 67
    1568:	36 e1       	ldi	r19, 0x16	; 22
    156a:	f1 50       	subi	r31, 0x01	; 1
    156c:	20 40       	sbci	r18, 0x00	; 0
    156e:	30 40       	sbci	r19, 0x00	; 0
    1570:	e1 f7       	brne	.-8      	; 0x156a <main+0x3b8>
    1572:	00 c0       	rjmp	.+0      	; 0x1574 <main+0x3c2>
    1574:	00 00       	nop

	// set up timer0 to set OCF0A in TIFR0 every 125us
	TCCR0A = 0x02; // CTC
    1576:	82 e0       	ldi	r24, 0x02	; 2
    1578:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x02; // prescaler 1/8 = 1us period
    157a:	85 bd       	out	0x25, r24	; 37
	OCR0A = 124; // = 125 - 1
    157c:	8c e7       	ldi	r24, 0x7C	; 124
    157e:	87 bd       	out	0x27, r24	; 39

	cli();
    1580:	f8 94       	cli

	// previous state to compare against for debouncing
	uint8_t btn_prev = (~PIND) & 0b00111111; // read L, R, M, FSB, RSB, DPI
	// time (in 125us) button has been unpressed.
	// consider button to be released if this time exceeds DEBOUNCE_TIME.
	uint8_t btn_time[8] = {0, 0, 0, 0, 0, 0, 0, 0};
    1582:	18 86       	std	Y+8, r1	; 0x08
    1584:	1f 82       	std	Y+7, r1	; 0x07
    1586:	1b 82       	std	Y+3, r1	; 0x03
    1588:	1c 82       	std	Y+4, r1	; 0x04
    158a:	1d 82       	std	Y+5, r1	; 0x05
    158c:	1e 82       	std	Y+6, r1	; 0x06
		__asm__ volatile ("jmp 0x7e00");
	
	// wheel stuff
	uint8_t whl_prev_same = 0; // what A was the last time A == B
	uint8_t whl_prev_diff = 0; // what A was the last time A != B
	int8_t whl = 0; // scrolls since previous usb transmission
    158e:	00 e0       	ldi	r16, 0x00	; 0
	if (!(PIND & (1<<2)))
		__asm__ volatile ("jmp 0x7e00");
	
	// wheel stuff
	uint8_t whl_prev_same = 0; // what A was the last time A == B
	uint8_t whl_prev_diff = 0; // what A was the last time A != B
    1590:	19 86       	std	Y+9, r1	; 0x09
	delay_ms(50);
	if (!(PIND & (1<<2)))
		__asm__ volatile ("jmp 0x7e00");
	
	// wheel stuff
	uint8_t whl_prev_same = 0; // what A was the last time A == B
    1592:	1a 86       	std	Y+10, r1	; 0x0a
	uint8_t p2_led_brightness = 4;
	uint8_t p3_led_brightness = 4;
	// binary OR of all button states since previous usb transmission
	uint8_t btn_usb = 0x00;
	// previously transmitted button state
	uint8_t btn_usb_prev = 0x00;
    1594:	41 2c       	mov	r4, r1
	uint8_t p3_led_colour = 4; // Purple
	uint8_t p1_led_brightness = 4; // 0 = 0, 1 = 0.25, 2 = 0.5, 3 = 0.75, 4 = 1
	uint8_t p2_led_brightness = 4;
	uint8_t p3_led_brightness = 4;
	// binary OR of all button states since previous usb transmission
	uint8_t btn_usb = 0x00;
    1596:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t led_g_value = 0; // Green LED brightness: 0-255
	uint8_t led_b_value = 0; // Blue LED brightness: 0-255
	// RGB Colour Selection
	uint8_t led_colours_index = 1;
	uint8_t led_colours[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
	uint8_t led_colour = led_colours[led_colours_index]; 
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	99 83       	std	Y+1, r25	; 0x01
	uint8_t btn_time[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	// RGB Timers
	uint8_t led_max_timer = 16; // Timer maximum
	uint8_t led_r_timer = 0; // Red LED Timer initial value
	uint8_t led_g_timer = 0; // Green LED Timer initial value
	uint8_t led_b_timer = 0; // Blue LED Timer initial value
    159c:	71 2c       	mov	r7, r1
	// consider button to be released if this time exceeds DEBOUNCE_TIME.
	uint8_t btn_time[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	// RGB Timers
	uint8_t led_max_timer = 16; // Timer maximum
	uint8_t led_r_timer = 0; // Red LED Timer initial value
	uint8_t led_g_timer = 0; // Green LED Timer initial value
    159e:	81 2c       	mov	r8, r1
	// time (in 125us) button has been unpressed.
	// consider button to be released if this time exceeds DEBOUNCE_TIME.
	uint8_t btn_time[8] = {0, 0, 0, 0, 0, 0, 0, 0};
	// RGB Timers
	uint8_t led_max_timer = 16; // Timer maximum
	uint8_t led_r_timer = 0; // Red LED Timer initial value
    15a0:	91 2c       	mov	r9, r1
    15a2:	e4 2c       	mov	r14, r4
    15a4:	46 2c       	mov	r4, r6
    15a6:	6f 2c       	mov	r6, r15
	TCCR0B = 0x02; // prescaler 1/8 = 1us period
	OCR0A = 124; // = 125 - 1

	cli();
	while (1) {
		for (uint8_t i = 0; i < 8; i++) {
    15a8:	f1 2c       	mov	r15, r1
    15aa:	fc 86       	std	Y+12, r15	; 0x0c
    15ac:	fe 2c       	mov	r15, r14
		// synchronization to usb frames and 125us intervals
			// polling interrupt flags gives 5 clock cycles or so of
			// jitter. possible to eliminate by going into sleep
			// mode and waking up using interrupts, but whatever.
			if (i == 0) {
    15ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    15b0:	ee 23       	and	r30, r30
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <main+0x404>
    15b4:	5b c1       	rjmp	.+694    	; 0x186c <main+0x6ba>
    15b6:	8c 85       	ldd	r24, Y+12	; 0x0c
				// reset prescaler phase, not really necessary
				GTCCR |= (1<<PSRSYNC);
				TCNT0 = 0;
			} else {
				// sync to 125us intervals using timer0
				while (!(TIFR0 & (1<<OCF0A)));
    15b8:	a9 9b       	sbis	0x15, 1	; 21
    15ba:	fe cf       	rjmp	.-4      	; 0x15b8 <main+0x406>
    15bc:	8c 87       	std	Y+12, r24	; 0x0c
			}
			TIFR0 |= (1<<OCF0A); // 0CF0A is cleared by writing 1
    15be:	a9 9a       	sbi	0x15, 1	; 21
				led_r_value = 180;
				led_g_value = 255;
				led_b_value = 255;
			}
			// Red
			if (led_colour == 2) {
    15c0:	29 81       	ldd	r18, Y+1	; 0x01
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <main+0x416>
    15c6:	66 c1       	rjmp	.+716    	; 0x1894 <main+0x6e2>
				led_r_value = 255;
				led_g_value = 0;
				led_b_value = 0;
			}
			// Pink
			if (led_colour == 3) {
    15c8:	23 30       	cpi	r18, 0x03	; 3
    15ca:	09 f4       	brne	.+2      	; 0x15ce <main+0x41c>
    15cc:	b8 c1       	rjmp	.+880    	; 0x193e <main+0x78c>
				led_r_value = 255;
				led_g_value = 0;
				led_b_value = 60;
			}
			// Magenta
			if (led_colour == 4) {
    15ce:	24 30       	cpi	r18, 0x04	; 4
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <main+0x422>
    15d2:	d5 c1       	rjmp	.+938    	; 0x197e <main+0x7cc>
				led_r_value = 255;
				led_g_value = 0;
				led_b_value = 255;
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	88 e7       	ldi	r24, 0x78	; 120
    15de:	91 e4       	ldi	r25, 0x41	; 65
    15e0:	d9 d3       	rcall	.+1970   	; 0x1d94 <__fixunssfsi>
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	03 d4       	rcall	.+2054   	; 0x1df0 <__floatsisf>
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	6c d3       	rcall	.+1752   	; 0x1ccc <__addsf3>
    15f4:	cf d3       	rcall	.+1950   	; 0x1d94 <__fixunssfsi>
    15f6:	e6 2e       	mov	r14, r22
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	9f e3       	ldi	r25, 0x3F	; 63
    1600:	c9 d3       	rcall	.+1938   	; 0x1d94 <__fixunssfsi>
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	f3 d3       	rcall	.+2022   	; 0x1df0 <__floatsisf>
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	5f e3       	ldi	r21, 0x3F	; 63
    1612:	5c d3       	rcall	.+1720   	; 0x1ccc <__addsf3>
    1614:	bf d3       	rcall	.+1918   	; 0x1d94 <__fixunssfsi>
    1616:	6b 87       	std	Y+11, r22	; 0x0b
    1618:	69 81       	ldd	r22, Y+1	; 0x01
    161a:	62 95       	swap	r22
    161c:	6f 70       	andi	r22, 0x0F	; 15
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	e5 d3       	rcall	.+1994   	; 0x1df0 <__floatsisf>
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	4e d3       	rcall	.+1692   	; 0x1ccc <__addsf3>
    1630:	b1 d3       	rcall	.+1890   	; 0x1d94 <__fixunssfsi>
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	db d3       	rcall	.+1974   	; 0x1df0 <__floatsisf>
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	44 d3       	rcall	.+1672   	; 0x1ccc <__addsf3>
    1644:	a7 d3       	rcall	.+1870   	; 0x1d94 <__fixunssfsi>
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	2e 0d       	add	r18, r14
    164a:	9b 85       	ldd	r25, Y+11	; 0x0b
    164c:	9f 5f       	subi	r25, 0xFF	; 255
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	86 0f       	add	r24, r22
			uint8_t led_g_off = (led_g_on + 1);
			uint8_t led_b_off = (led_b_on + 1);
			
			// Red LED PWM
			// Turn off LED if led_x_on is 0
			if (led_r_on == 0) {
    1652:	ee 20       	and	r14, r14
    1654:	09 f4       	brne	.+2      	; 0x1658 <main+0x4a6>
    1656:	2c c1       	rjmp	.+600    	; 0x18b0 <main+0x6fe>
				PORTB |= (1<<5);
			}
			// If led_x_on is greater than zero, enable the timer
			if (led_r_on > 0) {
				// LED Timer
				led_r_timer++;
    1658:	93 94       	inc	r9
				// Reset Timer
				if (led_r_timer == led_max_timer) {
    165a:	f0 e1       	ldi	r31, 0x10	; 16
    165c:	9f 16       	cp	r9, r31
    165e:	09 f4       	brne	.+2      	; 0x1662 <main+0x4b0>
    1660:	88 c1       	rjmp	.+784    	; 0x1972 <main+0x7c0>
					led_r_timer = 0;
				}
				// Turn on LED at led_x_on value
				if (led_r_timer <= led_r_on) {
    1662:	e9 14       	cp	r14, r9
    1664:	08 f0       	brcs	.+2      	; 0x1668 <main+0x4b6>
    1666:	86 c1       	rjmp	.+780    	; 0x1974 <main+0x7c2>
					PORTB &= ~(1<<5);
				}
				// Turn off LED at led_x_off value
				if (led_r_timer >= led_r_off) {
    1668:	92 16       	cp	r9, r18
    166a:	08 f0       	brcs	.+2      	; 0x166e <main+0x4bc>
    166c:	21 c1       	rjmp	.+578    	; 0x18b0 <main+0x6fe>
				}
			}
			
			// Green LED PWM
			// Turn off LED if led_x_on is 0
			if (led_g_on == 0) {
    166e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1670:	ee 23       	and	r30, r30
    1672:	09 f4       	brne	.+2      	; 0x1676 <main+0x4c4>
    1674:	1b c1       	rjmp	.+566    	; 0x18ac <main+0x6fa>
				PORTB |= (1<<6);
			}
			// If led_x_on is greater than zero, enable the timer
			if (led_g_on > 0) {
				// LED Timer
				led_g_timer++;
    1676:	83 94       	inc	r8
				// Reset Timer
				if (led_g_timer == led_max_timer) {
    1678:	20 e1       	ldi	r18, 0x10	; 16
    167a:	82 16       	cp	r8, r18
    167c:	09 f4       	brne	.+2      	; 0x1680 <main+0x4ce>
    167e:	7c c1       	rjmp	.+760    	; 0x1978 <main+0x7c6>
					led_g_timer = 0;
				}
				// Turn on LED at led_x_on value
				if (led_g_timer <= led_g_on) {
    1680:	fb 85       	ldd	r31, Y+11	; 0x0b
    1682:	f8 15       	cp	r31, r8
    1684:	08 f0       	brcs	.+2      	; 0x1688 <main+0x4d6>
    1686:	79 c1       	rjmp	.+754    	; 0x197a <main+0x7c8>
					PORTB &= ~(1<<6);
				}
				// Turn off LED at led_x_off value
				if (led_g_timer >= led_g_off) {
    1688:	89 16       	cp	r8, r25
    168a:	08 f0       	brcs	.+2      	; 0x168e <main+0x4dc>
    168c:	0f c1       	rjmp	.+542    	; 0x18ac <main+0x6fa>
				}
			}
			
			// Blue LED PWM
			// Turn off LED if led_x_on is 0
			if (led_b_on == 0) {
    168e:	66 23       	and	r22, r22
    1690:	09 f4       	brne	.+2      	; 0x1694 <main+0x4e2>
    1692:	0a c1       	rjmp	.+532    	; 0x18a8 <main+0x6f6>
				PORTD |= (1<<7);
			}
			// If led_x_on is greater than zero, enable the timer
			if (led_b_on > 0) {
				// LED Timer
				led_b_timer++;
    1694:	73 94       	inc	r7
				// Reset Timer
				if (led_b_timer == led_max_timer) {
    1696:	30 e1       	ldi	r19, 0x10	; 16
    1698:	73 16       	cp	r7, r19
    169a:	09 f4       	brne	.+2      	; 0x169e <main+0x4ec>
    169c:	67 c1       	rjmp	.+718    	; 0x196c <main+0x7ba>
					led_b_timer = 0;
				}
				// Turn on LED at led_x_on value
				if (led_b_timer <= led_b_on) {
    169e:	67 15       	cp	r22, r7
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <main+0x4f2>
    16a2:	65 c1       	rjmp	.+714    	; 0x196e <main+0x7bc>
					PORTD &= ~(1<<7);
				}
				// Turn off LED at led_x_off value
				if (led_b_timer >= led_b_off) {
    16a4:	78 16       	cp	r7, r24
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <main+0x4f8>
    16a8:	ff c0       	rjmp	.+510    	; 0x18a8 <main+0x6f6>
				}
			}
			
		// sensor stuff
			union motion_data _x, _y;
			SS_LOW;
    16aa:	28 98       	cbi	0x05, 0	; 5
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    16ac:	20 e5       	ldi	r18, 0x50	; 80
    16ae:	2e bd       	out	0x2e, r18	; 46
    16b0:	8c 85       	ldd	r24, Y+12	; 0x0c
	while (!(SPSR & (1<<SPIF)));
    16b2:	0d b4       	in	r0, 0x2d	; 45
    16b4:	07 fe       	sbrs	r0, 7
    16b6:	fd cf       	rjmp	.-6      	; 0x16b2 <main+0x500>
    16b8:	8c 87       	std	Y+12, r24	; 0x0c
			
		// sensor stuff
			union motion_data _x, _y;
			SS_LOW;
			spi_send(0x50);
			delay_us(35);
    16ba:	3a eb       	ldi	r19, 0xBA	; 186
    16bc:	3a 95       	dec	r19
    16be:	f1 f7       	brne	.-4      	; 0x16bc <main+0x50a>
    16c0:	00 c0       	rjmp	.+0      	; 0x16c2 <main+0x510>
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    16c2:	1e bc       	out	0x2e, r1	; 46
    16c4:	8c 85       	ldd	r24, Y+12	; 0x0c
	while (!(SPSR & (1<<SPIF)));
    16c6:	0d b4       	in	r0, 0x2d	; 45
    16c8:	07 fe       	sbrs	r0, 7
    16ca:	fd cf       	rjmp	.-6      	; 0x16c6 <main+0x514>
    16cc:	8c 87       	std	Y+12, r24	; 0x0c
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    16ce:	1e bc       	out	0x2e, r1	; 46
    16d0:	8c 85       	ldd	r24, Y+12	; 0x0c
	while (!(SPSR & (1<<SPIF)));
    16d2:	0d b4       	in	r0, 0x2d	; 45
    16d4:	07 fe       	sbrs	r0, 7
    16d6:	fd cf       	rjmp	.-6      	; 0x16d2 <main+0x520>
    16d8:	8c 87       	std	Y+12, r24	; 0x0c
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    16da:	1e bc       	out	0x2e, r1	; 46
    16dc:	8c 85       	ldd	r24, Y+12	; 0x0c
	while (!(SPSR & (1<<SPIF)));
    16de:	0d b4       	in	r0, 0x2d	; 45
    16e0:	07 fe       	sbrs	r0, 7
    16e2:	fd cf       	rjmp	.-6      	; 0x16de <main+0x52c>
    16e4:	8c 87       	std	Y+12, r24	; 0x0c
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    16e6:	8e b5       	in	r24, 0x2e	; 46
			SS_LOW;
			spi_send(0x50);
			delay_us(35);
			spi_send(0x00); // motion, not used
			spi_send(0x00); // observation, not used
			_x.lo = spi_recv();
    16e8:	c8 2e       	mov	r12, r24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    16ea:	1e bc       	out	0x2e, r1	; 46
    16ec:	8c 85       	ldd	r24, Y+12	; 0x0c
	while (!(SPSR & (1<<SPIF)));
    16ee:	0d b4       	in	r0, 0x2d	; 45
    16f0:	07 fe       	sbrs	r0, 7
    16f2:	fd cf       	rjmp	.-6      	; 0x16ee <main+0x53c>
    16f4:	8c 87       	std	Y+12, r24	; 0x0c
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    16f6:	8e b5       	in	r24, 0x2e	; 46
			spi_send(0x50);
			delay_us(35);
			spi_send(0x00); // motion, not used
			spi_send(0x00); // observation, not used
			_x.lo = spi_recv();
			_x.hi = spi_recv();
    16f8:	d8 2e       	mov	r13, r24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    16fa:	1e bc       	out	0x2e, r1	; 46
    16fc:	8c 85       	ldd	r24, Y+12	; 0x0c
	while (!(SPSR & (1<<SPIF)));
    16fe:	0d b4       	in	r0, 0x2d	; 45
    1700:	07 fe       	sbrs	r0, 7
    1702:	fd cf       	rjmp	.-6      	; 0x16fe <main+0x54c>
    1704:	8c 87       	std	Y+12, r24	; 0x0c
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    1706:	8e b5       	in	r24, 0x2e	; 46
			delay_us(35);
			spi_send(0x00); // motion, not used
			spi_send(0x00); // observation, not used
			_x.lo = spi_recv();
			_x.hi = spi_recv();
			_y.lo = spi_recv();
    1708:	a8 2e       	mov	r10, r24
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA);
}

static inline void spi_send(const uint8_t b)
{
	SPDR = b;
    170a:	1e bc       	out	0x2e, r1	; 46
    170c:	8c 85       	ldd	r24, Y+12	; 0x0c
	while (!(SPSR & (1<<SPIF)));
    170e:	0d b4       	in	r0, 0x2d	; 45
    1710:	07 fe       	sbrs	r0, 7
    1712:	fd cf       	rjmp	.-6      	; 0x170e <main+0x55c>
    1714:	8c 87       	std	Y+12, r24	; 0x0c
}

static inline uint8_t spi_recv(void)
{
	spi_send(0x00);
	return SPDR;
    1716:	8e b5       	in	r24, 0x2e	; 46
			spi_send(0x00); // motion, not used
			spi_send(0x00); // observation, not used
			_x.lo = spi_recv();
			_x.hi = spi_recv();
			_y.lo = spi_recv();
			_y.hi = spi_recv();
    1718:	b8 2e       	mov	r11, r24
			SS_HIGH;
    171a:	28 9a       	sbi	0x05, 0	; 5

		// wheel stuff
			int8_t _whl = 0; // number of scrolls this 125us
			const uint8_t whl_a = WHL_A_IS_HIGH;
    171c:	86 b1       	in	r24, 0x06	; 6
    171e:	86 fb       	bst	r24, 6
    1720:	88 27       	eor	r24, r24
    1722:	80 f9       	bld	r24, 0
			const uint8_t whl_b = WHL_B_IS_HIGH;
    1724:	96 b1       	in	r25, 0x06	; 6
    1726:	99 1f       	adc	r25, r25
    1728:	99 27       	eor	r25, r25
    172a:	99 1f       	adc	r25, r25
			// calculate number of scrolls
			if (whl_a != whl_b)
    172c:	89 17       	cp	r24, r25
    172e:	09 f4       	brne	.+2      	; 0x1732 <main+0x580>
    1730:	09 c1       	rjmp	.+530    	; 0x1944 <main+0x792>
    1732:	89 87       	std	Y+9, r24	; 0x09
			_y.lo = spi_recv();
			_y.hi = spi_recv();
			SS_HIGH;

		// wheel stuff
			int8_t _whl = 0; // number of scrolls this 125us
    1734:	e1 2c       	mov	r14, r1
			//high = not pressed, low = pressed
			//PIND 0 EIFR 0: low, no edges -> is low
			//PIND 0 EIFR 1: low, edge -> is low
			//PIND 1 EIFR 0: high, no edges -> always high during last 125us
			//PIND 1 EIFR 1: high, edge -> low at some point in the last 125us
			const uint8_t btn_unpressed = PIND & (~(EIFR) | 0b00110000);
    1736:	99 b1       	in	r25, 0x09	; 9
    1738:	8c b3       	in	r24, 0x1c	; 28
    173a:	80 95       	com	r24
    173c:	80 63       	ori	r24, 0x30	; 48
    173e:	89 23       	and	r24, r25
			EIFR = 0b00001111; // clear EIFR
    1740:	ef e0       	ldi	r30, 0x0F	; 15
    1742:	ec bb       	out	0x1c, r30	; 28
			} else { \
				btn_time[index] = 0; \
				btn_dbncd |= (~btn_unpressed) & (1<<index); \
			}

			DEBOUNCE(0); // L
    1744:	58 2f       	mov	r21, r24
    1746:	51 70       	andi	r21, 0x01	; 1
    1748:	60 fe       	sbrs	r6, 0
    174a:	d7 c0       	rjmp	.+430    	; 0x18fa <main+0x748>
    174c:	80 ff       	sbrs	r24, 0
    174e:	d5 c0       	rjmp	.+426    	; 0x18fa <main+0x748>
    1750:	fe 81       	ldd	r31, Y+6	; 0x06
    1752:	ff 5f       	subi	r31, 0xFF	; 255
    1754:	fe 83       	std	Y+6, r31	; 0x06
    1756:	51 e0       	ldi	r21, 0x01	; 1
    1758:	f0 32       	cpi	r31, 0x20	; 32
    175a:	08 f0       	brcs	.+2      	; 0x175e <main+0x5ac>
    175c:	50 e0       	ldi	r21, 0x00	; 0
			DEBOUNCE(1); // R
    175e:	61 fe       	sbrs	r6, 1
    1760:	c6 c0       	rjmp	.+396    	; 0x18ee <main+0x73c>
    1762:	81 ff       	sbrs	r24, 1
    1764:	c4 c0       	rjmp	.+392    	; 0x18ee <main+0x73c>
    1766:	3d 81       	ldd	r19, Y+5	; 0x05
    1768:	3f 5f       	subi	r19, 0xFF	; 255
    176a:	3d 83       	std	Y+5, r19	; 0x05
    176c:	30 32       	cpi	r19, 0x20	; 32
    176e:	08 f4       	brcc	.+2      	; 0x1772 <main+0x5c0>
    1770:	52 60       	ori	r21, 0x02	; 2
			DEBOUNCE(2); // M
    1772:	62 fe       	sbrs	r6, 2
    1774:	b6 c0       	rjmp	.+364    	; 0x18e2 <main+0x730>
    1776:	82 ff       	sbrs	r24, 2
    1778:	b4 c0       	rjmp	.+360    	; 0x18e2 <main+0x730>
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	9f 5f       	subi	r25, 0xFF	; 255
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	90 32       	cpi	r25, 0x20	; 32
    1782:	08 f4       	brcc	.+2      	; 0x1786 <main+0x5d4>
    1784:	54 60       	ori	r21, 0x04	; 4
			DEBOUNCE(3); // RSB
    1786:	63 fe       	sbrs	r6, 3
    1788:	a6 c0       	rjmp	.+332    	; 0x18d6 <main+0x724>
    178a:	83 ff       	sbrs	r24, 3
    178c:	a4 c0       	rjmp	.+328    	; 0x18d6 <main+0x724>
    178e:	eb 81       	ldd	r30, Y+3	; 0x03
    1790:	ef 5f       	subi	r30, 0xFF	; 255
    1792:	eb 83       	std	Y+3, r30	; 0x03
    1794:	e0 32       	cpi	r30, 0x20	; 32
    1796:	08 f4       	brcc	.+2      	; 0x179a <main+0x5e8>
    1798:	58 60       	ori	r21, 0x08	; 8
			DEBOUNCE(4); // FSB
    179a:	64 fe       	sbrs	r6, 4
    179c:	96 c0       	rjmp	.+300    	; 0x18ca <main+0x718>
    179e:	84 ff       	sbrs	r24, 4
    17a0:	94 c0       	rjmp	.+296    	; 0x18ca <main+0x718>
    17a2:	ff 81       	ldd	r31, Y+7	; 0x07
    17a4:	ff 5f       	subi	r31, 0xFF	; 255
    17a6:	ff 83       	std	Y+7, r31	; 0x07
    17a8:	f0 32       	cpi	r31, 0x20	; 32
    17aa:	08 f4       	brcc	.+2      	; 0x17ae <main+0x5fc>
    17ac:	50 61       	ori	r21, 0x10	; 16
			DEBOUNCE(5); // DPI
    17ae:	65 fe       	sbrs	r6, 5
    17b0:	81 c0       	rjmp	.+258    	; 0x18b4 <main+0x702>
    17b2:	85 ff       	sbrs	r24, 5
    17b4:	7f c0       	rjmp	.+254    	; 0x18b4 <main+0x702>
    17b6:	28 85       	ldd	r18, Y+8	; 0x08
    17b8:	2f 5f       	subi	r18, 0xFF	; 255
    17ba:	28 87       	std	Y+8, r18	; 0x08
    17bc:	20 32       	cpi	r18, 0x20	; 32
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <main+0x610>
    17c0:	50 62       	ori	r21, 0x20	; 32
			
			#undef DEBOUNCE
			
			// Profiles ------------------------
			if (profile == 1) {	
    17c2:	3a 81       	ldd	r19, Y+2	; 0x02
    17c4:	31 30       	cpi	r19, 0x01	; 1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <main+0x618>
    17c8:	7d c0       	rjmp	.+250    	; 0x18c4 <main+0x712>
				led_colour = led_colours[led_colours_index];
				led_bright_index = p1_led_brightness;
				led_rgb_brightness = led_bright[led_bright_index];
			}

			if (profile == 2) {
    17ca:	32 30       	cpi	r19, 0x02	; 2
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <main+0x61e>
    17ce:	b4 c0       	rjmp	.+360    	; 0x1938 <main+0x786>
				led_rgb_brightness = led_bright[led_bright_index];
			}

			if (profile == 3) {
				led_colours_index = p3_led_colour;
				led_colour = led_colours[led_colours_index];
    17d0:	35 e0       	ldi	r19, 0x05	; 5
    17d2:	39 83       	std	Y+1, r19	; 0x01
				led_rgb_brightness = led_bright[led_bright_index];
			}
			
			// usb
			// first make sure it's configured
			sei();
    17d4:	78 94       	sei
    17d6:	5b 87       	std	Y+11, r21	; 0x0b
			while (!usb_configured());
    17d8:	f3 d0       	rcall	.+486    	; 0x19c0 <usb_configured>
    17da:	88 23       	and	r24, r24
    17dc:	e9 f3       	breq	.-6      	; 0x17d8 <main+0x626>
    17de:	5b 85       	ldd	r21, Y+11	; 0x0b
			cli();
    17e0:	f8 94       	cli

			// this stuff is very intricate and confusing
			// i'm fairly certain all of it is correct.

			// mask dpi button state for usb
			const uint8_t btn_dbncd_mask = btn_dbncd & 0b00011111;
    17e2:	45 2f       	mov	r20, r21
    17e4:	4f 71       	andi	r20, 0x1F	; 31

			// there's nothing to do if nothing's changed in this 125us cycle
			if ((btn_dbncd_mask != (btn_prev & 0b00011111)) || _x.all || _y.all || _whl) {
    17e6:	24 2f       	mov	r18, r20
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	86 2d       	mov	r24, r6
    17ec:	8f 71       	andi	r24, 0x1F	; 31
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	28 17       	cp	r18, r24
    17f2:	39 07       	cpc	r19, r25
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <main+0x646>
    17f6:	8d c0       	rjmp	.+282    	; 0x1912 <main+0x760>
				UENUM = MOUSE_ENDPOINT;
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UESTA0X & (1<<NBUSYBK0)) { // untransmitted data still in bank
    17fe:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    1802:	80 ff       	sbrs	r24, 0
    1804:	7e c0       	rjmp	.+252    	; 0x1902 <main+0x750>
					UEINTX |= (1<<RXOUTI); // kill bank; RXOUTI == KILLBK
    1806:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    180a:	84 60       	ori	r24, 0x04	; 4
    180c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1810:	9c 85       	ldd	r25, Y+12	; 0x0c
					while (UEINTX & (1<<RXOUTI));
    1812:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1816:	82 fd       	sbrc	r24, 2
    1818:	fc cf       	rjmp	.-8      	; 0x1812 <main+0x660>
    181a:	9c 87       	std	Y+12, r25	; 0x0c
    181c:	c2 01       	movw	r24, r4
    181e:	23 2d       	mov	r18, r3
    1820:	32 2d       	mov	r19, r2
					x.all = 0;
					y.all = 0;
					whl = 0;
				}
				
				btn_usb |= btn_dbncd_mask & 0b00011111; // L, R, M, FSB, RSB
    1822:	14 2b       	or	r17, r20
				x.all += _x.all;
    1824:	8c 0d       	add	r24, r12
    1826:	9d 1d       	adc	r25, r13
    1828:	2c 01       	movw	r4, r24
				y.all += _y.all;
    182a:	2a 0d       	add	r18, r10
    182c:	3b 1d       	adc	r19, r11
    182e:	32 2e       	mov	r3, r18
    1830:	23 2e       	mov	r2, r19
				whl += _whl;
    1832:	0e 0d       	add	r16, r14
				// only load bank with data if there's something worth transmitting
				if ((btn_usb != btn_usb_prev) || x.all || y.all || whl) {
    1834:	1f 15       	cp	r17, r15
    1836:	09 f4       	brne	.+2      	; 0x183a <main+0x688>
    1838:	8e c0       	rjmp	.+284    	; 0x1956 <main+0x7a4>
					UEDATX = btn_usb;
    183a:	10 93 f1 00 	sts	0x00F1, r17	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = x.lo;
    183e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = x.hi;
    1842:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = y.lo;
    1846:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = y.hi;
    184a:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = whl; // wheel scrolls
    184e:	00 93 f1 00 	sts	0x00F1, r16	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX = 0x3a;
    1852:	9a e3       	ldi	r25, 0x3A	; 58
    1854:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	TCCR0B = 0x02; // prescaler 1/8 = 1us period
	OCR0A = 124; // = 125 - 1

	cli();
	while (1) {
		for (uint8_t i = 0; i < 8; i++) {
    1858:	ec 85       	ldd	r30, Y+12	; 0x0c
    185a:	ef 5f       	subi	r30, 0xFF	; 255
    185c:	ec 87       	std	Y+12, r30	; 0x0c
    185e:	e8 30       	cpi	r30, 0x08	; 8
    1860:	09 f4       	brne	.+2      	; 0x1864 <main+0x6b2>
    1862:	67 c0       	rjmp	.+206    	; 0x1932 <main+0x780>
    1864:	65 2e       	mov	r6, r21
		// synchronization to usb frames and 125us intervals
			// polling interrupt flags gives 5 clock cycles or so of
			// jitter. possible to eliminate by going into sleep
			// mode and waking up using interrupts, but whatever.
			if (i == 0) {
    1866:	ec 85       	ldd	r30, Y+12	; 0x0c
    1868:	e1 11       	cpse	r30, r1
    186a:	a5 ce       	rjmp	.-694    	; 0x15b6 <main+0x404>
				// sync to usb frames (1ms)
				UDINT &= ~(1<<SOFI);
    186c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1870:	8b 7f       	andi	r24, 0xFB	; 251
    1872:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1876:	9c 85       	ldd	r25, Y+12	; 0x0c
				while(!(UDINT & (1<<SOFI)));
    1878:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    187c:	82 ff       	sbrs	r24, 2
    187e:	fc cf       	rjmp	.-8      	; 0x1878 <main+0x6c6>
    1880:	9c 87       	std	Y+12, r25	; 0x0c
				// reset prescaler phase, not really necessary
				GTCCR |= (1<<PSRSYNC);
    1882:	83 b5       	in	r24, 0x23	; 35
    1884:	81 60       	ori	r24, 0x01	; 1
    1886:	83 bd       	out	0x23, r24	; 35
				TCNT0 = 0;
    1888:	16 bc       	out	0x26, r1	; 38
			} else {
				// sync to 125us intervals using timer0
				while (!(TIFR0 & (1<<OCF0A)));
			}
			TIFR0 |= (1<<OCF0A); // 0CF0A is cleared by writing 1
    188a:	a9 9a       	sbi	0x15, 1	; 21
				led_r_value = 180;
				led_g_value = 255;
				led_b_value = 255;
			}
			// Red
			if (led_colour == 2) {
    188c:	29 81       	ldd	r18, Y+1	; 0x01
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	09 f0       	breq	.+2      	; 0x1894 <main+0x6e2>
    1892:	9a ce       	rjmp	.-716    	; 0x15c8 <main+0x416>
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	a0 ce       	rjmp	.-704    	; 0x15d8 <main+0x426>
    1898:	83 e0       	ldi	r24, 0x03	; 3
	
	// Profile switching when mouse is plugged in
	delay_ms(50);
	if (!(PIND & (1<<3))) {
		// Initial profile
		profile = 2;
    189a:	32 e0       	ldi	r19, 0x02	; 2
    189c:	3a 83       	std	Y+2, r19	; 0x02
    189e:	d7 cc       	rjmp	.-1618   	; 0x124e <main+0x9c>
    18a0:	87 e0       	ldi	r24, 0x07	; 7
	// Angle snapping settings
	uint8_t angle_index = 0;
	uint8_t angles[] = {0x00, 0x80}; // Off, On
	
	// Initial profile
	uint8_t profile = 1;
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	d3 cc       	rjmp	.-1626   	; 0x124e <main+0x9c>
				if (led_b_timer <= led_b_on) {
					PORTD &= ~(1<<7);
				}
				// Turn off LED at led_x_off value
				if (led_b_timer >= led_b_off) {
					PORTD |= (1<<7);
    18a8:	5f 9a       	sbi	0x0b, 7	; 11
    18aa:	ff ce       	rjmp	.-514    	; 0x16aa <main+0x4f8>
				if (led_g_timer <= led_g_on) {
					PORTB &= ~(1<<6);
				}
				// Turn off LED at led_x_off value
				if (led_g_timer >= led_g_off) {
					PORTB |= (1<<6);
    18ac:	2e 9a       	sbi	0x05, 6	; 5
    18ae:	ef ce       	rjmp	.-546    	; 0x168e <main+0x4dc>
				if (led_r_timer <= led_r_on) {
					PORTB &= ~(1<<5);
				}
				// Turn off LED at led_x_off value
				if (led_r_timer >= led_r_off) {
					PORTB |= (1<<5);
    18b0:	2d 9a       	sbi	0x05, 5	; 5
    18b2:	dd ce       	rjmp	.-582    	; 0x166e <main+0x4bc>
			DEBOUNCE(0); // L
			DEBOUNCE(1); // R
			DEBOUNCE(2); // M
			DEBOUNCE(3); // RSB
			DEBOUNCE(4); // FSB
			DEBOUNCE(5); // DPI
    18b4:	80 95       	com	r24
    18b6:	80 72       	andi	r24, 0x20	; 32
    18b8:	58 2b       	or	r21, r24
    18ba:	18 86       	std	Y+8, r1	; 0x08
			
			#undef DEBOUNCE
			
			// Profiles ------------------------
			if (profile == 1) {	
    18bc:	3a 81       	ldd	r19, Y+2	; 0x02
    18be:	31 30       	cpi	r19, 0x01	; 1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <main+0x712>
    18c2:	83 cf       	rjmp	.-250    	; 0x17ca <main+0x618>
				led_colours_index = p1_led_colour;
				led_colour = led_colours[led_colours_index];
    18c4:	22 e0       	ldi	r18, 0x02	; 2
    18c6:	29 83       	std	Y+1, r18	; 0x01
    18c8:	85 cf       	rjmp	.-246    	; 0x17d4 <main+0x622>

			DEBOUNCE(0); // L
			DEBOUNCE(1); // R
			DEBOUNCE(2); // M
			DEBOUNCE(3); // RSB
			DEBOUNCE(4); // FSB
    18ca:	98 2f       	mov	r25, r24
    18cc:	90 95       	com	r25
    18ce:	90 71       	andi	r25, 0x10	; 16
    18d0:	59 2b       	or	r21, r25
    18d2:	1f 82       	std	Y+7, r1	; 0x07
    18d4:	6c cf       	rjmp	.-296    	; 0x17ae <main+0x5fc>
			}

			DEBOUNCE(0); // L
			DEBOUNCE(1); // R
			DEBOUNCE(2); // M
			DEBOUNCE(3); // RSB
    18d6:	98 2f       	mov	r25, r24
    18d8:	90 95       	com	r25
    18da:	98 70       	andi	r25, 0x08	; 8
    18dc:	59 2b       	or	r21, r25
    18de:	1b 82       	std	Y+3, r1	; 0x03
    18e0:	5c cf       	rjmp	.-328    	; 0x179a <main+0x5e8>
				btn_dbncd |= (~btn_unpressed) & (1<<index); \
			}

			DEBOUNCE(0); // L
			DEBOUNCE(1); // R
			DEBOUNCE(2); // M
    18e2:	98 2f       	mov	r25, r24
    18e4:	90 95       	com	r25
    18e6:	94 70       	andi	r25, 0x04	; 4
    18e8:	59 2b       	or	r21, r25
    18ea:	1c 82       	std	Y+4, r1	; 0x04
    18ec:	4c cf       	rjmp	.-360    	; 0x1786 <main+0x5d4>
				btn_time[index] = 0; \
				btn_dbncd |= (~btn_unpressed) & (1<<index); \
			}

			DEBOUNCE(0); // L
			DEBOUNCE(1); // R
    18ee:	98 2f       	mov	r25, r24
    18f0:	90 95       	com	r25
    18f2:	92 70       	andi	r25, 0x02	; 2
    18f4:	59 2b       	or	r21, r25
    18f6:	1d 82       	std	Y+5, r1	; 0x05
    18f8:	3c cf       	rjmp	.-392    	; 0x1772 <main+0x5c0>
    18fa:	21 e0       	ldi	r18, 0x01	; 1
    18fc:	52 27       	eor	r21, r18
			} else { \
				btn_time[index] = 0; \
				btn_dbncd |= (~btn_unpressed) & (1<<index); \
			}

			DEBOUNCE(0); // L
    18fe:	1e 82       	std	Y+6, r1	; 0x06
    1900:	2e cf       	rjmp	.-420    	; 0x175e <main+0x5ac>
    1902:	f1 2e       	mov	r15, r17
    1904:	00 e0       	ldi	r16, 0x00	; 0
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	10 e0       	ldi	r17, 0x00	; 0
    1910:	88 cf       	rjmp	.-240    	; 0x1822 <main+0x670>

			// mask dpi button state for usb
			const uint8_t btn_dbncd_mask = btn_dbncd & 0b00011111;

			// there's nothing to do if nothing's changed in this 125us cycle
			if ((btn_dbncd_mask != (btn_prev & 0b00011111)) || _x.all || _y.all || _whl) {
    1912:	c1 14       	cp	r12, r1
    1914:	d1 04       	cpc	r13, r1
    1916:	09 f0       	breq	.+2      	; 0x191a <main+0x768>
    1918:	6f cf       	rjmp	.-290    	; 0x17f8 <main+0x646>
    191a:	a1 14       	cp	r10, r1
    191c:	b1 04       	cpc	r11, r1
    191e:	09 f0       	breq	.+2      	; 0x1922 <main+0x770>
    1920:	6b cf       	rjmp	.-298    	; 0x17f8 <main+0x646>
    1922:	e1 10       	cpse	r14, r1
    1924:	69 cf       	rjmp	.-302    	; 0x17f8 <main+0x646>
	TCCR0B = 0x02; // prescaler 1/8 = 1us period
	OCR0A = 124; // = 125 - 1

	cli();
	while (1) {
		for (uint8_t i = 0; i < 8; i++) {
    1926:	ec 85       	ldd	r30, Y+12	; 0x0c
    1928:	ef 5f       	subi	r30, 0xFF	; 255
    192a:	ec 87       	std	Y+12, r30	; 0x0c
    192c:	e8 30       	cpi	r30, 0x08	; 8
    192e:	09 f0       	breq	.+2      	; 0x1932 <main+0x780>
    1930:	99 cf       	rjmp	.-206    	; 0x1864 <main+0x6b2>
    1932:	ef 2c       	mov	r14, r15
    1934:	65 2e       	mov	r6, r21
    1936:	38 ce       	rjmp	.-912    	; 0x15a8 <main+0x3f6>
				led_rgb_brightness = led_bright[led_bright_index];
			}

			if (profile == 2) {
				led_colours_index = p2_led_colour;
				led_colour = led_colours[led_colours_index];
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	99 83       	std	Y+1, r25	; 0x01
    193c:	4b cf       	rjmp	.-362    	; 0x17d4 <main+0x622>
			}
			// Pink
			if (led_colour == 3) {
				led_r_value = 255;
				led_g_value = 0;
				led_b_value = 60;
    193e:	3c e3       	ldi	r19, 0x3C	; 60
    1940:	39 83       	std	Y+1, r19	; 0x01
    1942:	4a ce       	rjmp	.-876    	; 0x15d8 <main+0x426>
			const uint8_t whl_a = WHL_A_IS_HIGH;
			const uint8_t whl_b = WHL_B_IS_HIGH;
			// calculate number of scrolls
			if (whl_a != whl_b)
				whl_prev_diff = whl_a;
			else if (whl_a != whl_prev_same) {
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	89 17       	cp	r24, r25
    1948:	11 f1       	breq	.+68     	; 0x198e <main+0x7dc>
				_whl = 2 * (whl_a ^ whl_prev_diff) - 1;
    194a:	e9 84       	ldd	r14, Y+9	; 0x09
    194c:	e8 26       	eor	r14, r24
    194e:	ee 0c       	add	r14, r14
    1950:	ea 94       	dec	r14
    1952:	8a 87       	std	Y+10, r24	; 0x0a
    1954:	f0 ce       	rjmp	.-544    	; 0x1736 <main+0x584>
				btn_usb |= btn_dbncd_mask & 0b00011111; // L, R, M, FSB, RSB
				x.all += _x.all;
				y.all += _y.all;
				whl += _whl;
				// only load bank with data if there's something worth transmitting
				if ((btn_usb != btn_usb_prev) || x.all || y.all || whl) {
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	09 f0       	breq	.+2      	; 0x195c <main+0x7aa>
    195a:	6f cf       	rjmp	.-290    	; 0x183a <main+0x688>
    195c:	21 15       	cp	r18, r1
    195e:	31 05       	cpc	r19, r1
    1960:	09 f0       	breq	.+2      	; 0x1964 <main+0x7b2>
    1962:	6b cf       	rjmp	.-298    	; 0x183a <main+0x688>
    1964:	00 23       	and	r16, r16
    1966:	09 f4       	brne	.+2      	; 0x196a <main+0x7b8>
    1968:	77 cf       	rjmp	.-274    	; 0x1858 <main+0x6a6>
    196a:	67 cf       	rjmp	.-306    	; 0x183a <main+0x688>
			if (led_b_on > 0) {
				// LED Timer
				led_b_timer++;
				// Reset Timer
				if (led_b_timer == led_max_timer) {
					led_b_timer = 0;
    196c:	71 2c       	mov	r7, r1
				}
				// Turn on LED at led_x_on value
				if (led_b_timer <= led_b_on) {
					PORTD &= ~(1<<7);
    196e:	5f 98       	cbi	0x0b, 7	; 11
    1970:	99 ce       	rjmp	.-718    	; 0x16a4 <main+0x4f2>
			if (led_r_on > 0) {
				// LED Timer
				led_r_timer++;
				// Reset Timer
				if (led_r_timer == led_max_timer) {
					led_r_timer = 0;
    1972:	91 2c       	mov	r9, r1
				}
				// Turn on LED at led_x_on value
				if (led_r_timer <= led_r_on) {
					PORTB &= ~(1<<5);
    1974:	2d 98       	cbi	0x05, 5	; 5
    1976:	78 ce       	rjmp	.-784    	; 0x1668 <main+0x4b6>
			if (led_g_on > 0) {
				// LED Timer
				led_g_timer++;
				// Reset Timer
				if (led_g_timer == led_max_timer) {
					led_g_timer = 0;
    1978:	81 2c       	mov	r8, r1
				}
				// Turn on LED at led_x_on value
				if (led_g_timer <= led_g_on) {
					PORTB &= ~(1<<6);
    197a:	2e 98       	cbi	0x05, 6	; 5
    197c:	85 ce       	rjmp	.-758    	; 0x1688 <main+0x4d6>
    197e:	80 e1       	ldi	r24, 0x10	; 16
    1980:	91 e0       	ldi	r25, 0x01	; 1
    1982:	27 e0       	ldi	r18, 0x07	; 7
    1984:	6f e0       	ldi	r22, 0x0F	; 15
    1986:	1b 86       	std	Y+11, r1	; 0x0b
    1988:	36 e0       	ldi	r19, 0x06	; 6
    198a:	e3 2e       	mov	r14, r19
    198c:	65 ce       	rjmp	.-822    	; 0x1658 <main+0x4a6>
			_y.lo = spi_recv();
			_y.hi = spi_recv();
			SS_HIGH;

		// wheel stuff
			int8_t _whl = 0; // number of scrolls this 125us
    198e:	e1 2c       	mov	r14, r1
    1990:	d2 ce       	rjmp	.-604    	; 0x1736 <main+0x584>

00001992 <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
	USB_FREEZE();				// enable USB
    1998:	80 ea       	ldi	r24, 0xA0	; 160
    199a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	PLL_CONFIG();				// config PLL
    199e:	82 e1       	ldi	r24, 0x12	; 18
    19a0:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    19a2:	09 b4       	in	r0, 0x29	; 41
    19a4:	00 fe       	sbrs	r0, 0
    19a6:	fd cf       	rjmp	.-6      	; 0x19a2 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
    19a8:	80 e9       	ldi	r24, 0x90	; 144
    19aa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        UDCON = 0;				// enable attach resistor
    19ae:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	usb_configuration = 0;
    19b2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        UDIEN = (1<<EORSTE);
    19b6:	88 e0       	ldi	r24, 0x08	; 8
    19b8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	sei();
    19bc:	78 94       	sei
    19be:	08 95       	ret

000019c0 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
    19c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
}
    19c4:	08 95       	ret

000019c6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    19c6:	1f 92       	push	r1
    19c8:	0f 92       	push	r0
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	0f 92       	push	r0
    19ce:	11 24       	eor	r1, r1
    19d0:	8f 93       	push	r24
	uint8_t intbits;

        intbits = UDINT;
    19d2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    19d6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    19da:	83 ff       	sbrs	r24, 3
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <__vector_10+0x36>
		UENUM = 0;
    19de:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    19e8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    19ec:	82 e2       	ldi	r24, 0x22	; 34
    19ee:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    19f2:	88 e0       	ldi	r24, 0x08	; 8
    19f4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    19f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        }
}
    19fc:	8f 91       	pop	r24
    19fe:	0f 90       	pop	r0
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	0f 90       	pop	r0
    1a04:	1f 90       	pop	r1
    1a06:	18 95       	reti

00001a08 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1a08:	1f 92       	push	r1
    1a0a:	0f 92       	push	r0
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	2f 93       	push	r18
    1a14:	3f 93       	push	r19
    1a16:	4f 93       	push	r20
    1a18:	5f 93       	push	r21
    1a1a:	6f 93       	push	r22
    1a1c:	7f 93       	push	r23
    1a1e:	8f 93       	push	r24
    1a20:	9f 93       	push	r25
    1a22:	af 93       	push	r26
    1a24:	bf 93       	push	r27
    1a26:	cf 93       	push	r28
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1a2c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    1a30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        if (intbits & (1<<RXSTPI)) {
    1a34:	83 ff       	sbrs	r24, 3
    1a36:	40 c0       	rjmp	.+128    	; 0x1ab8 <__vector_11+0xb0>
                bmRequestType = UEDATX;
    1a38:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                bRequest = UEDATX;
    1a3c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue = UEDATX;
    1a40:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wValue |= (UEDATX << 8);
    1a44:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	39 2b       	or	r19, r25
                wIndex = UEDATX;
    1a4c:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wIndex |= (UEDATX << 8);
    1a50:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	59 2b       	or	r21, r25
                wLength = UEDATX;
    1a58:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                wLength |= (UEDATX << 8);
    1a5c:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    1a60:	92 ef       	ldi	r25, 0xF2	; 242
    1a62:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    1a66:	86 30       	cpi	r24, 0x06	; 6
    1a68:	d1 f0       	breq	.+52     	; 0x1a9e <__vector_11+0x96>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    1a6a:	85 30       	cpi	r24, 0x05	; 5
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <__vector_11+0x68>
    1a6e:	e0 c0       	rjmp	.+448    	; 0x1c30 <__vector_11+0x228>
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1a70:	89 30       	cpi	r24, 0x09	; 9
    1a72:	b9 f1       	breq	.+110    	; 0x1ae2 <__vector_11+0xda>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1a74:	88 30       	cpi	r24, 0x08	; 8
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__vector_11+0x72>
    1a78:	5d c0       	rjmp	.+186    	; 0x1b34 <__vector_11+0x12c>
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	b2 c0       	rjmp	.+356    	; 0x1be2 <__vector_11+0x1da>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1a7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a82:	80 ff       	sbrs	r24, 0
    1a84:	fc cf       	rjmp	.-8      	; 0x1a7e <__vector_11+0x76>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1a86:	62 38       	cpi	r22, 0x82	; 130
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <__vector_11+0x84>
    1a8a:	15 c1       	rjmp	.+554    	; 0x1cb6 <__vector_11+0x2ae>
			return;
		}

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1a8e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    1a92:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a96:	8e ef       	ldi	r24, 0xFE	; 254
    1a98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a9c:	10 c0       	rjmp	.+32     	; 0x1abe <__vector_11+0xb6>
    1a9e:	67 e0       	ldi	r22, 0x07	; 7
    1aa0:	8a ea       	ldi	r24, 0xAA	; 170
    1aa2:	90 e1       	ldi	r25, 0x10	; 16
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	a5 91       	lpm	r26, Z+
    1aa8:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
    1aaa:	2a 17       	cp	r18, r26
    1aac:	3b 07       	cpc	r19, r27
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <__vector_11+0xaa>
    1ab0:	56 c0       	rjmp	.+172    	; 0x1b5e <__vector_11+0x156>
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
				if (desc_val != wIndex) {
					list += sizeof(struct descriptor_list_struct)-2;
    1ab2:	07 96       	adiw	r24, 0x07	; 7
    1ab4:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1ab6:	b1 f7       	brne	.-20     	; 0x1aa4 <__vector_11+0x9c>
					return;
				}
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1ab8:	81 e2       	ldi	r24, 0x21	; 33
    1aba:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
}
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	cf 91       	pop	r28
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1ae2:	61 11       	cpse	r22, r1
    1ae4:	2a c0       	rjmp	.+84     	; 0x1b3a <__vector_11+0x132>
			usb_configuration = wValue;
    1ae6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1aea:	8e ef       	ldi	r24, 0xFE	; 254
    1aec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1af0:	81 e0       	ldi	r24, 0x01	; 1
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
    1af2:	22 e7       	ldi	r18, 0x72	; 114
    1af4:	31 e1       	ldi	r19, 0x11	; 17
			for (i=1; i<5; i++) {
				UENUM = i;
    1af6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				en = pgm_read_byte(cfg++);
    1afa:	a9 01       	movw	r20, r18
    1afc:	4f 5f       	subi	r20, 0xFF	; 255
    1afe:	5f 4f       	sbci	r21, 0xFF	; 255
    1b00:	f9 01       	movw	r30, r18
    1b02:	94 91       	lpm	r25, Z
				UECONX = en;
    1b04:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    1b08:	99 23       	and	r25, r25
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <__vector_11+0x106>
    1b0c:	d2 c0       	rjmp	.+420    	; 0x1cb2 <__vector_11+0x2aa>
					UECFG0X = pgm_read_byte(cfg++);
    1b0e:	fa 01       	movw	r30, r20
    1b10:	44 91       	lpm	r20, Z
    1b12:	40 93 ec 00 	sts	0x00EC, r20	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					UECFG1X = pgm_read_byte(cfg++);
    1b16:	31 96       	adiw	r30, 0x01	; 1
    1b18:	e4 91       	lpm	r30, Z
    1b1a:	2d 5f       	subi	r18, 0xFD	; 253
    1b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1e:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1b22:	8f 5f       	subi	r24, 0xFF	; 255
    1b24:	85 30       	cpi	r24, 0x05	; 5
    1b26:	39 f7       	brne	.-50     	; 0x1af6 <__vector_11+0xee>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1b28:	8e e1       	ldi	r24, 0x1E	; 30
    1b2a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
        		UERST = 0;
    1b2e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			return;
    1b32:	c5 cf       	rjmp	.-118    	; 0x1abe <__vector_11+0xb6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1b34:	60 38       	cpi	r22, 0x80	; 128
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__vector_11+0x132>
    1b38:	86 c0       	rjmp	.+268    	; 0x1c46 <__vector_11+0x23e>
				}
				return;
			}
		}
		#endif
		if (wIndex == MOUSE_INTERFACE) {
    1b3a:	45 2b       	or	r20, r21
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <__vector_11+0x138>
    1b3e:	bc cf       	rjmp	.-136    	; 0x1ab8 <__vector_11+0xb0>
			if (bmRequestType == 0xA1) {
    1b40:	61 3a       	cpi	r22, 0xA1	; 161
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <__vector_11+0x13e>
    1b44:	91 c0       	rjmp	.+290    	; 0x1c68 <__vector_11+0x260>
					UEDATX = mouse_protocol;
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
    1b46:	61 32       	cpi	r22, 0x21	; 33
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <__vector_11+0x144>
    1b4a:	b6 cf       	rjmp	.-148    	; 0x1ab8 <__vector_11+0xb0>
				if (bRequest == HID_SET_PROTOCOL) {
    1b4c:	8b 30       	cpi	r24, 0x0B	; 11
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <__vector_11+0x14a>
    1b50:	b3 cf       	rjmp	.-154    	; 0x1ab8 <__vector_11+0xb0>
					mouse_protocol = wValue;
    1b52:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b56:	8e ef       	ldi	r24, 0xFE	; 254
    1b58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b5c:	b0 cf       	rjmp	.-160    	; 0x1abe <__vector_11+0xb6>
				desc_val = pgm_read_word(list);
				if (desc_val != wValue) {
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
    1b5e:	fc 01       	movw	r30, r24
    1b60:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1b62:	a5 91       	lpm	r26, Z+
    1b64:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
    1b66:	4a 17       	cp	r20, r26
    1b68:	5b 07       	cpc	r21, r27
    1b6a:	09 f0       	breq	.+2      	; 0x1b6e <__vector_11+0x166>
    1b6c:	a2 cf       	rjmp	.-188    	; 0x1ab2 <__vector_11+0xaa>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    1b6e:	fc 01       	movw	r30, r24
    1b70:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1b72:	45 91       	lpm	r20, Z+
    1b74:	54 91       	lpm	r21, Z
				list += 2;
    1b76:	fc 01       	movw	r30, r24
    1b78:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1b7a:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1b7c:	87 2f       	mov	r24, r23
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1b82:	8f 3f       	cpi	r24, 0xFF	; 255
    1b84:	91 05       	cpc	r25, r1
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <__vector_11+0x184>
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <__vector_11+0x184>
    1b8a:	6b c0       	rjmp	.+214    	; 0x1c62 <__vector_11+0x25a>
    1b8c:	82 17       	cp	r24, r18
    1b8e:	08 f4       	brcc	.+2      	; 0x1b92 <__vector_11+0x18a>
    1b90:	66 c0       	rjmp	.+204    	; 0x1c5e <__vector_11+0x256>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b92:	6e ef       	ldi	r22, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1b94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1b98:	98 2f       	mov	r25, r24
    1b9a:	95 70       	andi	r25, 0x05	; 5
    1b9c:	d9 f3       	breq	.-10     	; 0x1b94 <__vector_11+0x18c>
				if (i & (1<<RXOUTI)) return;	// abort
    1b9e:	82 fd       	sbrc	r24, 2
    1ba0:	8e cf       	rjmp	.-228    	; 0x1abe <__vector_11+0xb6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1ba2:	32 2f       	mov	r19, r18
    1ba4:	21 32       	cpi	r18, 0x21	; 33
    1ba6:	c0 f0       	brcs	.+48     	; 0x1bd8 <__vector_11+0x1d0>
    1ba8:	30 e2       	ldi	r19, 0x20	; 32
				for (i = n; i; i--) {
    1baa:	fa 01       	movw	r30, r20
    1bac:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
    1bae:	94 91       	lpm	r25, Z
    1bb0:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1bb4:	81 50       	subi	r24, 0x01	; 1
    1bb6:	31 96       	adiw	r30, 0x01	; 1
    1bb8:	81 11       	cpse	r24, r1
    1bba:	f9 cf       	rjmp	.-14     	; 0x1bae <__vector_11+0x1a6>
    1bbc:	8f ef       	ldi	r24, 0xFF	; 255
    1bbe:	83 0f       	add	r24, r19
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	01 96       	adiw	r24, 0x01	; 1
    1bc4:	48 0f       	add	r20, r24
    1bc6:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1bc8:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bca:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1bce:	21 11       	cpse	r18, r1
    1bd0:	e1 cf       	rjmp	.-62     	; 0x1b94 <__vector_11+0x18c>
    1bd2:	30 32       	cpi	r19, 0x20	; 32
    1bd4:	f9 f2       	breq	.-66     	; 0x1b94 <__vector_11+0x18c>
    1bd6:	73 cf       	rjmp	.-282    	; 0x1abe <__vector_11+0xb6>
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1bd8:	21 11       	cpse	r18, r1
    1bda:	e7 cf       	rjmp	.-50     	; 0x1baa <__vector_11+0x1a2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1bdc:	60 93 e8 00 	sts	0x00E8, r22	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1be0:	6e cf       	rjmp	.-292    	; 0x1abe <__vector_11+0xb6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1be2:	98 2f       	mov	r25, r24
    1be4:	9d 7f       	andi	r25, 0xFD	; 253
    1be6:	91 30       	cpi	r25, 0x01	; 1
    1be8:	09 f0       	breq	.+2      	; 0x1bec <__vector_11+0x1e4>
    1bea:	a7 cf       	rjmp	.-178    	; 0x1b3a <__vector_11+0x132>
		  && bmRequestType == 0x02 && wValue == 0) {
    1bec:	62 30       	cpi	r22, 0x02	; 2
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <__vector_11+0x1ea>
    1bf0:	a4 cf       	rjmp	.-184    	; 0x1b3a <__vector_11+0x132>
    1bf2:	23 2b       	or	r18, r19
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <__vector_11+0x1f0>
    1bf6:	60 cf       	rjmp	.-320    	; 0x1ab8 <__vector_11+0xb0>
			i = wIndex & 0x7F;
    1bf8:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1bfa:	9f ef       	ldi	r25, 0xFF	; 255
    1bfc:	94 0f       	add	r25, r20
    1bfe:	94 30       	cpi	r25, 0x04	; 4
    1c00:	08 f0       	brcs	.+2      	; 0x1c04 <__vector_11+0x1fc>
    1c02:	5a cf       	rjmp	.-332    	; 0x1ab8 <__vector_11+0xb0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c04:	9e ef       	ldi	r25, 0xFE	; 254
    1c06:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1c0a:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <__vector_11+0x20c>
    1c12:	52 cf       	rjmp	.-348    	; 0x1ab8 <__vector_11+0xb0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1c14:	89 e1       	ldi	r24, 0x19	; 25
    1c16:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <__vector_11+0x21a>
    1c20:	88 0f       	add	r24, r24
    1c22:	4a 95       	dec	r20
    1c24:	ea f7       	brpl	.-6      	; 0x1c20 <__vector_11+0x218>
    1c26:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    1c2a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    1c2e:	47 cf       	rjmp	.-370    	; 0x1abe <__vector_11+0xb6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c30:	8e ef       	ldi	r24, 0xFE	; 254
    1c32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c3a:	80 ff       	sbrs	r24, 0
    1c3c:	fc cf       	rjmp	.-8      	; 0x1c36 <__vector_11+0x22e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1c3e:	20 68       	ori	r18, 0x80	; 128
    1c40:	20 93 e3 00 	sts	0x00E3, r18	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    1c44:	3c cf       	rjmp	.-392    	; 0x1abe <__vector_11+0xb6>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c4a:	80 ff       	sbrs	r24, 0
    1c4c:	fc cf       	rjmp	.-8      	; 0x1c46 <__vector_11+0x23e>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1c4e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    1c52:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c56:	8e ef       	ldi	r24, 0xFE	; 254
    1c58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c5c:	30 cf       	rjmp	.-416    	; 0x1abe <__vector_11+0xb6>
    1c5e:	28 2f       	mov	r18, r24
    1c60:	98 cf       	rjmp	.-208    	; 0x1b92 <__vector_11+0x18a>
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	92 cf       	rjmp	.-220    	; 0x1b8c <__vector_11+0x184>
			}
		}
		#endif
		if (wIndex == MOUSE_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	79 f0       	breq	.+30     	; 0x1c8a <__vector_11+0x282>
					UEDATX = 0;
					UEDATX = 0;
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <__vector_11+0x26a>
    1c70:	23 cf       	rjmp	.-442    	; 0x1ab8 <__vector_11+0xb0>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c76:	80 ff       	sbrs	r24, 0
    1c78:	fc cf       	rjmp	.-8      	; 0x1c72 <__vector_11+0x26a>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = mouse_protocol;
    1c7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1c7e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1c82:	8e ef       	ldi	r24, 0xFE	; 254
    1c84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c88:	1a cf       	rjmp	.-460    	; 0x1abe <__vector_11+0xb6>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1c8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1c8e:	80 ff       	sbrs	r24, 0
    1c90:	fc cf       	rjmp	.-8      	; 0x1c8a <__vector_11+0x282>
		#endif
		if (wIndex == MOUSE_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = 0;
    1c92:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
    1c96:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
    1c9a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
    1c9e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
    1ca2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEDATX = 0;
    1ca6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1caa:	8e ef       	ldi	r24, 0xFE	; 254
    1cac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cb0:	06 cf       	rjmp	.-500    	; 0x1abe <__vector_11+0xb6>
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1cb2:	9a 01       	movw	r18, r20
    1cb4:	36 cf       	rjmp	.-404    	; 0x1b22 <__vector_11+0x11a>
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
				UENUM = wIndex;
    1cb6:	40 93 e9 00 	sts	0x00E9, r20	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    1cba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1cbe:	85 fb       	bst	r24, 5
    1cc0:	88 27       	eor	r24, r24
    1cc2:	80 f9       	bld	r24, 0
				UENUM = 0;
    1cc4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1cc8:	e2 ce       	rjmp	.-572    	; 0x1a8e <__vector_11+0x86>

00001cca <__subsf3>:
    1cca:	50 58       	subi	r21, 0x80	; 128

00001ccc <__addsf3>:
    1ccc:	bb 27       	eor	r27, r27
    1cce:	aa 27       	eor	r26, r26
    1cd0:	0e d0       	rcall	.+28     	; 0x1cee <__addsf3x>
    1cd2:	e0 c0       	rjmp	.+448    	; 0x1e94 <__fp_round>
    1cd4:	d1 d0       	rcall	.+418    	; 0x1e78 <__fp_pscA>
    1cd6:	30 f0       	brcs	.+12     	; 0x1ce4 <__addsf3+0x18>
    1cd8:	d6 d0       	rcall	.+428    	; 0x1e86 <__fp_pscB>
    1cda:	20 f0       	brcs	.+8      	; 0x1ce4 <__addsf3+0x18>
    1cdc:	31 f4       	brne	.+12     	; 0x1cea <__addsf3+0x1e>
    1cde:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <__addsf3+0x1a>
    1ce2:	1e f4       	brtc	.+6      	; 0x1cea <__addsf3+0x1e>
    1ce4:	c6 c0       	rjmp	.+396    	; 0x1e72 <__fp_nan>
    1ce6:	0e f4       	brtc	.+2      	; 0x1cea <__addsf3+0x1e>
    1ce8:	e0 95       	com	r30
    1cea:	e7 fb       	bst	r30, 7
    1cec:	bc c0       	rjmp	.+376    	; 0x1e66 <__fp_inf>

00001cee <__addsf3x>:
    1cee:	e9 2f       	mov	r30, r25
    1cf0:	e2 d0       	rcall	.+452    	; 0x1eb6 <__fp_split3>
    1cf2:	80 f3       	brcs	.-32     	; 0x1cd4 <__addsf3+0x8>
    1cf4:	ba 17       	cp	r27, r26
    1cf6:	62 07       	cpc	r22, r18
    1cf8:	73 07       	cpc	r23, r19
    1cfa:	84 07       	cpc	r24, r20
    1cfc:	95 07       	cpc	r25, r21
    1cfe:	18 f0       	brcs	.+6      	; 0x1d06 <__addsf3x+0x18>
    1d00:	71 f4       	brne	.+28     	; 0x1d1e <__addsf3x+0x30>
    1d02:	9e f5       	brtc	.+102    	; 0x1d6a <__addsf3x+0x7c>
    1d04:	fa c0       	rjmp	.+500    	; 0x1efa <__fp_zero>
    1d06:	0e f4       	brtc	.+2      	; 0x1d0a <__addsf3x+0x1c>
    1d08:	e0 95       	com	r30
    1d0a:	0b 2e       	mov	r0, r27
    1d0c:	ba 2f       	mov	r27, r26
    1d0e:	a0 2d       	mov	r26, r0
    1d10:	0b 01       	movw	r0, r22
    1d12:	b9 01       	movw	r22, r18
    1d14:	90 01       	movw	r18, r0
    1d16:	0c 01       	movw	r0, r24
    1d18:	ca 01       	movw	r24, r20
    1d1a:	a0 01       	movw	r20, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	ff 27       	eor	r31, r31
    1d20:	59 1b       	sub	r21, r25
    1d22:	99 f0       	breq	.+38     	; 0x1d4a <__addsf3x+0x5c>
    1d24:	59 3f       	cpi	r21, 0xF9	; 249
    1d26:	50 f4       	brcc	.+20     	; 0x1d3c <__addsf3x+0x4e>
    1d28:	50 3e       	cpi	r21, 0xE0	; 224
    1d2a:	68 f1       	brcs	.+90     	; 0x1d86 <__addsf3x+0x98>
    1d2c:	1a 16       	cp	r1, r26
    1d2e:	f0 40       	sbci	r31, 0x00	; 0
    1d30:	a2 2f       	mov	r26, r18
    1d32:	23 2f       	mov	r18, r19
    1d34:	34 2f       	mov	r19, r20
    1d36:	44 27       	eor	r20, r20
    1d38:	58 5f       	subi	r21, 0xF8	; 248
    1d3a:	f3 cf       	rjmp	.-26     	; 0x1d22 <__addsf3x+0x34>
    1d3c:	46 95       	lsr	r20
    1d3e:	37 95       	ror	r19
    1d40:	27 95       	ror	r18
    1d42:	a7 95       	ror	r26
    1d44:	f0 40       	sbci	r31, 0x00	; 0
    1d46:	53 95       	inc	r21
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <__addsf3x+0x4e>
    1d4a:	7e f4       	brtc	.+30     	; 0x1d6a <__addsf3x+0x7c>
    1d4c:	1f 16       	cp	r1, r31
    1d4e:	ba 0b       	sbc	r27, r26
    1d50:	62 0b       	sbc	r22, r18
    1d52:	73 0b       	sbc	r23, r19
    1d54:	84 0b       	sbc	r24, r20
    1d56:	ba f0       	brmi	.+46     	; 0x1d86 <__addsf3x+0x98>
    1d58:	91 50       	subi	r25, 0x01	; 1
    1d5a:	a1 f0       	breq	.+40     	; 0x1d84 <__addsf3x+0x96>
    1d5c:	ff 0f       	add	r31, r31
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	66 1f       	adc	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	c2 f7       	brpl	.-16     	; 0x1d58 <__addsf3x+0x6a>
    1d68:	0e c0       	rjmp	.+28     	; 0x1d86 <__addsf3x+0x98>
    1d6a:	ba 0f       	add	r27, r26
    1d6c:	62 1f       	adc	r22, r18
    1d6e:	73 1f       	adc	r23, r19
    1d70:	84 1f       	adc	r24, r20
    1d72:	48 f4       	brcc	.+18     	; 0x1d86 <__addsf3x+0x98>
    1d74:	87 95       	ror	r24
    1d76:	77 95       	ror	r23
    1d78:	67 95       	ror	r22
    1d7a:	b7 95       	ror	r27
    1d7c:	f7 95       	ror	r31
    1d7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d80:	08 f0       	brcs	.+2      	; 0x1d84 <__addsf3x+0x96>
    1d82:	b3 cf       	rjmp	.-154    	; 0x1cea <__addsf3+0x1e>
    1d84:	93 95       	inc	r25
    1d86:	88 0f       	add	r24, r24
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <__addsf3x+0x9e>
    1d8a:	99 27       	eor	r25, r25
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	97 95       	ror	r25
    1d90:	87 95       	ror	r24
    1d92:	08 95       	ret

00001d94 <__fixunssfsi>:
    1d94:	98 d0       	rcall	.+304    	; 0x1ec6 <__fp_splitA>
    1d96:	88 f0       	brcs	.+34     	; 0x1dba <__fixunssfsi+0x26>
    1d98:	9f 57       	subi	r25, 0x7F	; 127
    1d9a:	90 f0       	brcs	.+36     	; 0x1dc0 <__fixunssfsi+0x2c>
    1d9c:	b9 2f       	mov	r27, r25
    1d9e:	99 27       	eor	r25, r25
    1da0:	b7 51       	subi	r27, 0x17	; 23
    1da2:	a0 f0       	brcs	.+40     	; 0x1dcc <__fixunssfsi+0x38>
    1da4:	d1 f0       	breq	.+52     	; 0x1dda <__fixunssfsi+0x46>
    1da6:	66 0f       	add	r22, r22
    1da8:	77 1f       	adc	r23, r23
    1daa:	88 1f       	adc	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	1a f0       	brmi	.+6      	; 0x1db6 <__fixunssfsi+0x22>
    1db0:	ba 95       	dec	r27
    1db2:	c9 f7       	brne	.-14     	; 0x1da6 <__fixunssfsi+0x12>
    1db4:	12 c0       	rjmp	.+36     	; 0x1dda <__fixunssfsi+0x46>
    1db6:	b1 30       	cpi	r27, 0x01	; 1
    1db8:	81 f0       	breq	.+32     	; 0x1dda <__fixunssfsi+0x46>
    1dba:	9f d0       	rcall	.+318    	; 0x1efa <__fp_zero>
    1dbc:	b1 e0       	ldi	r27, 0x01	; 1
    1dbe:	08 95       	ret
    1dc0:	9c c0       	rjmp	.+312    	; 0x1efa <__fp_zero>
    1dc2:	67 2f       	mov	r22, r23
    1dc4:	78 2f       	mov	r23, r24
    1dc6:	88 27       	eor	r24, r24
    1dc8:	b8 5f       	subi	r27, 0xF8	; 248
    1dca:	39 f0       	breq	.+14     	; 0x1dda <__fixunssfsi+0x46>
    1dcc:	b9 3f       	cpi	r27, 0xF9	; 249
    1dce:	cc f3       	brlt	.-14     	; 0x1dc2 <__fixunssfsi+0x2e>
    1dd0:	86 95       	lsr	r24
    1dd2:	77 95       	ror	r23
    1dd4:	67 95       	ror	r22
    1dd6:	b3 95       	inc	r27
    1dd8:	d9 f7       	brne	.-10     	; 0x1dd0 <__fixunssfsi+0x3c>
    1dda:	3e f4       	brtc	.+14     	; 0x1dea <__fixunssfsi+0x56>
    1ddc:	90 95       	com	r25
    1dde:	80 95       	com	r24
    1de0:	70 95       	com	r23
    1de2:	61 95       	neg	r22
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	8f 4f       	sbci	r24, 0xFF	; 255
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	08 95       	ret

00001dec <__floatunsisf>:
    1dec:	e8 94       	clt
    1dee:	09 c0       	rjmp	.+18     	; 0x1e02 <__floatsisf+0x12>

00001df0 <__floatsisf>:
    1df0:	97 fb       	bst	r25, 7
    1df2:	3e f4       	brtc	.+14     	; 0x1e02 <__floatsisf+0x12>
    1df4:	90 95       	com	r25
    1df6:	80 95       	com	r24
    1df8:	70 95       	com	r23
    1dfa:	61 95       	neg	r22
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1e00:	9f 4f       	sbci	r25, 0xFF	; 255
    1e02:	99 23       	and	r25, r25
    1e04:	a9 f0       	breq	.+42     	; 0x1e30 <__floatsisf+0x40>
    1e06:	f9 2f       	mov	r31, r25
    1e08:	96 e9       	ldi	r25, 0x96	; 150
    1e0a:	bb 27       	eor	r27, r27
    1e0c:	93 95       	inc	r25
    1e0e:	f6 95       	lsr	r31
    1e10:	87 95       	ror	r24
    1e12:	77 95       	ror	r23
    1e14:	67 95       	ror	r22
    1e16:	b7 95       	ror	r27
    1e18:	f1 11       	cpse	r31, r1
    1e1a:	f8 cf       	rjmp	.-16     	; 0x1e0c <__floatsisf+0x1c>
    1e1c:	fa f4       	brpl	.+62     	; 0x1e5c <__floatsisf+0x6c>
    1e1e:	bb 0f       	add	r27, r27
    1e20:	11 f4       	brne	.+4      	; 0x1e26 <__floatsisf+0x36>
    1e22:	60 ff       	sbrs	r22, 0
    1e24:	1b c0       	rjmp	.+54     	; 0x1e5c <__floatsisf+0x6c>
    1e26:	6f 5f       	subi	r22, 0xFF	; 255
    1e28:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	16 c0       	rjmp	.+44     	; 0x1e5c <__floatsisf+0x6c>
    1e30:	88 23       	and	r24, r24
    1e32:	11 f0       	breq	.+4      	; 0x1e38 <__floatsisf+0x48>
    1e34:	96 e9       	ldi	r25, 0x96	; 150
    1e36:	11 c0       	rjmp	.+34     	; 0x1e5a <__floatsisf+0x6a>
    1e38:	77 23       	and	r23, r23
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <__floatsisf+0x54>
    1e3c:	9e e8       	ldi	r25, 0x8E	; 142
    1e3e:	87 2f       	mov	r24, r23
    1e40:	76 2f       	mov	r23, r22
    1e42:	05 c0       	rjmp	.+10     	; 0x1e4e <__floatsisf+0x5e>
    1e44:	66 23       	and	r22, r22
    1e46:	71 f0       	breq	.+28     	; 0x1e64 <__floatsisf+0x74>
    1e48:	96 e8       	ldi	r25, 0x86	; 134
    1e4a:	86 2f       	mov	r24, r22
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	2a f0       	brmi	.+10     	; 0x1e5c <__floatsisf+0x6c>
    1e52:	9a 95       	dec	r25
    1e54:	66 0f       	add	r22, r22
    1e56:	77 1f       	adc	r23, r23
    1e58:	88 1f       	adc	r24, r24
    1e5a:	da f7       	brpl	.-10     	; 0x1e52 <__floatsisf+0x62>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	96 95       	lsr	r25
    1e60:	87 95       	ror	r24
    1e62:	97 f9       	bld	r25, 7
    1e64:	08 95       	ret

00001e66 <__fp_inf>:
    1e66:	97 f9       	bld	r25, 7
    1e68:	9f 67       	ori	r25, 0x7F	; 127
    1e6a:	80 e8       	ldi	r24, 0x80	; 128
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	08 95       	ret

00001e72 <__fp_nan>:
    1e72:	9f ef       	ldi	r25, 0xFF	; 255
    1e74:	80 ec       	ldi	r24, 0xC0	; 192
    1e76:	08 95       	ret

00001e78 <__fp_pscA>:
    1e78:	00 24       	eor	r0, r0
    1e7a:	0a 94       	dec	r0
    1e7c:	16 16       	cp	r1, r22
    1e7e:	17 06       	cpc	r1, r23
    1e80:	18 06       	cpc	r1, r24
    1e82:	09 06       	cpc	r0, r25
    1e84:	08 95       	ret

00001e86 <__fp_pscB>:
    1e86:	00 24       	eor	r0, r0
    1e88:	0a 94       	dec	r0
    1e8a:	12 16       	cp	r1, r18
    1e8c:	13 06       	cpc	r1, r19
    1e8e:	14 06       	cpc	r1, r20
    1e90:	05 06       	cpc	r0, r21
    1e92:	08 95       	ret

00001e94 <__fp_round>:
    1e94:	09 2e       	mov	r0, r25
    1e96:	03 94       	inc	r0
    1e98:	00 0c       	add	r0, r0
    1e9a:	11 f4       	brne	.+4      	; 0x1ea0 <__fp_round+0xc>
    1e9c:	88 23       	and	r24, r24
    1e9e:	52 f0       	brmi	.+20     	; 0x1eb4 <__fp_round+0x20>
    1ea0:	bb 0f       	add	r27, r27
    1ea2:	40 f4       	brcc	.+16     	; 0x1eb4 <__fp_round+0x20>
    1ea4:	bf 2b       	or	r27, r31
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <__fp_round+0x18>
    1ea8:	60 ff       	sbrs	r22, 0
    1eaa:	04 c0       	rjmp	.+8      	; 0x1eb4 <__fp_round+0x20>
    1eac:	6f 5f       	subi	r22, 0xFF	; 255
    1eae:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb4:	08 95       	ret

00001eb6 <__fp_split3>:
    1eb6:	57 fd       	sbrc	r21, 7
    1eb8:	90 58       	subi	r25, 0x80	; 128
    1eba:	44 0f       	add	r20, r20
    1ebc:	55 1f       	adc	r21, r21
    1ebe:	59 f0       	breq	.+22     	; 0x1ed6 <__fp_splitA+0x10>
    1ec0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ec2:	71 f0       	breq	.+28     	; 0x1ee0 <__fp_splitA+0x1a>
    1ec4:	47 95       	ror	r20

00001ec6 <__fp_splitA>:
    1ec6:	88 0f       	add	r24, r24
    1ec8:	97 fb       	bst	r25, 7
    1eca:	99 1f       	adc	r25, r25
    1ecc:	61 f0       	breq	.+24     	; 0x1ee6 <__fp_splitA+0x20>
    1ece:	9f 3f       	cpi	r25, 0xFF	; 255
    1ed0:	79 f0       	breq	.+30     	; 0x1ef0 <__fp_splitA+0x2a>
    1ed2:	87 95       	ror	r24
    1ed4:	08 95       	ret
    1ed6:	12 16       	cp	r1, r18
    1ed8:	13 06       	cpc	r1, r19
    1eda:	14 06       	cpc	r1, r20
    1edc:	55 1f       	adc	r21, r21
    1ede:	f2 cf       	rjmp	.-28     	; 0x1ec4 <__fp_split3+0xe>
    1ee0:	46 95       	lsr	r20
    1ee2:	f1 df       	rcall	.-30     	; 0x1ec6 <__fp_splitA>
    1ee4:	08 c0       	rjmp	.+16     	; 0x1ef6 <__fp_splitA+0x30>
    1ee6:	16 16       	cp	r1, r22
    1ee8:	17 06       	cpc	r1, r23
    1eea:	18 06       	cpc	r1, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	f1 cf       	rjmp	.-30     	; 0x1ed2 <__fp_splitA+0xc>
    1ef0:	86 95       	lsr	r24
    1ef2:	71 05       	cpc	r23, r1
    1ef4:	61 05       	cpc	r22, r1
    1ef6:	08 94       	sec
    1ef8:	08 95       	ret

00001efa <__fp_zero>:
    1efa:	e8 94       	clt

00001efc <__fp_szero>:
    1efc:	bb 27       	eor	r27, r27
    1efe:	66 27       	eor	r22, r22
    1f00:	77 27       	eor	r23, r23
    1f02:	cb 01       	movw	r24, r22
    1f04:	97 f9       	bld	r25, 7
    1f06:	08 95       	ret

00001f08 <_exit>:
    1f08:	f8 94       	cli

00001f0a <__stop_program>:
    1f0a:	ff cf       	rjmp	.-2      	; 0x1f0a <__stop_program>
